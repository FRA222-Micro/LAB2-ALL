
LAB02-ex01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000089ec  080001d8  080001d8  000011d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08008bc4  08008bc4  00009bc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c04  08008c04  0000a0a0  2**0
                  CONTENTS
  4 .ARM          00000008  08008c04  08008c04  00009c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c0c  08008c0c  0000a0a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c0c  08008c0c  00009c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c10  08008c10  00009c10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08008c14  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000380  200000a0  08008cb4  0000a0a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000420  08008cb4  0000a420  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a0a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001817e  00000000  00000000  0000a0d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b71  00000000  00000000  0002224e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000014f0  00000000  00000000  00024dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001061  00000000  00000000  000262b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00028dbd  00000000  00000000  00027311  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017e6a  00000000  00000000  000500ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001145db  00000000  00000000  00067f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017c513  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005c14  00000000  00000000  0017c558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  0018216c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200000a0 	.word	0x200000a0
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08008bac 	.word	0x08008bac

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200000a4 	.word	0x200000a4
 8000214:	08008bac 	.word	0x08008bac

08000218 <__aeabi_drsub>:
 8000218:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 800021c:	e002      	b.n	8000224 <__adddf3>
 800021e:	bf00      	nop

08000220 <__aeabi_dsub>:
 8000220:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000224 <__adddf3>:
 8000224:	b530      	push	{r4, r5, lr}
 8000226:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800022a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800022e:	ea94 0f05 	teq	r4, r5
 8000232:	bf08      	it	eq
 8000234:	ea90 0f02 	teqeq	r0, r2
 8000238:	bf1f      	itttt	ne
 800023a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800023e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000242:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000246:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800024a:	f000 80e2 	beq.w	8000412 <__adddf3+0x1ee>
 800024e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000252:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000256:	bfb8      	it	lt
 8000258:	426d      	neglt	r5, r5
 800025a:	dd0c      	ble.n	8000276 <__adddf3+0x52>
 800025c:	442c      	add	r4, r5
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	ea82 0000 	eor.w	r0, r2, r0
 800026a:	ea83 0101 	eor.w	r1, r3, r1
 800026e:	ea80 0202 	eor.w	r2, r0, r2
 8000272:	ea81 0303 	eor.w	r3, r1, r3
 8000276:	2d36      	cmp	r5, #54	@ 0x36
 8000278:	bf88      	it	hi
 800027a:	bd30      	pophi	{r4, r5, pc}
 800027c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000280:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000284:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000288:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800028c:	d002      	beq.n	8000294 <__adddf3+0x70>
 800028e:	4240      	negs	r0, r0
 8000290:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000294:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000298:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800029c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a0:	d002      	beq.n	80002a8 <__adddf3+0x84>
 80002a2:	4252      	negs	r2, r2
 80002a4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002a8:	ea94 0f05 	teq	r4, r5
 80002ac:	f000 80a7 	beq.w	80003fe <__adddf3+0x1da>
 80002b0:	f1a4 0401 	sub.w	r4, r4, #1
 80002b4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002b8:	db0d      	blt.n	80002d6 <__adddf3+0xb2>
 80002ba:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002be:	fa22 f205 	lsr.w	r2, r2, r5
 80002c2:	1880      	adds	r0, r0, r2
 80002c4:	f141 0100 	adc.w	r1, r1, #0
 80002c8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002cc:	1880      	adds	r0, r0, r2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	4159      	adcs	r1, r3
 80002d4:	e00e      	b.n	80002f4 <__adddf3+0xd0>
 80002d6:	f1a5 0520 	sub.w	r5, r5, #32
 80002da:	f10e 0e20 	add.w	lr, lr, #32
 80002de:	2a01      	cmp	r2, #1
 80002e0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002e4:	bf28      	it	cs
 80002e6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ea:	fa43 f305 	asr.w	r3, r3, r5
 80002ee:	18c0      	adds	r0, r0, r3
 80002f0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002f4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002f8:	d507      	bpl.n	800030a <__adddf3+0xe6>
 80002fa:	f04f 0e00 	mov.w	lr, #0
 80002fe:	f1dc 0c00 	rsbs	ip, ip, #0
 8000302:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000306:	eb6e 0101 	sbc.w	r1, lr, r1
 800030a:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800030e:	d31b      	bcc.n	8000348 <__adddf3+0x124>
 8000310:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000314:	d30c      	bcc.n	8000330 <__adddf3+0x10c>
 8000316:	0849      	lsrs	r1, r1, #1
 8000318:	ea5f 0030 	movs.w	r0, r0, rrx
 800031c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000320:	f104 0401 	add.w	r4, r4, #1
 8000324:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000328:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 800032c:	f080 809a 	bcs.w	8000464 <__adddf3+0x240>
 8000330:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000334:	bf08      	it	eq
 8000336:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800033a:	f150 0000 	adcs.w	r0, r0, #0
 800033e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000342:	ea41 0105 	orr.w	r1, r1, r5
 8000346:	bd30      	pop	{r4, r5, pc}
 8000348:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800034c:	4140      	adcs	r0, r0
 800034e:	eb41 0101 	adc.w	r1, r1, r1
 8000352:	3c01      	subs	r4, #1
 8000354:	bf28      	it	cs
 8000356:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800035a:	d2e9      	bcs.n	8000330 <__adddf3+0x10c>
 800035c:	f091 0f00 	teq	r1, #0
 8000360:	bf04      	itt	eq
 8000362:	4601      	moveq	r1, r0
 8000364:	2000      	moveq	r0, #0
 8000366:	fab1 f381 	clz	r3, r1
 800036a:	bf08      	it	eq
 800036c:	3320      	addeq	r3, #32
 800036e:	f1a3 030b 	sub.w	r3, r3, #11
 8000372:	f1b3 0220 	subs.w	r2, r3, #32
 8000376:	da0c      	bge.n	8000392 <__adddf3+0x16e>
 8000378:	320c      	adds	r2, #12
 800037a:	dd08      	ble.n	800038e <__adddf3+0x16a>
 800037c:	f102 0c14 	add.w	ip, r2, #20
 8000380:	f1c2 020c 	rsb	r2, r2, #12
 8000384:	fa01 f00c 	lsl.w	r0, r1, ip
 8000388:	fa21 f102 	lsr.w	r1, r1, r2
 800038c:	e00c      	b.n	80003a8 <__adddf3+0x184>
 800038e:	f102 0214 	add.w	r2, r2, #20
 8000392:	bfd8      	it	le
 8000394:	f1c2 0c20 	rsble	ip, r2, #32
 8000398:	fa01 f102 	lsl.w	r1, r1, r2
 800039c:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a0:	bfdc      	itt	le
 80003a2:	ea41 010c 	orrle.w	r1, r1, ip
 80003a6:	4090      	lslle	r0, r2
 80003a8:	1ae4      	subs	r4, r4, r3
 80003aa:	bfa2      	ittt	ge
 80003ac:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b0:	4329      	orrge	r1, r5
 80003b2:	bd30      	popge	{r4, r5, pc}
 80003b4:	ea6f 0404 	mvn.w	r4, r4
 80003b8:	3c1f      	subs	r4, #31
 80003ba:	da1c      	bge.n	80003f6 <__adddf3+0x1d2>
 80003bc:	340c      	adds	r4, #12
 80003be:	dc0e      	bgt.n	80003de <__adddf3+0x1ba>
 80003c0:	f104 0414 	add.w	r4, r4, #20
 80003c4:	f1c4 0220 	rsb	r2, r4, #32
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f302 	lsl.w	r3, r1, r2
 80003d0:	ea40 0003 	orr.w	r0, r0, r3
 80003d4:	fa21 f304 	lsr.w	r3, r1, r4
 80003d8:	ea45 0103 	orr.w	r1, r5, r3
 80003dc:	bd30      	pop	{r4, r5, pc}
 80003de:	f1c4 040c 	rsb	r4, r4, #12
 80003e2:	f1c4 0220 	rsb	r2, r4, #32
 80003e6:	fa20 f002 	lsr.w	r0, r0, r2
 80003ea:	fa01 f304 	lsl.w	r3, r1, r4
 80003ee:	ea40 0003 	orr.w	r0, r0, r3
 80003f2:	4629      	mov	r1, r5
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	fa21 f004 	lsr.w	r0, r1, r4
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	f094 0f00 	teq	r4, #0
 8000402:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000406:	bf06      	itte	eq
 8000408:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 800040c:	3401      	addeq	r4, #1
 800040e:	3d01      	subne	r5, #1
 8000410:	e74e      	b.n	80002b0 <__adddf3+0x8c>
 8000412:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000416:	bf18      	it	ne
 8000418:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800041c:	d029      	beq.n	8000472 <__adddf3+0x24e>
 800041e:	ea94 0f05 	teq	r4, r5
 8000422:	bf08      	it	eq
 8000424:	ea90 0f02 	teqeq	r0, r2
 8000428:	d005      	beq.n	8000436 <__adddf3+0x212>
 800042a:	ea54 0c00 	orrs.w	ip, r4, r0
 800042e:	bf04      	itt	eq
 8000430:	4619      	moveq	r1, r3
 8000432:	4610      	moveq	r0, r2
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	ea91 0f03 	teq	r1, r3
 800043a:	bf1e      	ittt	ne
 800043c:	2100      	movne	r1, #0
 800043e:	2000      	movne	r0, #0
 8000440:	bd30      	popne	{r4, r5, pc}
 8000442:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000446:	d105      	bne.n	8000454 <__adddf3+0x230>
 8000448:	0040      	lsls	r0, r0, #1
 800044a:	4149      	adcs	r1, r1
 800044c:	bf28      	it	cs
 800044e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000452:	bd30      	pop	{r4, r5, pc}
 8000454:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000458:	bf3c      	itt	cc
 800045a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800045e:	bd30      	popcc	{r4, r5, pc}
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000468:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800046c:	f04f 0000 	mov.w	r0, #0
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000476:	bf1a      	itte	ne
 8000478:	4619      	movne	r1, r3
 800047a:	4610      	movne	r0, r2
 800047c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000480:	bf1c      	itt	ne
 8000482:	460b      	movne	r3, r1
 8000484:	4602      	movne	r2, r0
 8000486:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800048a:	bf06      	itte	eq
 800048c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000490:	ea91 0f03 	teqeq	r1, r3
 8000494:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000498:	bd30      	pop	{r4, r5, pc}
 800049a:	bf00      	nop

0800049c <__aeabi_ui2d>:
 800049c:	f090 0f00 	teq	r0, #0
 80004a0:	bf04      	itt	eq
 80004a2:	2100      	moveq	r1, #0
 80004a4:	4770      	bxeq	lr
 80004a6:	b530      	push	{r4, r5, lr}
 80004a8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004ac:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004b0:	f04f 0500 	mov.w	r5, #0
 80004b4:	f04f 0100 	mov.w	r1, #0
 80004b8:	e750      	b.n	800035c <__adddf3+0x138>
 80004ba:	bf00      	nop

080004bc <__aeabi_i2d>:
 80004bc:	f090 0f00 	teq	r0, #0
 80004c0:	bf04      	itt	eq
 80004c2:	2100      	moveq	r1, #0
 80004c4:	4770      	bxeq	lr
 80004c6:	b530      	push	{r4, r5, lr}
 80004c8:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004cc:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004d0:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004d4:	bf48      	it	mi
 80004d6:	4240      	negmi	r0, r0
 80004d8:	f04f 0100 	mov.w	r1, #0
 80004dc:	e73e      	b.n	800035c <__adddf3+0x138>
 80004de:	bf00      	nop

080004e0 <__aeabi_f2d>:
 80004e0:	0042      	lsls	r2, r0, #1
 80004e2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004e6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ea:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ee:	bf1f      	itttt	ne
 80004f0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004f4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004f8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004fc:	4770      	bxne	lr
 80004fe:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000502:	bf08      	it	eq
 8000504:	4770      	bxeq	lr
 8000506:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800050a:	bf04      	itt	eq
 800050c:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000510:	4770      	bxeq	lr
 8000512:	b530      	push	{r4, r5, lr}
 8000514:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000518:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800051c:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000520:	e71c      	b.n	800035c <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_ul2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f04f 0500 	mov.w	r5, #0
 8000532:	e00a      	b.n	800054a <__aeabi_l2d+0x16>

08000534 <__aeabi_l2d>:
 8000534:	ea50 0201 	orrs.w	r2, r0, r1
 8000538:	bf08      	it	eq
 800053a:	4770      	bxeq	lr
 800053c:	b530      	push	{r4, r5, lr}
 800053e:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000542:	d502      	bpl.n	800054a <__aeabi_l2d+0x16>
 8000544:	4240      	negs	r0, r0
 8000546:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800054a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800054e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000552:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000556:	f43f aed8 	beq.w	800030a <__adddf3+0xe6>
 800055a:	f04f 0203 	mov.w	r2, #3
 800055e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000562:	bf18      	it	ne
 8000564:	3203      	addne	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000572:	f1c2 0320 	rsb	r3, r2, #32
 8000576:	fa00 fc03 	lsl.w	ip, r0, r3
 800057a:	fa20 f002 	lsr.w	r0, r0, r2
 800057e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000582:	ea40 000e 	orr.w	r0, r0, lr
 8000586:	fa21 f102 	lsr.w	r1, r1, r2
 800058a:	4414      	add	r4, r2
 800058c:	e6bd      	b.n	800030a <__adddf3+0xe6>
 800058e:	bf00      	nop

08000590 <__aeabi_dmul>:
 8000590:	b570      	push	{r4, r5, r6, lr}
 8000592:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000596:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800059a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800059e:	bf1d      	ittte	ne
 80005a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005a4:	ea94 0f0c 	teqne	r4, ip
 80005a8:	ea95 0f0c 	teqne	r5, ip
 80005ac:	f000 f8de 	bleq	800076c <__aeabi_dmul+0x1dc>
 80005b0:	442c      	add	r4, r5
 80005b2:	ea81 0603 	eor.w	r6, r1, r3
 80005b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005c2:	bf18      	it	ne
 80005c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005cc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80005d0:	d038      	beq.n	8000644 <__aeabi_dmul+0xb4>
 80005d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005de:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005e6:	f04f 0600 	mov.w	r6, #0
 80005ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ee:	f09c 0f00 	teq	ip, #0
 80005f2:	bf18      	it	ne
 80005f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005f8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005fc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000600:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000604:	d204      	bcs.n	8000610 <__aeabi_dmul+0x80>
 8000606:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800060a:	416d      	adcs	r5, r5
 800060c:	eb46 0606 	adc.w	r6, r6, r6
 8000610:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000614:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000618:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800061c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000620:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000624:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000628:	bf88      	it	hi
 800062a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800062e:	d81e      	bhi.n	800066e <__aeabi_dmul+0xde>
 8000630:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000634:	bf08      	it	eq
 8000636:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800063a:	f150 0000 	adcs.w	r0, r0, #0
 800063e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000642:	bd70      	pop	{r4, r5, r6, pc}
 8000644:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000648:	ea46 0101 	orr.w	r1, r6, r1
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	ea81 0103 	eor.w	r1, r1, r3
 8000654:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000658:	bfc2      	ittt	gt
 800065a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800065e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000662:	bd70      	popgt	{r4, r5, r6, pc}
 8000664:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000668:	f04f 0e00 	mov.w	lr, #0
 800066c:	3c01      	subs	r4, #1
 800066e:	f300 80ab 	bgt.w	80007c8 <__aeabi_dmul+0x238>
 8000672:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000676:	bfde      	ittt	le
 8000678:	2000      	movle	r0, #0
 800067a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800067e:	bd70      	pople	{r4, r5, r6, pc}
 8000680:	f1c4 0400 	rsb	r4, r4, #0
 8000684:	3c20      	subs	r4, #32
 8000686:	da35      	bge.n	80006f4 <__aeabi_dmul+0x164>
 8000688:	340c      	adds	r4, #12
 800068a:	dc1b      	bgt.n	80006c4 <__aeabi_dmul+0x134>
 800068c:	f104 0414 	add.w	r4, r4, #20
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f305 	lsl.w	r3, r0, r5
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f205 	lsl.w	r2, r1, r5
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80006a8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80006ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b0:	fa21 f604 	lsr.w	r6, r1, r4
 80006b4:	eb42 0106 	adc.w	r1, r2, r6
 80006b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006bc:	bf08      	it	eq
 80006be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006c2:	bd70      	pop	{r4, r5, r6, pc}
 80006c4:	f1c4 040c 	rsb	r4, r4, #12
 80006c8:	f1c4 0520 	rsb	r5, r4, #32
 80006cc:	fa00 f304 	lsl.w	r3, r0, r4
 80006d0:	fa20 f005 	lsr.w	r0, r0, r5
 80006d4:	fa01 f204 	lsl.w	r2, r1, r4
 80006d8:	ea40 0002 	orr.w	r0, r0, r2
 80006dc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006e4:	f141 0100 	adc.w	r1, r1, #0
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f1c4 0520 	rsb	r5, r4, #32
 80006f8:	fa00 f205 	lsl.w	r2, r0, r5
 80006fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000700:	fa20 f304 	lsr.w	r3, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea43 0302 	orr.w	r3, r3, r2
 800070c:	fa21 f004 	lsr.w	r0, r1, r4
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	fa21 f204 	lsr.w	r2, r1, r4
 8000718:	ea20 0002 	bic.w	r0, r0, r2
 800071c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f094 0f00 	teq	r4, #0
 8000730:	d10f      	bne.n	8000752 <__aeabi_dmul+0x1c2>
 8000732:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000736:	0040      	lsls	r0, r0, #1
 8000738:	eb41 0101 	adc.w	r1, r1, r1
 800073c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000740:	bf08      	it	eq
 8000742:	3c01      	subeq	r4, #1
 8000744:	d0f7      	beq.n	8000736 <__aeabi_dmul+0x1a6>
 8000746:	ea41 0106 	orr.w	r1, r1, r6
 800074a:	f095 0f00 	teq	r5, #0
 800074e:	bf18      	it	ne
 8000750:	4770      	bxne	lr
 8000752:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000756:	0052      	lsls	r2, r2, #1
 8000758:	eb43 0303 	adc.w	r3, r3, r3
 800075c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000760:	bf08      	it	eq
 8000762:	3d01      	subeq	r5, #1
 8000764:	d0f7      	beq.n	8000756 <__aeabi_dmul+0x1c6>
 8000766:	ea43 0306 	orr.w	r3, r3, r6
 800076a:	4770      	bx	lr
 800076c:	ea94 0f0c 	teq	r4, ip
 8000770:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000774:	bf18      	it	ne
 8000776:	ea95 0f0c 	teqne	r5, ip
 800077a:	d00c      	beq.n	8000796 <__aeabi_dmul+0x206>
 800077c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000786:	d1d1      	bne.n	800072c <__aeabi_dmul+0x19c>
 8000788:	ea81 0103 	eor.w	r1, r1, r3
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000790:	f04f 0000 	mov.w	r0, #0
 8000794:	bd70      	pop	{r4, r5, r6, pc}
 8000796:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800079a:	bf06      	itte	eq
 800079c:	4610      	moveq	r0, r2
 800079e:	4619      	moveq	r1, r3
 80007a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007a4:	d019      	beq.n	80007da <__aeabi_dmul+0x24a>
 80007a6:	ea94 0f0c 	teq	r4, ip
 80007aa:	d102      	bne.n	80007b2 <__aeabi_dmul+0x222>
 80007ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b0:	d113      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007b2:	ea95 0f0c 	teq	r5, ip
 80007b6:	d105      	bne.n	80007c4 <__aeabi_dmul+0x234>
 80007b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007bc:	bf1c      	itt	ne
 80007be:	4610      	movne	r0, r2
 80007c0:	4619      	movne	r1, r3
 80007c2:	d10a      	bne.n	80007da <__aeabi_dmul+0x24a>
 80007c4:	ea81 0103 	eor.w	r1, r1, r3
 80007c8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	bd70      	pop	{r4, r5, r6, pc}
 80007da:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80007de:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007e2:	bd70      	pop	{r4, r5, r6, pc}

080007e4 <__aeabi_ddiv>:
 80007e4:	b570      	push	{r4, r5, r6, lr}
 80007e6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007ea:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007f2:	bf1d      	ittte	ne
 80007f4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007f8:	ea94 0f0c 	teqne	r4, ip
 80007fc:	ea95 0f0c 	teqne	r5, ip
 8000800:	f000 f8a7 	bleq	8000952 <__aeabi_ddiv+0x16e>
 8000804:	eba4 0405 	sub.w	r4, r4, r5
 8000808:	ea81 0e03 	eor.w	lr, r1, r3
 800080c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000810:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000814:	f000 8088 	beq.w	8000928 <__aeabi_ddiv+0x144>
 8000818:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800081c:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000820:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000824:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000828:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800082c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000830:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000834:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000838:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 800083c:	429d      	cmp	r5, r3
 800083e:	bf08      	it	eq
 8000840:	4296      	cmpeq	r6, r2
 8000842:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000846:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800084a:	d202      	bcs.n	8000852 <__aeabi_ddiv+0x6e>
 800084c:	085b      	lsrs	r3, r3, #1
 800084e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000852:	1ab6      	subs	r6, r6, r2
 8000854:	eb65 0503 	sbc.w	r5, r5, r3
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000862:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000866:	ebb6 0e02 	subs.w	lr, r6, r2
 800086a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800086e:	bf22      	ittt	cs
 8000870:	1ab6      	subcs	r6, r6, r2
 8000872:	4675      	movcs	r5, lr
 8000874:	ea40 000c 	orrcs.w	r0, r0, ip
 8000878:	085b      	lsrs	r3, r3, #1
 800087a:	ea4f 0232 	mov.w	r2, r2, rrx
 800087e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000882:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000886:	bf22      	ittt	cs
 8000888:	1ab6      	subcs	r6, r6, r2
 800088a:	4675      	movcs	r5, lr
 800088c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000890:	085b      	lsrs	r3, r3, #1
 8000892:	ea4f 0232 	mov.w	r2, r2, rrx
 8000896:	ebb6 0e02 	subs.w	lr, r6, r2
 800089a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800089e:	bf22      	ittt	cs
 80008a0:	1ab6      	subcs	r6, r6, r2
 80008a2:	4675      	movcs	r5, lr
 80008a4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80008b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008b6:	bf22      	ittt	cs
 80008b8:	1ab6      	subcs	r6, r6, r2
 80008ba:	4675      	movcs	r5, lr
 80008bc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008c4:	d018      	beq.n	80008f8 <__aeabi_ddiv+0x114>
 80008c6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ca:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008ce:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008d2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008d6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008da:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008de:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008e2:	d1c0      	bne.n	8000866 <__aeabi_ddiv+0x82>
 80008e4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008e8:	d10b      	bne.n	8000902 <__aeabi_ddiv+0x11e>
 80008ea:	ea41 0100 	orr.w	r1, r1, r0
 80008ee:	f04f 0000 	mov.w	r0, #0
 80008f2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008f6:	e7b6      	b.n	8000866 <__aeabi_ddiv+0x82>
 80008f8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008fc:	bf04      	itt	eq
 80008fe:	4301      	orreq	r1, r0
 8000900:	2000      	moveq	r0, #0
 8000902:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000906:	bf88      	it	hi
 8000908:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800090c:	f63f aeaf 	bhi.w	800066e <__aeabi_dmul+0xde>
 8000910:	ebb5 0c03 	subs.w	ip, r5, r3
 8000914:	bf04      	itt	eq
 8000916:	ebb6 0c02 	subseq.w	ip, r6, r2
 800091a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800091e:	f150 0000 	adcs.w	r0, r0, #0
 8000922:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000926:	bd70      	pop	{r4, r5, r6, pc}
 8000928:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 800092c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000930:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000934:	bfc2      	ittt	gt
 8000936:	ebd4 050c 	rsbsgt	r5, r4, ip
 800093a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800093e:	bd70      	popgt	{r4, r5, r6, pc}
 8000940:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000944:	f04f 0e00 	mov.w	lr, #0
 8000948:	3c01      	subs	r4, #1
 800094a:	e690      	b.n	800066e <__aeabi_dmul+0xde>
 800094c:	ea45 0e06 	orr.w	lr, r5, r6
 8000950:	e68d      	b.n	800066e <__aeabi_dmul+0xde>
 8000952:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000956:	ea94 0f0c 	teq	r4, ip
 800095a:	bf08      	it	eq
 800095c:	ea95 0f0c 	teqeq	r5, ip
 8000960:	f43f af3b 	beq.w	80007da <__aeabi_dmul+0x24a>
 8000964:	ea94 0f0c 	teq	r4, ip
 8000968:	d10a      	bne.n	8000980 <__aeabi_ddiv+0x19c>
 800096a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800096e:	f47f af34 	bne.w	80007da <__aeabi_dmul+0x24a>
 8000972:	ea95 0f0c 	teq	r5, ip
 8000976:	f47f af25 	bne.w	80007c4 <__aeabi_dmul+0x234>
 800097a:	4610      	mov	r0, r2
 800097c:	4619      	mov	r1, r3
 800097e:	e72c      	b.n	80007da <__aeabi_dmul+0x24a>
 8000980:	ea95 0f0c 	teq	r5, ip
 8000984:	d106      	bne.n	8000994 <__aeabi_ddiv+0x1b0>
 8000986:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800098a:	f43f aefd 	beq.w	8000788 <__aeabi_dmul+0x1f8>
 800098e:	4610      	mov	r0, r2
 8000990:	4619      	mov	r1, r3
 8000992:	e722      	b.n	80007da <__aeabi_dmul+0x24a>
 8000994:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800099e:	f47f aec5 	bne.w	800072c <__aeabi_dmul+0x19c>
 80009a2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009a6:	f47f af0d 	bne.w	80007c4 <__aeabi_dmul+0x234>
 80009aa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009ae:	f47f aeeb 	bne.w	8000788 <__aeabi_dmul+0x1f8>
 80009b2:	e712      	b.n	80007da <__aeabi_dmul+0x24a>

080009b4 <__aeabi_d2iz>:
 80009b4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009b8:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 80009bc:	d215      	bcs.n	80009ea <__aeabi_d2iz+0x36>
 80009be:	d511      	bpl.n	80009e4 <__aeabi_d2iz+0x30>
 80009c0:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009c8:	d912      	bls.n	80009f0 <__aeabi_d2iz+0x3c>
 80009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009ce:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009d6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009da:	fa23 f002 	lsr.w	r0, r3, r2
 80009de:	bf18      	it	ne
 80009e0:	4240      	negne	r0, r0
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009ee:	d105      	bne.n	80009fc <__aeabi_d2iz+0x48>
 80009f0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 80009f4:	bf08      	it	eq
 80009f6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80009fa:	4770      	bx	lr
 80009fc:	f04f 0000 	mov.w	r0, #0
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_d2f>:
 8000a04:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a08:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a0c:	bf24      	itt	cs
 8000a0e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a12:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a16:	d90d      	bls.n	8000a34 <__aeabi_d2f+0x30>
 8000a18:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a1c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a20:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a24:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a28:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a2c:	bf08      	it	eq
 8000a2e:	f020 0001 	biceq.w	r0, r0, #1
 8000a32:	4770      	bx	lr
 8000a34:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a38:	d121      	bne.n	8000a7e <__aeabi_d2f+0x7a>
 8000a3a:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a3e:	bfbc      	itt	lt
 8000a40:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a44:	4770      	bxlt	lr
 8000a46:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a4e:	f1c2 0218 	rsb	r2, r2, #24
 8000a52:	f1c2 0c20 	rsb	ip, r2, #32
 8000a56:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a5a:	fa20 f002 	lsr.w	r0, r0, r2
 8000a5e:	bf18      	it	ne
 8000a60:	f040 0001 	orrne.w	r0, r0, #1
 8000a64:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a68:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a6c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a70:	ea40 000c 	orr.w	r0, r0, ip
 8000a74:	fa23 f302 	lsr.w	r3, r3, r2
 8000a78:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a7c:	e7cc      	b.n	8000a18 <__aeabi_d2f+0x14>
 8000a7e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a82:	d107      	bne.n	8000a94 <__aeabi_d2f+0x90>
 8000a84:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a88:	bf1e      	ittt	ne
 8000a8a:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000a8e:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000a92:	4770      	bxne	lr
 8000a94:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000a98:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000a9c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000aa0:	4770      	bx	lr
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_uldivmod>:
 8000aa4:	b953      	cbnz	r3, 8000abc <__aeabi_uldivmod+0x18>
 8000aa6:	b94a      	cbnz	r2, 8000abc <__aeabi_uldivmod+0x18>
 8000aa8:	2900      	cmp	r1, #0
 8000aaa:	bf08      	it	eq
 8000aac:	2800      	cmpeq	r0, #0
 8000aae:	bf1c      	itt	ne
 8000ab0:	f04f 31ff 	movne.w	r1, #4294967295
 8000ab4:	f04f 30ff 	movne.w	r0, #4294967295
 8000ab8:	f000 b96a 	b.w	8000d90 <__aeabi_idiv0>
 8000abc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ac4:	f000 f806 	bl	8000ad4 <__udivmoddi4>
 8000ac8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000acc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad0:	b004      	add	sp, #16
 8000ad2:	4770      	bx	lr

08000ad4 <__udivmoddi4>:
 8000ad4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ad8:	9d08      	ldr	r5, [sp, #32]
 8000ada:	460c      	mov	r4, r1
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d14e      	bne.n	8000b7e <__udivmoddi4+0xaa>
 8000ae0:	4694      	mov	ip, r2
 8000ae2:	458c      	cmp	ip, r1
 8000ae4:	4686      	mov	lr, r0
 8000ae6:	fab2 f282 	clz	r2, r2
 8000aea:	d962      	bls.n	8000bb2 <__udivmoddi4+0xde>
 8000aec:	b14a      	cbz	r2, 8000b02 <__udivmoddi4+0x2e>
 8000aee:	f1c2 0320 	rsb	r3, r2, #32
 8000af2:	4091      	lsls	r1, r2
 8000af4:	fa20 f303 	lsr.w	r3, r0, r3
 8000af8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000afc:	4319      	orrs	r1, r3
 8000afe:	fa00 fe02 	lsl.w	lr, r0, r2
 8000b02:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b06:	fa1f f68c 	uxth.w	r6, ip
 8000b0a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000b0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000b12:	fb07 1114 	mls	r1, r7, r4, r1
 8000b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b1a:	fb04 f106 	mul.w	r1, r4, r6
 8000b1e:	4299      	cmp	r1, r3
 8000b20:	d90a      	bls.n	8000b38 <__udivmoddi4+0x64>
 8000b22:	eb1c 0303 	adds.w	r3, ip, r3
 8000b26:	f104 30ff 	add.w	r0, r4, #4294967295
 8000b2a:	f080 8112 	bcs.w	8000d52 <__udivmoddi4+0x27e>
 8000b2e:	4299      	cmp	r1, r3
 8000b30:	f240 810f 	bls.w	8000d52 <__udivmoddi4+0x27e>
 8000b34:	3c02      	subs	r4, #2
 8000b36:	4463      	add	r3, ip
 8000b38:	1a59      	subs	r1, r3, r1
 8000b3a:	fa1f f38e 	uxth.w	r3, lr
 8000b3e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b42:	fb07 1110 	mls	r1, r7, r0, r1
 8000b46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b4a:	fb00 f606 	mul.w	r6, r0, r6
 8000b4e:	429e      	cmp	r6, r3
 8000b50:	d90a      	bls.n	8000b68 <__udivmoddi4+0x94>
 8000b52:	eb1c 0303 	adds.w	r3, ip, r3
 8000b56:	f100 31ff 	add.w	r1, r0, #4294967295
 8000b5a:	f080 80fc 	bcs.w	8000d56 <__udivmoddi4+0x282>
 8000b5e:	429e      	cmp	r6, r3
 8000b60:	f240 80f9 	bls.w	8000d56 <__udivmoddi4+0x282>
 8000b64:	4463      	add	r3, ip
 8000b66:	3802      	subs	r0, #2
 8000b68:	1b9b      	subs	r3, r3, r6
 8000b6a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000b6e:	2100      	movs	r1, #0
 8000b70:	b11d      	cbz	r5, 8000b7a <__udivmoddi4+0xa6>
 8000b72:	40d3      	lsrs	r3, r2
 8000b74:	2200      	movs	r2, #0
 8000b76:	e9c5 3200 	strd	r3, r2, [r5]
 8000b7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b7e:	428b      	cmp	r3, r1
 8000b80:	d905      	bls.n	8000b8e <__udivmoddi4+0xba>
 8000b82:	b10d      	cbz	r5, 8000b88 <__udivmoddi4+0xb4>
 8000b84:	e9c5 0100 	strd	r0, r1, [r5]
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4608      	mov	r0, r1
 8000b8c:	e7f5      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000b8e:	fab3 f183 	clz	r1, r3
 8000b92:	2900      	cmp	r1, #0
 8000b94:	d146      	bne.n	8000c24 <__udivmoddi4+0x150>
 8000b96:	42a3      	cmp	r3, r4
 8000b98:	d302      	bcc.n	8000ba0 <__udivmoddi4+0xcc>
 8000b9a:	4290      	cmp	r0, r2
 8000b9c:	f0c0 80f0 	bcc.w	8000d80 <__udivmoddi4+0x2ac>
 8000ba0:	1a86      	subs	r6, r0, r2
 8000ba2:	eb64 0303 	sbc.w	r3, r4, r3
 8000ba6:	2001      	movs	r0, #1
 8000ba8:	2d00      	cmp	r5, #0
 8000baa:	d0e6      	beq.n	8000b7a <__udivmoddi4+0xa6>
 8000bac:	e9c5 6300 	strd	r6, r3, [r5]
 8000bb0:	e7e3      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000bb2:	2a00      	cmp	r2, #0
 8000bb4:	f040 8090 	bne.w	8000cd8 <__udivmoddi4+0x204>
 8000bb8:	eba1 040c 	sub.w	r4, r1, ip
 8000bbc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bc0:	fa1f f78c 	uxth.w	r7, ip
 8000bc4:	2101      	movs	r1, #1
 8000bc6:	fbb4 f6f8 	udiv	r6, r4, r8
 8000bca:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000bce:	fb08 4416 	mls	r4, r8, r6, r4
 8000bd2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000bd6:	fb07 f006 	mul.w	r0, r7, r6
 8000bda:	4298      	cmp	r0, r3
 8000bdc:	d908      	bls.n	8000bf0 <__udivmoddi4+0x11c>
 8000bde:	eb1c 0303 	adds.w	r3, ip, r3
 8000be2:	f106 34ff 	add.w	r4, r6, #4294967295
 8000be6:	d202      	bcs.n	8000bee <__udivmoddi4+0x11a>
 8000be8:	4298      	cmp	r0, r3
 8000bea:	f200 80cd 	bhi.w	8000d88 <__udivmoddi4+0x2b4>
 8000bee:	4626      	mov	r6, r4
 8000bf0:	1a1c      	subs	r4, r3, r0
 8000bf2:	fa1f f38e 	uxth.w	r3, lr
 8000bf6:	fbb4 f0f8 	udiv	r0, r4, r8
 8000bfa:	fb08 4410 	mls	r4, r8, r0, r4
 8000bfe:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000c02:	fb00 f707 	mul.w	r7, r0, r7
 8000c06:	429f      	cmp	r7, r3
 8000c08:	d908      	bls.n	8000c1c <__udivmoddi4+0x148>
 8000c0a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c0e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c12:	d202      	bcs.n	8000c1a <__udivmoddi4+0x146>
 8000c14:	429f      	cmp	r7, r3
 8000c16:	f200 80b0 	bhi.w	8000d7a <__udivmoddi4+0x2a6>
 8000c1a:	4620      	mov	r0, r4
 8000c1c:	1bdb      	subs	r3, r3, r7
 8000c1e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c22:	e7a5      	b.n	8000b70 <__udivmoddi4+0x9c>
 8000c24:	f1c1 0620 	rsb	r6, r1, #32
 8000c28:	408b      	lsls	r3, r1
 8000c2a:	fa22 f706 	lsr.w	r7, r2, r6
 8000c2e:	431f      	orrs	r7, r3
 8000c30:	fa20 fc06 	lsr.w	ip, r0, r6
 8000c34:	fa04 f301 	lsl.w	r3, r4, r1
 8000c38:	ea43 030c 	orr.w	r3, r3, ip
 8000c3c:	40f4      	lsrs	r4, r6
 8000c3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000c42:	0c38      	lsrs	r0, r7, #16
 8000c44:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000c48:	fbb4 fef0 	udiv	lr, r4, r0
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fb00 441e 	mls	r4, r0, lr, r4
 8000c54:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c58:	fb0e f90c 	mul.w	r9, lr, ip
 8000c5c:	45a1      	cmp	r9, r4
 8000c5e:	fa02 f201 	lsl.w	r2, r2, r1
 8000c62:	d90a      	bls.n	8000c7a <__udivmoddi4+0x1a6>
 8000c64:	193c      	adds	r4, r7, r4
 8000c66:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000c6a:	f080 8084 	bcs.w	8000d76 <__udivmoddi4+0x2a2>
 8000c6e:	45a1      	cmp	r9, r4
 8000c70:	f240 8081 	bls.w	8000d76 <__udivmoddi4+0x2a2>
 8000c74:	f1ae 0e02 	sub.w	lr, lr, #2
 8000c78:	443c      	add	r4, r7
 8000c7a:	eba4 0409 	sub.w	r4, r4, r9
 8000c7e:	fa1f f983 	uxth.w	r9, r3
 8000c82:	fbb4 f3f0 	udiv	r3, r4, r0
 8000c86:	fb00 4413 	mls	r4, r0, r3, r4
 8000c8a:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000c8e:	fb03 fc0c 	mul.w	ip, r3, ip
 8000c92:	45a4      	cmp	ip, r4
 8000c94:	d907      	bls.n	8000ca6 <__udivmoddi4+0x1d2>
 8000c96:	193c      	adds	r4, r7, r4
 8000c98:	f103 30ff 	add.w	r0, r3, #4294967295
 8000c9c:	d267      	bcs.n	8000d6e <__udivmoddi4+0x29a>
 8000c9e:	45a4      	cmp	ip, r4
 8000ca0:	d965      	bls.n	8000d6e <__udivmoddi4+0x29a>
 8000ca2:	3b02      	subs	r3, #2
 8000ca4:	443c      	add	r4, r7
 8000ca6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000caa:	fba0 9302 	umull	r9, r3, r0, r2
 8000cae:	eba4 040c 	sub.w	r4, r4, ip
 8000cb2:	429c      	cmp	r4, r3
 8000cb4:	46ce      	mov	lr, r9
 8000cb6:	469c      	mov	ip, r3
 8000cb8:	d351      	bcc.n	8000d5e <__udivmoddi4+0x28a>
 8000cba:	d04e      	beq.n	8000d5a <__udivmoddi4+0x286>
 8000cbc:	b155      	cbz	r5, 8000cd4 <__udivmoddi4+0x200>
 8000cbe:	ebb8 030e 	subs.w	r3, r8, lr
 8000cc2:	eb64 040c 	sbc.w	r4, r4, ip
 8000cc6:	fa04 f606 	lsl.w	r6, r4, r6
 8000cca:	40cb      	lsrs	r3, r1
 8000ccc:	431e      	orrs	r6, r3
 8000cce:	40cc      	lsrs	r4, r1
 8000cd0:	e9c5 6400 	strd	r6, r4, [r5]
 8000cd4:	2100      	movs	r1, #0
 8000cd6:	e750      	b.n	8000b7a <__udivmoddi4+0xa6>
 8000cd8:	f1c2 0320 	rsb	r3, r2, #32
 8000cdc:	fa20 f103 	lsr.w	r1, r0, r3
 8000ce0:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce4:	fa24 f303 	lsr.w	r3, r4, r3
 8000ce8:	4094      	lsls	r4, r2
 8000cea:	430c      	orrs	r4, r1
 8000cec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cf0:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cf4:	fa1f f78c 	uxth.w	r7, ip
 8000cf8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cfc:	fb08 3110 	mls	r1, r8, r0, r3
 8000d00:	0c23      	lsrs	r3, r4, #16
 8000d02:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d06:	fb00 f107 	mul.w	r1, r0, r7
 8000d0a:	4299      	cmp	r1, r3
 8000d0c:	d908      	bls.n	8000d20 <__udivmoddi4+0x24c>
 8000d0e:	eb1c 0303 	adds.w	r3, ip, r3
 8000d12:	f100 36ff 	add.w	r6, r0, #4294967295
 8000d16:	d22c      	bcs.n	8000d72 <__udivmoddi4+0x29e>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	d92a      	bls.n	8000d72 <__udivmoddi4+0x29e>
 8000d1c:	3802      	subs	r0, #2
 8000d1e:	4463      	add	r3, ip
 8000d20:	1a5b      	subs	r3, r3, r1
 8000d22:	b2a4      	uxth	r4, r4
 8000d24:	fbb3 f1f8 	udiv	r1, r3, r8
 8000d28:	fb08 3311 	mls	r3, r8, r1, r3
 8000d2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d30:	fb01 f307 	mul.w	r3, r1, r7
 8000d34:	42a3      	cmp	r3, r4
 8000d36:	d908      	bls.n	8000d4a <__udivmoddi4+0x276>
 8000d38:	eb1c 0404 	adds.w	r4, ip, r4
 8000d3c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000d40:	d213      	bcs.n	8000d6a <__udivmoddi4+0x296>
 8000d42:	42a3      	cmp	r3, r4
 8000d44:	d911      	bls.n	8000d6a <__udivmoddi4+0x296>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4464      	add	r4, ip
 8000d4a:	1ae4      	subs	r4, r4, r3
 8000d4c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000d50:	e739      	b.n	8000bc6 <__udivmoddi4+0xf2>
 8000d52:	4604      	mov	r4, r0
 8000d54:	e6f0      	b.n	8000b38 <__udivmoddi4+0x64>
 8000d56:	4608      	mov	r0, r1
 8000d58:	e706      	b.n	8000b68 <__udivmoddi4+0x94>
 8000d5a:	45c8      	cmp	r8, r9
 8000d5c:	d2ae      	bcs.n	8000cbc <__udivmoddi4+0x1e8>
 8000d5e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000d62:	eb63 0c07 	sbc.w	ip, r3, r7
 8000d66:	3801      	subs	r0, #1
 8000d68:	e7a8      	b.n	8000cbc <__udivmoddi4+0x1e8>
 8000d6a:	4631      	mov	r1, r6
 8000d6c:	e7ed      	b.n	8000d4a <__udivmoddi4+0x276>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	e799      	b.n	8000ca6 <__udivmoddi4+0x1d2>
 8000d72:	4630      	mov	r0, r6
 8000d74:	e7d4      	b.n	8000d20 <__udivmoddi4+0x24c>
 8000d76:	46d6      	mov	lr, sl
 8000d78:	e77f      	b.n	8000c7a <__udivmoddi4+0x1a6>
 8000d7a:	4463      	add	r3, ip
 8000d7c:	3802      	subs	r0, #2
 8000d7e:	e74d      	b.n	8000c1c <__udivmoddi4+0x148>
 8000d80:	4606      	mov	r6, r0
 8000d82:	4623      	mov	r3, r4
 8000d84:	4608      	mov	r0, r1
 8000d86:	e70f      	b.n	8000ba8 <__udivmoddi4+0xd4>
 8000d88:	3e02      	subs	r6, #2
 8000d8a:	4463      	add	r3, ip
 8000d8c:	e730      	b.n	8000bf0 <__udivmoddi4+0x11c>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_idiv0>:
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	0000      	movs	r0, r0
	...

08000d98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d9c:	f001 fc4d 	bl	800263a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000da0:	f000 f932 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000da4:	f000 fc96 	bl	80016d4 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000da8:	f000 fa68 	bl	800127c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 8000dac:	f000 f978 	bl	80010a0 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000db0:	f000 faae 	bl	8001310 <MX_TIM1_Init>
  MX_TIM5_Init();
 8000db4:	f000 fc40 	bl	8001638 <MX_TIM5_Init>
  MX_TIM3_Init();
 8000db8:	f000 fbe8 	bl	800158c <MX_TIM3_Init>
  MX_TIM2_Init();
 8000dbc:	f000 fb64 	bl	8001488 <MX_TIM2_Init>
  MX_ADC2_Init();
 8000dc0:	f000 f9e6 	bl	8001190 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 8000dc4:	217f      	movs	r1, #127	@ 0x7f
 8000dc6:	4876      	ldr	r0, [pc, #472]	@ (8000fa0 <main+0x208>)
 8000dc8:	f003 fd50 	bl	800486c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_IT(&hadc1);
 8000dcc:	4874      	ldr	r0, [pc, #464]	@ (8000fa0 <main+0x208>)
 8000dce:	f002 fb2f 	bl	8003430 <HAL_ADC_Start_IT>

  HAL_TIM_Encoder_Start(&htim3,TIM_CHANNEL_ALL);
 8000dd2:	213c      	movs	r1, #60	@ 0x3c
 8000dd4:	4873      	ldr	r0, [pc, #460]	@ (8000fa4 <main+0x20c>)
 8000dd6:	f005 fd4b 	bl	8006870 <HAL_TIM_Encoder_Start>
  HAL_TIM_Base_Start(&htim1);
 8000dda:	4873      	ldr	r0, [pc, #460]	@ (8000fa8 <main+0x210>)
 8000ddc:	f005 fa46 	bl	800626c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim2);
 8000de0:	4872      	ldr	r0, [pc, #456]	@ (8000fac <main+0x214>)
 8000de2:	f005 fa43 	bl	800626c <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim5);
 8000de6:	4872      	ldr	r0, [pc, #456]	@ (8000fb0 <main+0x218>)
 8000de8:	f005 fab0 	bl	800634c <HAL_TIM_Base_Start_IT>



  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000dec:	2100      	movs	r1, #0
 8000dee:	486e      	ldr	r0, [pc, #440]	@ (8000fa8 <main+0x210>)
 8000df0:	f005 fb86 	bl	8006500 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000df4:	2104      	movs	r1, #4
 8000df6:	486c      	ldr	r0, [pc, #432]	@ (8000fa8 <main+0x210>)
 8000df8:	f005 fb82 	bl	8006500 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000dfc:	2100      	movs	r1, #0
 8000dfe:	486b      	ldr	r0, [pc, #428]	@ (8000fac <main+0x214>)
 8000e00:	f005 fb7e 	bl	8006500 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000e04:	2104      	movs	r1, #4
 8000e06:	4869      	ldr	r0, [pc, #420]	@ (8000fac <main+0x214>)
 8000e08:	f005 fb7a 	bl	8006500 <HAL_TIM_PWM_Start>
  PID.Kp = 0.002;
 8000e0c:	4b69      	ldr	r3, [pc, #420]	@ (8000fb4 <main+0x21c>)
 8000e0e:	4a6a      	ldr	r2, [pc, #424]	@ (8000fb8 <main+0x220>)
 8000e10:	619a      	str	r2, [r3, #24]
  PID.Ki = 0;
 8000e12:	4b68      	ldr	r3, [pc, #416]	@ (8000fb4 <main+0x21c>)
 8000e14:	f04f 0200 	mov.w	r2, #0
 8000e18:	61da      	str	r2, [r3, #28]
  PID.Kd = 0.0012;
 8000e1a:	4b66      	ldr	r3, [pc, #408]	@ (8000fb4 <main+0x21c>)
 8000e1c:	4a67      	ldr	r2, [pc, #412]	@ (8000fbc <main+0x224>)
 8000e1e:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID, 0);
 8000e20:	2100      	movs	r1, #0
 8000e22:	4864      	ldr	r0, [pc, #400]	@ (8000fb4 <main+0x21c>)
 8000e24:	f007 fe60 	bl	8008ae8 <arm_pid_init_f32>



  PID_QEI.Kp = 0.1;
 8000e28:	4b65      	ldr	r3, [pc, #404]	@ (8000fc0 <main+0x228>)
 8000e2a:	4a66      	ldr	r2, [pc, #408]	@ (8000fc4 <main+0x22c>)
 8000e2c:	619a      	str	r2, [r3, #24]
  PID_QEI.Ki = 0;
 8000e2e:	4b64      	ldr	r3, [pc, #400]	@ (8000fc0 <main+0x228>)
 8000e30:	f04f 0200 	mov.w	r2, #0
 8000e34:	61da      	str	r2, [r3, #28]
  PID_QEI.Kd = 0.92425;
 8000e36:	4b62      	ldr	r3, [pc, #392]	@ (8000fc0 <main+0x228>)
 8000e38:	4a63      	ldr	r2, [pc, #396]	@ (8000fc8 <main+0x230>)
 8000e3a:	621a      	str	r2, [r3, #32]
  arm_pid_init_f32(&PID_QEI, 0);
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	4860      	ldr	r0, [pc, #384]	@ (8000fc0 <main+0x228>)
 8000e40:	f007 fe52 	bl	8008ae8 <arm_pid_init_f32>
  void EX3();
  void Rmotor();
  void Lmotor();
  void Stopmotor();

  HAL_ADCEx_Calibration_Start(&hadc2, ADC_SINGLE_ENDED);
 8000e44:	217f      	movs	r1, #127	@ 0x7f
 8000e46:	4861      	ldr	r0, [pc, #388]	@ (8000fcc <main+0x234>)
 8000e48:	f003 fd10 	bl	800486c <HAL_ADCEx_Calibration_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADC_Read_blocking();
 8000e4c:	f000 fcb0 	bl	80017b0 <ADC_Read_blocking>
	  avg();
 8000e50:	f001 f8a2 	bl	8001f98 <avg>

	  QEIReadRaw = __HAL_TIM_GET_COUNTER(&htim3);
 8000e54:	4b53      	ldr	r3, [pc, #332]	@ (8000fa4 <main+0x20c>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e5a:	4a5d      	ldr	r2, [pc, #372]	@ (8000fd0 <main+0x238>)
 8000e5c:	6013      	str	r3, [r2, #0]
	  QEIangle = (QEIReadRaw / 3072.0) * 360.0;
 8000e5e:	4b5c      	ldr	r3, [pc, #368]	@ (8000fd0 <main+0x238>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	4618      	mov	r0, r3
 8000e64:	f7ff fb1a 	bl	800049c <__aeabi_ui2d>
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	4b59      	ldr	r3, [pc, #356]	@ (8000fd4 <main+0x23c>)
 8000e6e:	f7ff fcb9 	bl	80007e4 <__aeabi_ddiv>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	4610      	mov	r0, r2
 8000e78:	4619      	mov	r1, r3
 8000e7a:	f04f 0200 	mov.w	r2, #0
 8000e7e:	4b56      	ldr	r3, [pc, #344]	@ (8000fd8 <main+0x240>)
 8000e80:	f7ff fb86 	bl	8000590 <__aeabi_dmul>
 8000e84:	4602      	mov	r2, r0
 8000e86:	460b      	mov	r3, r1
 8000e88:	4610      	mov	r0, r2
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	f7ff fd92 	bl	80009b4 <__aeabi_d2iz>
 8000e90:	4603      	mov	r3, r0
 8000e92:	4a52      	ldr	r2, [pc, #328]	@ (8000fdc <main+0x244>)
 8000e94:	6013      	str	r3, [r2, #0]

	  Setangle = (ADC[1].data / 4095.0) * 360.0;
 8000e96:	4b52      	ldr	r3, [pc, #328]	@ (8000fe0 <main+0x248>)
 8000e98:	f8b3 3044 	ldrh.w	r3, [r3, #68]	@ 0x44
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f7ff fb0d 	bl	80004bc <__aeabi_i2d>
 8000ea2:	a33b      	add	r3, pc, #236	@ (adr r3, 8000f90 <main+0x1f8>)
 8000ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ea8:	f7ff fc9c 	bl	80007e4 <__aeabi_ddiv>
 8000eac:	4602      	mov	r2, r0
 8000eae:	460b      	mov	r3, r1
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	f04f 0200 	mov.w	r2, #0
 8000eb8:	4b47      	ldr	r3, [pc, #284]	@ (8000fd8 <main+0x240>)
 8000eba:	f7ff fb69 	bl	8000590 <__aeabi_dmul>
 8000ebe:	4602      	mov	r2, r0
 8000ec0:	460b      	mov	r3, r1
 8000ec2:	4610      	mov	r0, r2
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f7ff fd75 	bl	80009b4 <__aeabi_d2iz>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4a45      	ldr	r2, [pc, #276]	@ (8000fe4 <main+0x24c>)
 8000ece:	6013      	str	r3, [r2, #0]
	  setNEWspd = ((Vfeedback / 360.0)*(500.0));
 8000ed0:	4b45      	ldr	r3, [pc, #276]	@ (8000fe8 <main+0x250>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff fb03 	bl	80004e0 <__aeabi_f2d>
 8000eda:	f04f 0200 	mov.w	r2, #0
 8000ede:	4b3e      	ldr	r3, [pc, #248]	@ (8000fd8 <main+0x240>)
 8000ee0:	f7ff fc80 	bl	80007e4 <__aeabi_ddiv>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	460b      	mov	r3, r1
 8000ee8:	4610      	mov	r0, r2
 8000eea:	4619      	mov	r1, r3
 8000eec:	f04f 0200 	mov.w	r2, #0
 8000ef0:	4b3e      	ldr	r3, [pc, #248]	@ (8000fec <main+0x254>)
 8000ef2:	f7ff fb4d 	bl	8000590 <__aeabi_dmul>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	460b      	mov	r3, r1
 8000efa:	4610      	mov	r0, r2
 8000efc:	4619      	mov	r1, r3
 8000efe:	f7ff fd81 	bl	8000a04 <__aeabi_d2f>
 8000f02:	4603      	mov	r3, r0
 8000f04:	4a3a      	ldr	r2, [pc, #232]	@ (8000ff0 <main+0x258>)
 8000f06:	6013      	str	r3, [r2, #0]


//	  spd=(Vfeedback_QEI*20.0)+200.0;
	  spd=((Vfeedback_QEI/3600.0)*200.0);
 8000f08:	4b3a      	ldr	r3, [pc, #232]	@ (8000ff4 <main+0x25c>)
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff fae7 	bl	80004e0 <__aeabi_f2d>
 8000f12:	a321      	add	r3, pc, #132	@ (adr r3, 8000f98 <main+0x200>)
 8000f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f18:	f7ff fc64 	bl	80007e4 <__aeabi_ddiv>
 8000f1c:	4602      	mov	r2, r0
 8000f1e:	460b      	mov	r3, r1
 8000f20:	4610      	mov	r0, r2
 8000f22:	4619      	mov	r1, r3
 8000f24:	f04f 0200 	mov.w	r2, #0
 8000f28:	4b33      	ldr	r3, [pc, #204]	@ (8000ff8 <main+0x260>)
 8000f2a:	f7ff fb31 	bl	8000590 <__aeabi_dmul>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	f7ff fd3d 	bl	80009b4 <__aeabi_d2iz>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	4a2f      	ldr	r2, [pc, #188]	@ (8000ffc <main+0x264>)
 8000f3e:	6013      	str	r3, [r2, #0]
	  setPoint = Setangle;
 8000f40:	4b28      	ldr	r3, [pc, #160]	@ (8000fe4 <main+0x24c>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	ee07 3a90 	vmov	s15, r3
 8000f48:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001000 <main+0x268>)
 8000f4e:	edc3 7a00 	vstr	s15, [r3]


	  if (mode==1)
 8000f52:	4b2c      	ldr	r3, [pc, #176]	@ (8001004 <main+0x26c>)
 8000f54:	881b      	ldrh	r3, [r3, #0]
 8000f56:	2b01      	cmp	r3, #1
 8000f58:	d106      	bne.n	8000f68 <main+0x1d0>
	       {
	          EX1_PID();
 8000f5a:	f000 fe07 	bl	8001b6c <EX1_PID>

	          QEI_Stopmotor();
 8000f5e:	f000 fde1 	bl	8001b24 <QEI_Stopmotor>
	          led1();
 8000f62:	f000 fff5 	bl	8001f50 <led1>
 8000f66:	e771      	b.n	8000e4c <main+0xb4>
	       }

	     else if (mode==2)
 8000f68:	4b26      	ldr	r3, [pc, #152]	@ (8001004 <main+0x26c>)
 8000f6a:	881b      	ldrh	r3, [r3, #0]
 8000f6c:	2b02      	cmp	r3, #2
 8000f6e:	d106      	bne.n	8000f7e <main+0x1e6>
	       {
	          EX2_PID();
 8000f70:	f000 fe8a 	bl	8001c88 <EX2_PID>
	    	 Stopmotor();
 8000f74:	f000 fde8 	bl	8001b48 <Stopmotor>
	          led2();
 8000f78:	f000 fff4 	bl	8001f64 <led2>
 8000f7c:	e766      	b.n	8000e4c <main+0xb4>
	       }

	     else
	     {
	    	 EX3();
 8000f7e:	f000 fef3 	bl	8001d68 <EX3>
	        Stopmotor();
 8000f82:	f000 fde1 	bl	8001b48 <Stopmotor>
	        QEI_Stopmotor();
 8000f86:	f000 fdcd 	bl	8001b24 <QEI_Stopmotor>
	        led3();
 8000f8a:	f000 fff5 	bl	8001f78 <led3>
	  ADC_Read_blocking();
 8000f8e:	e75d      	b.n	8000e4c <main+0xb4>
 8000f90:	00000000 	.word	0x00000000
 8000f94:	40affe00 	.word	0x40affe00
 8000f98:	00000000 	.word	0x00000000
 8000f9c:	40ac2000 	.word	0x40ac2000
 8000fa0:	200000bc 	.word	0x200000bc
 8000fa4:	200002c0 	.word	0x200002c0
 8000fa8:	20000228 	.word	0x20000228
 8000fac:	20000274 	.word	0x20000274
 8000fb0:	2000030c 	.word	0x2000030c
 8000fb4:	2000035c 	.word	0x2000035c
 8000fb8:	3b03126f 	.word	0x3b03126f
 8000fbc:	3a9d4952 	.word	0x3a9d4952
 8000fc0:	20000380 	.word	0x20000380
 8000fc4:	3dcccccd 	.word	0x3dcccccd
 8000fc8:	3f6c9ba6 	.word	0x3f6c9ba6
 8000fcc:	20000128 	.word	0x20000128
 8000fd0:	200003c8 	.word	0x200003c8
 8000fd4:	40a80000 	.word	0x40a80000
 8000fd8:	40768000 	.word	0x40768000
 8000fdc:	200003b8 	.word	0x200003b8
 8000fe0:	2000004c 	.word	0x2000004c
 8000fe4:	200003bc 	.word	0x200003bc
 8000fe8:	200003a4 	.word	0x200003a4
 8000fec:	407f4000 	.word	0x407f4000
 8000ff0:	200003c0 	.word	0x200003c0
 8000ff4:	200003a8 	.word	0x200003a8
 8000ff8:	40690000 	.word	0x40690000
 8000ffc:	200003cc 	.word	0x200003cc
 8001000:	200003c4 	.word	0x200003c4
 8001004:	20000000 	.word	0x20000000

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b094      	sub	sp, #80	@ 0x50
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 0318 	add.w	r3, r7, #24
 8001012:	2238      	movs	r2, #56	@ 0x38
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f007 fd9c 	bl	8008b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	1d3b      	adds	r3, r7, #4
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 800102a:	2000      	movs	r0, #0
 800102c:	f004 f896 	bl	800515c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001030:	2302      	movs	r3, #2
 8001032:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001034:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800103a:	2340      	movs	r3, #64	@ 0x40
 800103c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800103e:	2302      	movs	r3, #2
 8001040:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001042:	2302      	movs	r3, #2
 8001044:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001046:	2304      	movs	r3, #4
 8001048:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800104a:	2355      	movs	r3, #85	@ 0x55
 800104c:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800104e:	2302      	movs	r3, #2
 8001050:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001052:	2302      	movs	r3, #2
 8001054:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001056:	2302      	movs	r3, #2
 8001058:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800105a:	f107 0318 	add.w	r3, r7, #24
 800105e:	4618      	mov	r0, r3
 8001060:	f004 f930 	bl	80052c4 <HAL_RCC_OscConfig>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800106a:	f001 f81f 	bl	80020ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800106e:	230f      	movs	r3, #15
 8001070:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001072:	2303      	movs	r3, #3
 8001074:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001076:	2300      	movs	r3, #0
 8001078:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	2104      	movs	r1, #4
 8001086:	4618      	mov	r0, r3
 8001088:	f004 fc2e 	bl	80058e8 <HAL_RCC_ClockConfig>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001092:	f001 f80b 	bl	80020ac <Error_Handler>
  }
}
 8001096:	bf00      	nop
 8001098:	3750      	adds	r7, #80	@ 0x50
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
	...

080010a0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b08c      	sub	sp, #48	@ 0x30
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80010a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010aa:	2200      	movs	r2, #0
 80010ac:	601a      	str	r2, [r3, #0]
 80010ae:	605a      	str	r2, [r3, #4]
 80010b0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80010b2:	1d3b      	adds	r3, r7, #4
 80010b4:	2220      	movs	r2, #32
 80010b6:	2100      	movs	r1, #0
 80010b8:	4618      	mov	r0, r3
 80010ba:	f007 fd4b 	bl	8008b54 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80010be:	4b32      	ldr	r3, [pc, #200]	@ (8001188 <MX_ADC1_Init+0xe8>)
 80010c0:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80010c4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010c6:	4b30      	ldr	r3, [pc, #192]	@ (8001188 <MX_ADC1_Init+0xe8>)
 80010c8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80010cc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80010ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001188 <MX_ADC1_Init+0xe8>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010d4:	4b2c      	ldr	r3, [pc, #176]	@ (8001188 <MX_ADC1_Init+0xe8>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80010da:	4b2b      	ldr	r3, [pc, #172]	@ (8001188 <MX_ADC1_Init+0xe8>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010e0:	4b29      	ldr	r3, [pc, #164]	@ (8001188 <MX_ADC1_Init+0xe8>)
 80010e2:	2201      	movs	r2, #1
 80010e4:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e6:	4b28      	ldr	r3, [pc, #160]	@ (8001188 <MX_ADC1_Init+0xe8>)
 80010e8:	2204      	movs	r2, #4
 80010ea:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80010ec:	4b26      	ldr	r3, [pc, #152]	@ (8001188 <MX_ADC1_Init+0xe8>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80010f2:	4b25      	ldr	r3, [pc, #148]	@ (8001188 <MX_ADC1_Init+0xe8>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 80010f8:	4b23      	ldr	r3, [pc, #140]	@ (8001188 <MX_ADC1_Init+0xe8>)
 80010fa:	2202      	movs	r2, #2
 80010fc:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80010fe:	4b22      	ldr	r3, [pc, #136]	@ (8001188 <MX_ADC1_Init+0xe8>)
 8001100:	2200      	movs	r2, #0
 8001102:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001106:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <MX_ADC1_Init+0xe8>)
 8001108:	2200      	movs	r2, #0
 800110a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800110c:	4b1e      	ldr	r3, [pc, #120]	@ (8001188 <MX_ADC1_Init+0xe8>)
 800110e:	2200      	movs	r2, #0
 8001110:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001112:	4b1d      	ldr	r3, [pc, #116]	@ (8001188 <MX_ADC1_Init+0xe8>)
 8001114:	2200      	movs	r2, #0
 8001116:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800111a:	4b1b      	ldr	r3, [pc, #108]	@ (8001188 <MX_ADC1_Init+0xe8>)
 800111c:	2200      	movs	r2, #0
 800111e:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001120:	4b19      	ldr	r3, [pc, #100]	@ (8001188 <MX_ADC1_Init+0xe8>)
 8001122:	2200      	movs	r2, #0
 8001124:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001128:	4817      	ldr	r0, [pc, #92]	@ (8001188 <MX_ADC1_Init+0xe8>)
 800112a:	f001 fda7 	bl	8002c7c <HAL_ADC_Init>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8001134:	f000 ffba 	bl	80020ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001138:	2300      	movs	r3, #0
 800113a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800113c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001140:	4619      	mov	r1, r3
 8001142:	4811      	ldr	r0, [pc, #68]	@ (8001188 <MX_ADC1_Init+0xe8>)
 8001144:	f003 fc26 	bl	8004994 <HAL_ADCEx_MultiModeConfigChannel>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800114e:	f000 ffad 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001152:	4b0e      	ldr	r3, [pc, #56]	@ (800118c <MX_ADC1_Init+0xec>)
 8001154:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001156:	230c      	movs	r3, #12
 8001158:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 800115a:	2307      	movs	r3, #7
 800115c:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800115e:	237f      	movs	r3, #127	@ 0x7f
 8001160:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001162:	2304      	movs	r3, #4
 8001164:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001166:	2300      	movs	r3, #0
 8001168:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	@ (8001188 <MX_ADC1_Init+0xe8>)
 8001170:	f002 fd38 	bl	8003be4 <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 800117a:	f000 ff97 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3730      	adds	r7, #48	@ 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	200000bc 	.word	0x200000bc
 800118c:	14f00020 	.word	0x14f00020

08001190 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b088      	sub	sp, #32
 8001194:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001196:	463b      	mov	r3, r7
 8001198:	2220      	movs	r2, #32
 800119a:	2100      	movs	r1, #0
 800119c:	4618      	mov	r0, r3
 800119e:	f007 fcd9 	bl	8008b54 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80011a2:	4b32      	ldr	r3, [pc, #200]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011a4:	4a32      	ldr	r2, [pc, #200]	@ (8001270 <MX_ADC2_Init+0xe0>)
 80011a6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011a8:	4b30      	ldr	r3, [pc, #192]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011aa:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80011ae:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80011b0:	4b2e      	ldr	r3, [pc, #184]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011b6:	4b2d      	ldr	r3, [pc, #180]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80011bc:	4b2b      	ldr	r3, [pc, #172]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011be:	2200      	movs	r2, #0
 80011c0:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80011c2:	4b2a      	ldr	r3, [pc, #168]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011c4:	2201      	movs	r2, #1
 80011c6:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011c8:	4b28      	ldr	r3, [pc, #160]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011ca:	2204      	movs	r2, #4
 80011cc:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80011ce:	4b27      	ldr	r3, [pc, #156]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80011d4:	4b25      	ldr	r3, [pc, #148]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80011da:	4b24      	ldr	r3, [pc, #144]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011dc:	2202      	movs	r2, #2
 80011de:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80011e0:	4b22      	ldr	r3, [pc, #136]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e8:	4b20      	ldr	r3, [pc, #128]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011ee:	4b1f      	ldr	r3, [pc, #124]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80011f4:	4b1d      	ldr	r3, [pc, #116]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80011fc:	4b1b      	ldr	r3, [pc, #108]	@ (800126c <MX_ADC2_Init+0xdc>)
 80011fe:	2200      	movs	r2, #0
 8001200:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8001202:	4b1a      	ldr	r3, [pc, #104]	@ (800126c <MX_ADC2_Init+0xdc>)
 8001204:	2200      	movs	r2, #0
 8001206:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 800120a:	4818      	ldr	r0, [pc, #96]	@ (800126c <MX_ADC2_Init+0xdc>)
 800120c:	f001 fd36 	bl	8002c7c <HAL_ADC_Init>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8001216:	f000 ff49 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800121a:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <MX_ADC2_Init+0xe4>)
 800121c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800121e:	2306      	movs	r3, #6
 8001220:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 8001222:	2307      	movs	r3, #7
 8001224:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001226:	237f      	movs	r3, #127	@ 0x7f
 8001228:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800122a:	2304      	movs	r3, #4
 800122c:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800122e:	2300      	movs	r3, #0
 8001230:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8001232:	463b      	mov	r3, r7
 8001234:	4619      	mov	r1, r3
 8001236:	480d      	ldr	r0, [pc, #52]	@ (800126c <MX_ADC2_Init+0xdc>)
 8001238:	f002 fcd4 	bl	8003be4 <HAL_ADC_ConfigChannel>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 8001242:	f000 ff33 	bl	80020ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001246:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_ADC2_Init+0xe8>)
 8001248:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800124a:	230c      	movs	r3, #12
 800124c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800124e:	463b      	mov	r3, r7
 8001250:	4619      	mov	r1, r3
 8001252:	4806      	ldr	r0, [pc, #24]	@ (800126c <MX_ADC2_Init+0xdc>)
 8001254:	f002 fcc6 	bl	8003be4 <HAL_ADC_ConfigChannel>
 8001258:	4603      	mov	r3, r0
 800125a:	2b00      	cmp	r3, #0
 800125c:	d001      	beq.n	8001262 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 800125e:	f000 ff25 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001262:	bf00      	nop
 8001264:	3720      	adds	r7, #32
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	20000128 	.word	0x20000128
 8001270:	50000100 	.word	0x50000100
 8001274:	14f00020 	.word	0x14f00020
 8001278:	21800100 	.word	0x21800100

0800127c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001280:	4b21      	ldr	r3, [pc, #132]	@ (8001308 <MX_LPUART1_UART_Init+0x8c>)
 8001282:	4a22      	ldr	r2, [pc, #136]	@ (800130c <MX_LPUART1_UART_Init+0x90>)
 8001284:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001286:	4b20      	ldr	r3, [pc, #128]	@ (8001308 <MX_LPUART1_UART_Init+0x8c>)
 8001288:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800128c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800128e:	4b1e      	ldr	r3, [pc, #120]	@ (8001308 <MX_LPUART1_UART_Init+0x8c>)
 8001290:	2200      	movs	r2, #0
 8001292:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001294:	4b1c      	ldr	r3, [pc, #112]	@ (8001308 <MX_LPUART1_UART_Init+0x8c>)
 8001296:	2200      	movs	r2, #0
 8001298:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800129a:	4b1b      	ldr	r3, [pc, #108]	@ (8001308 <MX_LPUART1_UART_Init+0x8c>)
 800129c:	2200      	movs	r2, #0
 800129e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80012a0:	4b19      	ldr	r3, [pc, #100]	@ (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012a2:	220c      	movs	r2, #12
 80012a4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012a6:	4b18      	ldr	r3, [pc, #96]	@ (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80012ac:	4b16      	ldr	r3, [pc, #88]	@ (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80012b2:	4b15      	ldr	r3, [pc, #84]	@ (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80012b8:	4b13      	ldr	r3, [pc, #76]	@ (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80012be:	4812      	ldr	r0, [pc, #72]	@ (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012c0:	f006 fd16 	bl	8007cf0 <HAL_UART_Init>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 80012ca:	f000 feef 	bl	80020ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012ce:	2100      	movs	r1, #0
 80012d0:	480d      	ldr	r0, [pc, #52]	@ (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012d2:	f007 fb3f 	bl	8008954 <HAL_UARTEx_SetTxFifoThreshold>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80012dc:	f000 fee6 	bl	80020ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80012e0:	2100      	movs	r1, #0
 80012e2:	4809      	ldr	r0, [pc, #36]	@ (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012e4:	f007 fb74 	bl	80089d0 <HAL_UARTEx_SetRxFifoThreshold>
 80012e8:	4603      	mov	r3, r0
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80012ee:	f000 fedd 	bl	80020ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80012f2:	4805      	ldr	r0, [pc, #20]	@ (8001308 <MX_LPUART1_UART_Init+0x8c>)
 80012f4:	f007 faf5 	bl	80088e2 <HAL_UARTEx_DisableFifoMode>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80012fe:	f000 fed5 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001302:	bf00      	nop
 8001304:	bd80      	pop	{r7, pc}
 8001306:	bf00      	nop
 8001308:	20000194 	.word	0x20000194
 800130c:	40008000 	.word	0x40008000

08001310 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	b09c      	sub	sp, #112	@ 0x70
 8001314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001316:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800131a:	2200      	movs	r2, #0
 800131c:	601a      	str	r2, [r3, #0]
 800131e:	605a      	str	r2, [r3, #4]
 8001320:	609a      	str	r2, [r3, #8]
 8001322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001324:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001328:	2200      	movs	r2, #0
 800132a:	601a      	str	r2, [r3, #0]
 800132c:	605a      	str	r2, [r3, #4]
 800132e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001330:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001334:	2200      	movs	r2, #0
 8001336:	601a      	str	r2, [r3, #0]
 8001338:	605a      	str	r2, [r3, #4]
 800133a:	609a      	str	r2, [r3, #8]
 800133c:	60da      	str	r2, [r3, #12]
 800133e:	611a      	str	r2, [r3, #16]
 8001340:	615a      	str	r2, [r3, #20]
 8001342:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001344:	1d3b      	adds	r3, r7, #4
 8001346:	2234      	movs	r2, #52	@ 0x34
 8001348:	2100      	movs	r1, #0
 800134a:	4618      	mov	r0, r3
 800134c:	f007 fc02 	bl	8008b54 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001350:	4b4b      	ldr	r3, [pc, #300]	@ (8001480 <MX_TIM1_Init+0x170>)
 8001352:	4a4c      	ldr	r2, [pc, #304]	@ (8001484 <MX_TIM1_Init+0x174>)
 8001354:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 169;
 8001356:	4b4a      	ldr	r3, [pc, #296]	@ (8001480 <MX_TIM1_Init+0x170>)
 8001358:	22a9      	movs	r2, #169	@ 0xa9
 800135a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135c:	4b48      	ldr	r3, [pc, #288]	@ (8001480 <MX_TIM1_Init+0x170>)
 800135e:	2200      	movs	r2, #0
 8001360:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001362:	4b47      	ldr	r3, [pc, #284]	@ (8001480 <MX_TIM1_Init+0x170>)
 8001364:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001368:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136a:	4b45      	ldr	r3, [pc, #276]	@ (8001480 <MX_TIM1_Init+0x170>)
 800136c:	2200      	movs	r2, #0
 800136e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001370:	4b43      	ldr	r3, [pc, #268]	@ (8001480 <MX_TIM1_Init+0x170>)
 8001372:	2200      	movs	r2, #0
 8001374:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001376:	4b42      	ldr	r3, [pc, #264]	@ (8001480 <MX_TIM1_Init+0x170>)
 8001378:	2200      	movs	r2, #0
 800137a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800137c:	4840      	ldr	r0, [pc, #256]	@ (8001480 <MX_TIM1_Init+0x170>)
 800137e:	f004 ff1d 	bl	80061bc <HAL_TIM_Base_Init>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001388:	f000 fe90 	bl	80020ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001390:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001392:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001396:	4619      	mov	r1, r3
 8001398:	4839      	ldr	r0, [pc, #228]	@ (8001480 <MX_TIM1_Init+0x170>)
 800139a:	f005 fd5b 	bl	8006e54 <HAL_TIM_ConfigClockSource>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80013a4:	f000 fe82 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013a8:	4835      	ldr	r0, [pc, #212]	@ (8001480 <MX_TIM1_Init+0x170>)
 80013aa:	f005 f847 	bl	800643c <HAL_TIM_PWM_Init>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80013b4:	f000 fe7a 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013bc:	2300      	movs	r3, #0
 80013be:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c0:	2300      	movs	r3, #0
 80013c2:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013c4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80013c8:	4619      	mov	r1, r3
 80013ca:	482d      	ldr	r0, [pc, #180]	@ (8001480 <MX_TIM1_Init+0x170>)
 80013cc:	f006 fb20 	bl	8007a10 <HAL_TIMEx_MasterConfigSynchronization>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80013d6:	f000 fe69 	bl	80020ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013da:	2360      	movs	r3, #96	@ 0x60
 80013dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e2:	2300      	movs	r3, #0
 80013e4:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013f6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80013fa:	2200      	movs	r2, #0
 80013fc:	4619      	mov	r1, r3
 80013fe:	4820      	ldr	r0, [pc, #128]	@ (8001480 <MX_TIM1_Init+0x170>)
 8001400:	f005 fc14 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 800140a:	f000 fe4f 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800140e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001412:	2204      	movs	r2, #4
 8001414:	4619      	mov	r1, r3
 8001416:	481a      	ldr	r0, [pc, #104]	@ (8001480 <MX_TIM1_Init+0x170>)
 8001418:	f005 fc08 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MX_TIM1_Init+0x116>
  {
    Error_Handler();
 8001422:	f000 fe43 	bl	80020ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800142e:	2300      	movs	r3, #0
 8001430:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800143a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800143e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001440:	2300      	movs	r3, #0
 8001442:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001444:	2300      	movs	r3, #0
 8001446:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001448:	2300      	movs	r3, #0
 800144a:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800144c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001456:	2300      	movs	r3, #0
 8001458:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800145a:	2300      	movs	r3, #0
 800145c:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800145e:	1d3b      	adds	r3, r7, #4
 8001460:	4619      	mov	r1, r3
 8001462:	4807      	ldr	r0, [pc, #28]	@ (8001480 <MX_TIM1_Init+0x170>)
 8001464:	f006 fb6a 	bl	8007b3c <HAL_TIMEx_ConfigBreakDeadTime>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM1_Init+0x162>
  {
    Error_Handler();
 800146e:	f000 fe1d 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001472:	4803      	ldr	r0, [pc, #12]	@ (8001480 <MX_TIM1_Init+0x170>)
 8001474:	f000 fffa 	bl	800246c <HAL_TIM_MspPostInit>

}
 8001478:	bf00      	nop
 800147a:	3770      	adds	r7, #112	@ 0x70
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	20000228 	.word	0x20000228
 8001484:	40012c00 	.word	0x40012c00

08001488 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b08e      	sub	sp, #56	@ 0x38
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800148e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001492:	2200      	movs	r2, #0
 8001494:	601a      	str	r2, [r3, #0]
 8001496:	605a      	str	r2, [r3, #4]
 8001498:	609a      	str	r2, [r3, #8]
 800149a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	f107 031c 	add.w	r3, r7, #28
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014a8:	463b      	mov	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
 80014ae:	605a      	str	r2, [r3, #4]
 80014b0:	609a      	str	r2, [r3, #8]
 80014b2:	60da      	str	r2, [r3, #12]
 80014b4:	611a      	str	r2, [r3, #16]
 80014b6:	615a      	str	r2, [r3, #20]
 80014b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ba:	4b33      	ldr	r3, [pc, #204]	@ (8001588 <MX_TIM2_Init+0x100>)
 80014bc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 169;
 80014c2:	4b31      	ldr	r3, [pc, #196]	@ (8001588 <MX_TIM2_Init+0x100>)
 80014c4:	22a9      	movs	r2, #169	@ 0xa9
 80014c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001588 <MX_TIM2_Init+0x100>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 19999;
 80014ce:	4b2e      	ldr	r3, [pc, #184]	@ (8001588 <MX_TIM2_Init+0x100>)
 80014d0:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 80014d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014d6:	4b2c      	ldr	r3, [pc, #176]	@ (8001588 <MX_TIM2_Init+0x100>)
 80014d8:	2200      	movs	r2, #0
 80014da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014dc:	4b2a      	ldr	r3, [pc, #168]	@ (8001588 <MX_TIM2_Init+0x100>)
 80014de:	2200      	movs	r2, #0
 80014e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014e2:	4829      	ldr	r0, [pc, #164]	@ (8001588 <MX_TIM2_Init+0x100>)
 80014e4:	f004 fe6a 	bl	80061bc <HAL_TIM_Base_Init>
 80014e8:	4603      	mov	r3, r0
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d001      	beq.n	80014f2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80014ee:	f000 fddd 	bl	80020ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80014f6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80014f8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80014fc:	4619      	mov	r1, r3
 80014fe:	4822      	ldr	r0, [pc, #136]	@ (8001588 <MX_TIM2_Init+0x100>)
 8001500:	f005 fca8 	bl	8006e54 <HAL_TIM_ConfigClockSource>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800150a:	f000 fdcf 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800150e:	481e      	ldr	r0, [pc, #120]	@ (8001588 <MX_TIM2_Init+0x100>)
 8001510:	f004 ff94 	bl	800643c <HAL_TIM_PWM_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 800151a:	f000 fdc7 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151e:	2300      	movs	r3, #0
 8001520:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001522:	2300      	movs	r3, #0
 8001524:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001526:	f107 031c 	add.w	r3, r7, #28
 800152a:	4619      	mov	r1, r3
 800152c:	4816      	ldr	r0, [pc, #88]	@ (8001588 <MX_TIM2_Init+0x100>)
 800152e:	f006 fa6f 	bl	8007a10 <HAL_TIMEx_MasterConfigSynchronization>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001538:	f000 fdb8 	bl	80020ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800153c:	2360      	movs	r3, #96	@ 0x60
 800153e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001544:	2300      	movs	r3, #0
 8001546:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001548:	2300      	movs	r3, #0
 800154a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800154c:	463b      	mov	r3, r7
 800154e:	2200      	movs	r2, #0
 8001550:	4619      	mov	r1, r3
 8001552:	480d      	ldr	r0, [pc, #52]	@ (8001588 <MX_TIM2_Init+0x100>)
 8001554:	f005 fb6a 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800155e:	f000 fda5 	bl	80020ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001562:	463b      	mov	r3, r7
 8001564:	2204      	movs	r2, #4
 8001566:	4619      	mov	r1, r3
 8001568:	4807      	ldr	r0, [pc, #28]	@ (8001588 <MX_TIM2_Init+0x100>)
 800156a:	f005 fb5f 	bl	8006c2c <HAL_TIM_PWM_ConfigChannel>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d001      	beq.n	8001578 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8001574:	f000 fd9a 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001578:	4803      	ldr	r0, [pc, #12]	@ (8001588 <MX_TIM2_Init+0x100>)
 800157a:	f000 ff77 	bl	800246c <HAL_TIM_MspPostInit>

}
 800157e:	bf00      	nop
 8001580:	3738      	adds	r7, #56	@ 0x38
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
 8001586:	bf00      	nop
 8001588:	20000274 	.word	0x20000274

0800158c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	@ 0x30
 8001590:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	2224      	movs	r2, #36	@ 0x24
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f007 fada 	bl	8008b54 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015a0:	463b      	mov	r3, r7
 80015a2:	2200      	movs	r2, #0
 80015a4:	601a      	str	r2, [r3, #0]
 80015a6:	605a      	str	r2, [r3, #4]
 80015a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80015aa:	4b21      	ldr	r3, [pc, #132]	@ (8001630 <MX_TIM3_Init+0xa4>)
 80015ac:	4a21      	ldr	r2, [pc, #132]	@ (8001634 <MX_TIM3_Init+0xa8>)
 80015ae:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80015b0:	4b1f      	ldr	r3, [pc, #124]	@ (8001630 <MX_TIM3_Init+0xa4>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b6:	4b1e      	ldr	r3, [pc, #120]	@ (8001630 <MX_TIM3_Init+0xa4>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 3072;
 80015bc:	4b1c      	ldr	r3, [pc, #112]	@ (8001630 <MX_TIM3_Init+0xa4>)
 80015be:	f44f 6240 	mov.w	r2, #3072	@ 0xc00
 80015c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001630 <MX_TIM3_Init+0xa4>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015ca:	4b19      	ldr	r3, [pc, #100]	@ (8001630 <MX_TIM3_Init+0xa4>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80015d0:	2303      	movs	r3, #3
 80015d2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80015d8:	2301      	movs	r3, #1
 80015da:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80015dc:	2300      	movs	r3, #0
 80015de:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80015e0:	2300      	movs	r3, #0
 80015e2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80015e4:	2300      	movs	r3, #0
 80015e6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015e8:	2301      	movs	r3, #1
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	4619      	mov	r1, r3
 80015fa:	480d      	ldr	r0, [pc, #52]	@ (8001630 <MX_TIM3_Init+0xa4>)
 80015fc:	f005 f892 	bl	8006724 <HAL_TIM_Encoder_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001606:	f000 fd51 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001612:	463b      	mov	r3, r7
 8001614:	4619      	mov	r1, r3
 8001616:	4806      	ldr	r0, [pc, #24]	@ (8001630 <MX_TIM3_Init+0xa4>)
 8001618:	f006 f9fa 	bl	8007a10 <HAL_TIMEx_MasterConfigSynchronization>
 800161c:	4603      	mov	r3, r0
 800161e:	2b00      	cmp	r3, #0
 8001620:	d001      	beq.n	8001626 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001622:	f000 fd43 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001626:	bf00      	nop
 8001628:	3730      	adds	r7, #48	@ 0x30
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	200002c0 	.word	0x200002c0
 8001634:	40000400 	.word	0x40000400

08001638 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b088      	sub	sp, #32
 800163c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800163e:	f107 0310 	add.w	r3, r7, #16
 8001642:	2200      	movs	r2, #0
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	605a      	str	r2, [r3, #4]
 8001648:	609a      	str	r2, [r3, #8]
 800164a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800164c:	1d3b      	adds	r3, r7, #4
 800164e:	2200      	movs	r2, #0
 8001650:	601a      	str	r2, [r3, #0]
 8001652:	605a      	str	r2, [r3, #4]
 8001654:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001656:	4b1d      	ldr	r3, [pc, #116]	@ (80016cc <MX_TIM5_Init+0x94>)
 8001658:	4a1d      	ldr	r2, [pc, #116]	@ (80016d0 <MX_TIM5_Init+0x98>)
 800165a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 169;
 800165c:	4b1b      	ldr	r3, [pc, #108]	@ (80016cc <MX_TIM5_Init+0x94>)
 800165e:	22a9      	movs	r2, #169	@ 0xa9
 8001660:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001662:	4b1a      	ldr	r3, [pc, #104]	@ (80016cc <MX_TIM5_Init+0x94>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 1000;
 8001668:	4b18      	ldr	r3, [pc, #96]	@ (80016cc <MX_TIM5_Init+0x94>)
 800166a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800166e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001670:	4b16      	ldr	r3, [pc, #88]	@ (80016cc <MX_TIM5_Init+0x94>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <MX_TIM5_Init+0x94>)
 8001678:	2200      	movs	r2, #0
 800167a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800167c:	4813      	ldr	r0, [pc, #76]	@ (80016cc <MX_TIM5_Init+0x94>)
 800167e:	f004 fd9d 	bl	80061bc <HAL_TIM_Base_Init>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001688:	f000 fd10 	bl	80020ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800168c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001690:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001692:	f107 0310 	add.w	r3, r7, #16
 8001696:	4619      	mov	r1, r3
 8001698:	480c      	ldr	r0, [pc, #48]	@ (80016cc <MX_TIM5_Init+0x94>)
 800169a:	f005 fbdb 	bl	8006e54 <HAL_TIM_ConfigClockSource>
 800169e:	4603      	mov	r3, r0
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d001      	beq.n	80016a8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80016a4:	f000 fd02 	bl	80020ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a8:	2300      	movs	r3, #0
 80016aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016b0:	1d3b      	adds	r3, r7, #4
 80016b2:	4619      	mov	r1, r3
 80016b4:	4805      	ldr	r0, [pc, #20]	@ (80016cc <MX_TIM5_Init+0x94>)
 80016b6:	f006 f9ab 	bl	8007a10 <HAL_TIMEx_MasterConfigSynchronization>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80016c0:	f000 fcf4 	bl	80020ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016c4:	bf00      	nop
 80016c6:	3720      	adds	r7, #32
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	2000030c 	.word	0x2000030c
 80016d0:	40000c00 	.word	0x40000c00

080016d4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	2200      	movs	r2, #0
 80016e0:	601a      	str	r2, [r3, #0]
 80016e2:	605a      	str	r2, [r3, #4]
 80016e4:	609a      	str	r2, [r3, #8]
 80016e6:	60da      	str	r2, [r3, #12]
 80016e8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016ea:	4b2f      	ldr	r3, [pc, #188]	@ (80017a8 <MX_GPIO_Init+0xd4>)
 80016ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016ee:	4a2e      	ldr	r2, [pc, #184]	@ (80017a8 <MX_GPIO_Init+0xd4>)
 80016f0:	f043 0304 	orr.w	r3, r3, #4
 80016f4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80016f6:	4b2c      	ldr	r3, [pc, #176]	@ (80017a8 <MX_GPIO_Init+0xd4>)
 80016f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016fa:	f003 0304 	and.w	r3, r3, #4
 80016fe:	613b      	str	r3, [r7, #16]
 8001700:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001702:	4b29      	ldr	r3, [pc, #164]	@ (80017a8 <MX_GPIO_Init+0xd4>)
 8001704:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001706:	4a28      	ldr	r2, [pc, #160]	@ (80017a8 <MX_GPIO_Init+0xd4>)
 8001708:	f043 0320 	orr.w	r3, r3, #32
 800170c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800170e:	4b26      	ldr	r3, [pc, #152]	@ (80017a8 <MX_GPIO_Init+0xd4>)
 8001710:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001712:	f003 0320 	and.w	r3, r3, #32
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800171a:	4b23      	ldr	r3, [pc, #140]	@ (80017a8 <MX_GPIO_Init+0xd4>)
 800171c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800171e:	4a22      	ldr	r2, [pc, #136]	@ (80017a8 <MX_GPIO_Init+0xd4>)
 8001720:	f043 0301 	orr.w	r3, r3, #1
 8001724:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001726:	4b20      	ldr	r3, [pc, #128]	@ (80017a8 <MX_GPIO_Init+0xd4>)
 8001728:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800172a:	f003 0301 	and.w	r3, r3, #1
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001732:	4b1d      	ldr	r3, [pc, #116]	@ (80017a8 <MX_GPIO_Init+0xd4>)
 8001734:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001736:	4a1c      	ldr	r2, [pc, #112]	@ (80017a8 <MX_GPIO_Init+0xd4>)
 8001738:	f043 0302 	orr.w	r3, r3, #2
 800173c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800173e:	4b1a      	ldr	r3, [pc, #104]	@ (80017a8 <MX_GPIO_Init+0xd4>)
 8001740:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800174a:	2200      	movs	r2, #0
 800174c:	2120      	movs	r1, #32
 800174e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001752:	f003 fcb9 	bl	80050c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001756:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800175a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800175c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001760:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001762:	2300      	movs	r3, #0
 8001764:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001766:	f107 0314 	add.w	r3, r7, #20
 800176a:	4619      	mov	r1, r3
 800176c:	480f      	ldr	r0, [pc, #60]	@ (80017ac <MX_GPIO_Init+0xd8>)
 800176e:	f003 fb29 	bl	8004dc4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001772:	2320      	movs	r3, #32
 8001774:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001776:	2301      	movs	r3, #1
 8001778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	4619      	mov	r1, r3
 8001788:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800178c:	f003 fb1a 	bl	8004dc4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001790:	2200      	movs	r2, #0
 8001792:	2100      	movs	r1, #0
 8001794:	2028      	movs	r0, #40	@ 0x28
 8001796:	f003 fae0 	bl	8004d5a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800179a:	2028      	movs	r0, #40	@ 0x28
 800179c:	f003 faf7 	bl	8004d8e <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017a0:	bf00      	nop
 80017a2:	3728      	adds	r7, #40	@ 0x28
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000
 80017ac:	48000800 	.word	0x48000800

080017b0 <ADC_Read_blocking>:

/* USER CODE BEGIN 4 */
void ADC_Read_blocking()
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b082      	sub	sp, #8
 80017b4:	af00      	add	r7, sp, #0
static uint32_t TimeStamp = 0;
if( HAL_GetTick()<TimeStamp) return;
 80017b6:	f000 ffa5 	bl	8002704 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	4b1e      	ldr	r3, [pc, #120]	@ (8001838 <ADC_Read_blocking+0x88>)
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	429a      	cmp	r2, r3
 80017c2:	d334      	bcc.n	800182e <ADC_Read_blocking+0x7e>
TimeStamp = HAL_GetTick()+500;
 80017c4:	f000 ff9e 	bl	8002704 <HAL_GetTick>
 80017c8:	4603      	mov	r3, r0
 80017ca:	f503 73fa 	add.w	r3, r3, #500	@ 0x1f4
 80017ce:	4a1a      	ldr	r2, [pc, #104]	@ (8001838 <ADC_Read_blocking+0x88>)
 80017d0:	6013      	str	r3, [r2, #0]
for(int i=0;i<2;i++)
 80017d2:	2300      	movs	r3, #0
 80017d4:	607b      	str	r3, [r7, #4]
 80017d6:	e026      	b.n	8001826 <ADC_Read_blocking+0x76>
{
HAL_ADC_ConfigChannel(&hadc2, &ADC2_Channel[i].Config);
 80017d8:	687a      	ldr	r2, [r7, #4]
 80017da:	4613      	mov	r3, r2
 80017dc:	00db      	lsls	r3, r3, #3
 80017de:	4413      	add	r3, r2
 80017e0:	009b      	lsls	r3, r3, #2
 80017e2:	4a16      	ldr	r2, [pc, #88]	@ (800183c <ADC_Read_blocking+0x8c>)
 80017e4:	4413      	add	r3, r2
 80017e6:	4619      	mov	r1, r3
 80017e8:	4815      	ldr	r0, [pc, #84]	@ (8001840 <ADC_Read_blocking+0x90>)
 80017ea:	f002 f9fb 	bl	8003be4 <HAL_ADC_ConfigChannel>
HAL_ADC_Start(&hadc2);
 80017ee:	4814      	ldr	r0, [pc, #80]	@ (8001840 <ADC_Read_blocking+0x90>)
 80017f0:	f001 fc00 	bl	8002ff4 <HAL_ADC_Start>
HAL_ADC_PollForConversion(&hadc2, 100);
 80017f4:	2164      	movs	r1, #100	@ 0x64
 80017f6:	4812      	ldr	r0, [pc, #72]	@ (8001840 <ADC_Read_blocking+0x90>)
 80017f8:	f001 fd14 	bl	8003224 <HAL_ADC_PollForConversion>
ADC2_Channel[i].data = HAL_ADC_GetValue(&hadc2);
 80017fc:	4810      	ldr	r0, [pc, #64]	@ (8001840 <ADC_Read_blocking+0x90>)
 80017fe:	f001 ff6f 	bl	80036e0 <HAL_ADC_GetValue>
 8001802:	4603      	mov	r3, r0
 8001804:	b298      	uxth	r0, r3
 8001806:	490d      	ldr	r1, [pc, #52]	@ (800183c <ADC_Read_blocking+0x8c>)
 8001808:	687a      	ldr	r2, [r7, #4]
 800180a:	4613      	mov	r3, r2
 800180c:	00db      	lsls	r3, r3, #3
 800180e:	4413      	add	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	440b      	add	r3, r1
 8001814:	3320      	adds	r3, #32
 8001816:	4602      	mov	r2, r0
 8001818:	801a      	strh	r2, [r3, #0]
HAL_ADC_Stop(&hadc2);
 800181a:	4809      	ldr	r0, [pc, #36]	@ (8001840 <ADC_Read_blocking+0x90>)
 800181c:	f001 fcce 	bl	80031bc <HAL_ADC_Stop>
for(int i=0;i<2;i++)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	3301      	adds	r3, #1
 8001824:	607b      	str	r3, [r7, #4]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2b01      	cmp	r3, #1
 800182a:	ddd5      	ble.n	80017d8 <ADC_Read_blocking+0x28>
 800182c:	e000      	b.n	8001830 <ADC_Read_blocking+0x80>
if( HAL_GetTick()<TimeStamp) return;
 800182e:	bf00      	nop
}
}
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	2000040c 	.word	0x2000040c
 800183c:	20000004 	.word	0x20000004
 8001840:	20000128 	.word	0x20000128
 8001844:	00000000 	.word	0x00000000

08001848 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001848:	b580      	push	{r7, lr}
 800184a:	b088      	sub	sp, #32
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
	if(htim == &htim5){
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	4a59      	ldr	r2, [pc, #356]	@ (80019b8 <HAL_TIM_PeriodElapsedCallback+0x170>)
 8001854:	4293      	cmp	r3, r2
 8001856:	f040 80a4 	bne.w	80019a2 <HAL_TIM_PeriodElapsedCallback+0x15a>

		angle = (ADC[0].data / 4095.0) * 360.0;
 800185a:	4b58      	ldr	r3, [pc, #352]	@ (80019bc <HAL_TIM_PeriodElapsedCallback+0x174>)
 800185c:	8c1b      	ldrh	r3, [r3, #32]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe2c 	bl	80004bc <__aeabi_i2d>
 8001864:	a352      	add	r3, pc, #328	@ (adr r3, 80019b0 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8001866:	e9d3 2300 	ldrd	r2, r3, [r3]
 800186a:	f7fe ffbb 	bl	80007e4 <__aeabi_ddiv>
 800186e:	4602      	mov	r2, r0
 8001870:	460b      	mov	r3, r1
 8001872:	4610      	mov	r0, r2
 8001874:	4619      	mov	r1, r3
 8001876:	f04f 0200 	mov.w	r2, #0
 800187a:	4b51      	ldr	r3, [pc, #324]	@ (80019c0 <HAL_TIM_PeriodElapsedCallback+0x178>)
 800187c:	f7fe fe88 	bl	8000590 <__aeabi_dmul>
 8001880:	4602      	mov	r2, r0
 8001882:	460b      	mov	r3, r1
 8001884:	4610      	mov	r0, r2
 8001886:	4619      	mov	r1, r3
 8001888:	f7ff f894 	bl	80009b4 <__aeabi_d2iz>
 800188c:	4603      	mov	r3, r0
 800188e:	4a4d      	ldr	r2, [pc, #308]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8001890:	6013      	str	r3, [r2, #0]
		Vfeedback = (arm_pid_f32(&PID, setPoint-angle) * 1000);
 8001892:	4b4d      	ldr	r3, [pc, #308]	@ (80019c8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8001894:	ed93 7a00 	vldr	s14, [r3]
 8001898:	4b4a      	ldr	r3, [pc, #296]	@ (80019c4 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	ee07 3a90 	vmov	s15, r3
 80018a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80018a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018a8:	4b48      	ldr	r3, [pc, #288]	@ (80019cc <HAL_TIM_PeriodElapsedCallback+0x184>)
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	edc7 7a03 	vstr	s15, [r7, #12]
  float32_t in)
  {
    float32_t out;

    /* y[n] = y[n-1] + A0 * x[n] + A1 * x[n-1] + A2 * x[n-2]  */
    out = (S->A0 * in) +
 80018b0:	693b      	ldr	r3, [r7, #16]
 80018b2:	ed93 7a00 	vldr	s14, [r3]
 80018b6:	edd7 7a03 	vldr	s15, [r7, #12]
 80018ba:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80018be:	693b      	ldr	r3, [r7, #16]
 80018c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	edd3 7a03 	vldr	s15, [r3, #12]
 80018ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 80018ce:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	edd3 6a02 	vldr	s13, [r3, #8]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	edd3 7a04 	vldr	s15, [r3, #16]
 80018de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 80018ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018f0:	edc7 7a02 	vstr	s15, [r7, #8]

    /* Update state */
    S->state[1] = S->state[0];
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	68da      	ldr	r2, [r3, #12]
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	68fa      	ldr	r2, [r7, #12]
 8001900:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	68ba      	ldr	r2, [r7, #8]
 8001906:	615a      	str	r2, [r3, #20]

    /* return to application */
    return (out);
 8001908:	edd7 7a02 	vldr	s15, [r7, #8]
 800190c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80019d0 <HAL_TIM_PeriodElapsedCallback+0x188>
 8001910:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001914:	4b2f      	ldr	r3, [pc, #188]	@ (80019d4 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8001916:	edc3 7a00 	vstr	s15, [r3]
//
		Vfeedback_QEI = (arm_pid_f32(&PID_QEI, setPoint-QEIangle)*10);
 800191a:	4b2b      	ldr	r3, [pc, #172]	@ (80019c8 <HAL_TIM_PeriodElapsedCallback+0x180>)
 800191c:	ed93 7a00 	vldr	s14, [r3]
 8001920:	4b2d      	ldr	r3, [pc, #180]	@ (80019d8 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001930:	4b2a      	ldr	r3, [pc, #168]	@ (80019dc <HAL_TIM_PeriodElapsedCallback+0x194>)
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	edc7 7a06 	vstr	s15, [r7, #24]
    out = (S->A0 * in) +
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	ed93 7a00 	vldr	s14, [r3]
 800193e:	edd7 7a06 	vldr	s15, [r7, #24]
 8001942:	ee27 7a27 	vmul.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	edd3 6a01 	vldr	s13, [r3, #4]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001952:	ee66 7aa7 	vmul.f32	s15, s13, s15
    out = (S->A0 * in) +
 8001956:	ee37 7a27 	vadd.f32	s14, s14, s15
      (S->A1 * S->state[0]) + (S->A2 * S->state[1]) + (S->state[2]);
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	edd3 6a02 	vldr	s13, [r3, #8]
 8001960:	69fb      	ldr	r3, [r7, #28]
 8001962:	edd3 7a04 	vldr	s15, [r3, #16]
 8001966:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800196a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800196e:	69fb      	ldr	r3, [r7, #28]
 8001970:	edd3 7a05 	vldr	s15, [r3, #20]
    out = (S->A0 * in) +
 8001974:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001978:	edc7 7a05 	vstr	s15, [r7, #20]
    S->state[1] = S->state[0];
 800197c:	69fb      	ldr	r3, [r7, #28]
 800197e:	68da      	ldr	r2, [r3, #12]
 8001980:	69fb      	ldr	r3, [r7, #28]
 8001982:	611a      	str	r2, [r3, #16]
    S->state[0] = in;
 8001984:	69fb      	ldr	r3, [r7, #28]
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	60da      	str	r2, [r3, #12]
    S->state[2] = out;
 800198a:	69fb      	ldr	r3, [r7, #28]
 800198c:	697a      	ldr	r2, [r7, #20]
 800198e:	615a      	str	r2, [r3, #20]
    return (out);
 8001990:	edd7 7a05 	vldr	s15, [r7, #20]
 8001994:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001998:	ee67 7a87 	vmul.f32	s15, s15, s14
 800199c:	4b10      	ldr	r3, [pc, #64]	@ (80019e0 <HAL_TIM_PeriodElapsedCallback+0x198>)
 800199e:	edc3 7a00 	vstr	s15, [r3]

//		Vfeedback_QEI = (arm_pid_f32(&PID_QEI, setPoint-QEIangle) * 1000);


	}
}
 80019a2:	bf00      	nop
 80019a4:	3720      	adds	r7, #32
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	f3af 8000 	nop.w
 80019b0:	00000000 	.word	0x00000000
 80019b4:	40affe00 	.word	0x40affe00
 80019b8:	2000030c 	.word	0x2000030c
 80019bc:	2000004c 	.word	0x2000004c
 80019c0:	40768000 	.word	0x40768000
 80019c4:	200003ac 	.word	0x200003ac
 80019c8:	200003c4 	.word	0x200003c4
 80019cc:	2000035c 	.word	0x2000035c
 80019d0:	447a0000 	.word	0x447a0000
 80019d4:	200003a4 	.word	0x200003a4
 80019d8:	200003b8 	.word	0x200003b8
 80019dc:	20000380 	.word	0x20000380
 80019e0:	200003a8 	.word	0x200003a8

080019e4 <HAL_ADC_ConvCpltCallback>:




void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
if(hadc == &hadc1)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	4a1a      	ldr	r2, [pc, #104]	@ (8001a58 <HAL_ADC_ConvCpltCallback+0x74>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d12d      	bne.n	8001a50 <HAL_ADC_ConvCpltCallback+0x6c>
{
	ADC[Current_Channel].data= HAL_ADC_GetValue(&hadc1);
 80019f4:	4818      	ldr	r0, [pc, #96]	@ (8001a58 <HAL_ADC_ConvCpltCallback+0x74>)
 80019f6:	f001 fe73 	bl	80036e0 <HAL_ADC_GetValue>
 80019fa:	4602      	mov	r2, r0
 80019fc:	4b17      	ldr	r3, [pc, #92]	@ (8001a5c <HAL_ADC_ConvCpltCallback+0x78>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4619      	mov	r1, r3
 8001a02:	b290      	uxth	r0, r2
 8001a04:	4a16      	ldr	r2, [pc, #88]	@ (8001a60 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001a06:	460b      	mov	r3, r1
 8001a08:	00db      	lsls	r3, r3, #3
 8001a0a:	440b      	add	r3, r1
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	4413      	add	r3, r2
 8001a10:	3320      	adds	r3, #32
 8001a12:	4602      	mov	r2, r0
 8001a14:	801a      	strh	r2, [r3, #0]
	//change channel
	Current_Channel++;
 8001a16:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_ADC_ConvCpltCallback+0x78>)
 8001a18:	781b      	ldrb	r3, [r3, #0]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	b2da      	uxtb	r2, r3
 8001a1e:	4b0f      	ldr	r3, [pc, #60]	@ (8001a5c <HAL_ADC_ConvCpltCallback+0x78>)
 8001a20:	701a      	strb	r2, [r3, #0]
	Current_Channel %= 2;
 8001a22:	4b0e      	ldr	r3, [pc, #56]	@ (8001a5c <HAL_ADC_ConvCpltCallback+0x78>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	b2da      	uxtb	r2, r3
 8001a2c:	4b0b      	ldr	r3, [pc, #44]	@ (8001a5c <HAL_ADC_ConvCpltCallback+0x78>)
 8001a2e:	701a      	strb	r2, [r3, #0]
	HAL_ADC_ConfigChannel(&hadc1,&ADC[Current_Channel].Config);
 8001a30:	4b0a      	ldr	r3, [pc, #40]	@ (8001a5c <HAL_ADC_ConvCpltCallback+0x78>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4613      	mov	r3, r2
 8001a38:	00db      	lsls	r3, r3, #3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4a08      	ldr	r2, [pc, #32]	@ (8001a60 <HAL_ADC_ConvCpltCallback+0x7c>)
 8001a40:	4413      	add	r3, r2
 8001a42:	4619      	mov	r1, r3
 8001a44:	4804      	ldr	r0, [pc, #16]	@ (8001a58 <HAL_ADC_ConvCpltCallback+0x74>)
 8001a46:	f002 f8cd 	bl	8003be4 <HAL_ADC_ConfigChannel>
	//start next ADC
	HAL_ADC_Start_IT(&hadc1);
 8001a4a:	4803      	ldr	r0, [pc, #12]	@ (8001a58 <HAL_ADC_ConvCpltCallback+0x74>)
 8001a4c:	f001 fcf0 	bl	8003430 <HAL_ADC_Start_IT>
}
}
 8001a50:	bf00      	nop
 8001a52:	3708      	adds	r7, #8
 8001a54:	46bd      	mov	sp, r7
 8001a56:	bd80      	pop	{r7, pc}
 8001a58:	200000bc 	.word	0x200000bc
 8001a5c:	20000358 	.word	0x20000358
 8001a60:	2000004c 	.word	0x2000004c

08001a64 <Rmotor>:

void Rmotor(){
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, setNEWspd);
 8001a68:	4b09      	ldr	r3, [pc, #36]	@ (8001a90 <Rmotor+0x2c>)
 8001a6a:	edd3 7a00 	vldr	s15, [r3]
 8001a6e:	4b09      	ldr	r3, [pc, #36]	@ (8001a94 <Rmotor+0x30>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a76:	ee17 2a90 	vmov	r2, s15
 8001a7a:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <Rmotor+0x30>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2200      	movs	r2, #0
 8001a82:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001a84:	bf00      	nop
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
 8001a8e:	bf00      	nop
 8001a90:	200003c0 	.word	0x200003c0
 8001a94:	20000228 	.word	0x20000228

08001a98 <Lmotor>:
void Lmotor(){
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8001ac8 <Lmotor+0x30>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, -setNEWspd);
 8001aa4:	4b09      	ldr	r3, [pc, #36]	@ (8001acc <Lmotor+0x34>)
 8001aa6:	edd3 7a00 	vldr	s15, [r3]
 8001aaa:	eef1 7a67 	vneg.f32	s15, s15
 8001aae:	4b06      	ldr	r3, [pc, #24]	@ (8001ac8 <Lmotor+0x30>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001ab6:	ee17 2a90 	vmov	r2, s15
 8001aba:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001abc:	bf00      	nop
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr
 8001ac6:	bf00      	nop
 8001ac8:	20000228 	.word	0x20000228
 8001acc:	200003c0 	.word	0x200003c0

08001ad0 <QEI_Rmotor>:

void QEI_Rmotor(){
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, -spd);
 8001ad4:	4b07      	ldr	r3, [pc, #28]	@ (8001af4 <QEI_Rmotor+0x24>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	425a      	negs	r2, r3
 8001ada:	4b07      	ldr	r3, [pc, #28]	@ (8001af8 <QEI_Rmotor+0x28>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001ae0:	4b05      	ldr	r3, [pc, #20]	@ (8001af8 <QEI_Rmotor+0x28>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8001ae8:	bf00      	nop
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr
 8001af2:	bf00      	nop
 8001af4:	200003cc 	.word	0x200003cc
 8001af8:	20000274 	.word	0x20000274

08001afc <QEI_Lmotor>:
void QEI_Lmotor(){
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001b00:	4b06      	ldr	r3, [pc, #24]	@ (8001b1c <QEI_Lmotor+0x20>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	2200      	movs	r2, #0
 8001b06:	635a      	str	r2, [r3, #52]	@ 0x34
		  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, spd);
 8001b08:	4b05      	ldr	r3, [pc, #20]	@ (8001b20 <QEI_Lmotor+0x24>)
 8001b0a:	681a      	ldr	r2, [r3, #0]
 8001b0c:	4b03      	ldr	r3, [pc, #12]	@ (8001b1c <QEI_Lmotor+0x20>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8001b12:	bf00      	nop
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	20000274 	.word	0x20000274
 8001b20:	200003cc 	.word	0x200003cc

08001b24 <QEI_Stopmotor>:

void QEI_Stopmotor(){
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 0);
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <QEI_Stopmotor+0x20>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	2200      	movs	r2, #0
 8001b2e:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_2, 0);
 8001b30:	4b04      	ldr	r3, [pc, #16]	@ (8001b44 <QEI_Stopmotor+0x20>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2200      	movs	r2, #0
 8001b36:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8001b38:	bf00      	nop
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000274 	.word	0x20000274

08001b48 <Stopmotor>:

void Stopmotor(){
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <Stopmotor+0x20>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	2200      	movs	r2, #0
 8001b52:	635a      	str	r2, [r3, #52]	@ 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, 0);
 8001b54:	4b04      	ldr	r3, [pc, #16]	@ (8001b68 <Stopmotor+0x20>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	639a      	str	r2, [r3, #56]	@ 0x38

}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	20000228 	.word	0x20000228

08001b6c <EX1_PID>:

void EX1_PID(){
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0

	  if(setPoint - angle <= 2 && setPoint - angle >= -2){Stopmotor();}
 8001b70:	4b41      	ldr	r3, [pc, #260]	@ (8001c78 <EX1_PID+0x10c>)
 8001b72:	ed93 7a00 	vldr	s14, [r3]
 8001b76:	4b41      	ldr	r3, [pc, #260]	@ (8001c7c <EX1_PID+0x110>)
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	ee07 3a90 	vmov	s15, r3
 8001b7e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b86:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001b8a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b92:	d813      	bhi.n	8001bbc <EX1_PID+0x50>
 8001b94:	4b38      	ldr	r3, [pc, #224]	@ (8001c78 <EX1_PID+0x10c>)
 8001b96:	ed93 7a00 	vldr	s14, [r3]
 8001b9a:	4b38      	ldr	r3, [pc, #224]	@ (8001c7c <EX1_PID+0x110>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	ee07 3a90 	vmov	s15, r3
 8001ba2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001baa:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001bae:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001bb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bb6:	db01      	blt.n	8001bbc <EX1_PID+0x50>
 8001bb8:	f7ff ffc6 	bl	8001b48 <Stopmotor>

	  if(setPoint == 360 && setPoint - angle == 0){Stopmotor();}
 8001bbc:	4b2e      	ldr	r3, [pc, #184]	@ (8001c78 <EX1_PID+0x10c>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8001c80 <EX1_PID+0x114>
 8001bc6:	eef4 7a47 	vcmp.f32	s15, s14
 8001bca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bce:	d111      	bne.n	8001bf4 <EX1_PID+0x88>
 8001bd0:	4b29      	ldr	r3, [pc, #164]	@ (8001c78 <EX1_PID+0x10c>)
 8001bd2:	ed93 7a00 	vldr	s14, [r3]
 8001bd6:	4b29      	ldr	r3, [pc, #164]	@ (8001c7c <EX1_PID+0x110>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	ee07 3a90 	vmov	s15, r3
 8001bde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001be6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001bea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bee:	d101      	bne.n	8001bf4 <EX1_PID+0x88>
 8001bf0:	f7ff ffaa 	bl	8001b48 <Stopmotor>

	  if(setPoint - angle > 3 || setPoint - angle < -3){
 8001bf4:	4b20      	ldr	r3, [pc, #128]	@ (8001c78 <EX1_PID+0x10c>)
 8001bf6:	ed93 7a00 	vldr	s14, [r3]
 8001bfa:	4b20      	ldr	r3, [pc, #128]	@ (8001c7c <EX1_PID+0x110>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	ee07 3a90 	vmov	s15, r3
 8001c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c06:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c0a:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001c0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c16:	dc12      	bgt.n	8001c3e <EX1_PID+0xd2>
 8001c18:	4b17      	ldr	r3, [pc, #92]	@ (8001c78 <EX1_PID+0x10c>)
 8001c1a:	ed93 7a00 	vldr	s14, [r3]
 8001c1e:	4b17      	ldr	r3, [pc, #92]	@ (8001c7c <EX1_PID+0x110>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	ee07 3a90 	vmov	s15, r3
 8001c26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c2e:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8001c32:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c3a:	d400      	bmi.n	8001c3e <EX1_PID+0xd2>

			  if(Vfeedback > 1){Rmotor();}
			  else if(Vfeedback < -1){Lmotor();}
	  }

	}
 8001c3c:	e019      	b.n	8001c72 <EX1_PID+0x106>
			  if(Vfeedback > 1){Rmotor();}
 8001c3e:	4b11      	ldr	r3, [pc, #68]	@ (8001c84 <EX1_PID+0x118>)
 8001c40:	edd3 7a00 	vldr	s15, [r3]
 8001c44:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001c48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	dd02      	ble.n	8001c58 <EX1_PID+0xec>
 8001c52:	f7ff ff07 	bl	8001a64 <Rmotor>
	}
 8001c56:	e00c      	b.n	8001c72 <EX1_PID+0x106>
			  else if(Vfeedback < -1){Lmotor();}
 8001c58:	4b0a      	ldr	r3, [pc, #40]	@ (8001c84 <EX1_PID+0x118>)
 8001c5a:	edd3 7a00 	vldr	s15, [r3]
 8001c5e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	d400      	bmi.n	8001c6e <EX1_PID+0x102>
	}
 8001c6c:	e001      	b.n	8001c72 <EX1_PID+0x106>
			  else if(Vfeedback < -1){Lmotor();}
 8001c6e:	f7ff ff13 	bl	8001a98 <Lmotor>
	}
 8001c72:	bf00      	nop
 8001c74:	bd80      	pop	{r7, pc}
 8001c76:	bf00      	nop
 8001c78:	200003c4 	.word	0x200003c4
 8001c7c:	200003ac 	.word	0x200003ac
 8001c80:	43b40000 	.word	0x43b40000
 8001c84:	200003a4 	.word	0x200003a4

08001c88 <EX2_PID>:

void EX2_PID(){
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	af00      	add	r7, sp, #0
	  if(setPoint - QEIangle <= 2 && setPoint - QEIangle >= -2){QEI_Stopmotor();}
 8001c8c:	4b33      	ldr	r3, [pc, #204]	@ (8001d5c <EX2_PID+0xd4>)
 8001c8e:	ed93 7a00 	vldr	s14, [r3]
 8001c92:	4b33      	ldr	r3, [pc, #204]	@ (8001d60 <EX2_PID+0xd8>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	ee07 3a90 	vmov	s15, r3
 8001c9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8001ca6:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cae:	d813      	bhi.n	8001cd8 <EX2_PID+0x50>
 8001cb0:	4b2a      	ldr	r3, [pc, #168]	@ (8001d5c <EX2_PID+0xd4>)
 8001cb2:	ed93 7a00 	vldr	s14, [r3]
 8001cb6:	4b2a      	ldr	r3, [pc, #168]	@ (8001d60 <EX2_PID+0xd8>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	ee07 3a90 	vmov	s15, r3
 8001cbe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cc6:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001cca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd2:	db01      	blt.n	8001cd8 <EX2_PID+0x50>
 8001cd4:	f7ff ff26 	bl	8001b24 <QEI_Stopmotor>
	  if (setPoint - QEIangle > 3 || setPoint - QEIangle < -3){
 8001cd8:	4b20      	ldr	r3, [pc, #128]	@ (8001d5c <EX2_PID+0xd4>)
 8001cda:	ed93 7a00 	vldr	s14, [r3]
 8001cde:	4b20      	ldr	r3, [pc, #128]	@ (8001d60 <EX2_PID+0xd8>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	ee07 3a90 	vmov	s15, r3
 8001ce6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cee:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 8001cf2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001cf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cfa:	dc12      	bgt.n	8001d22 <EX2_PID+0x9a>
 8001cfc:	4b17      	ldr	r3, [pc, #92]	@ (8001d5c <EX2_PID+0xd4>)
 8001cfe:	ed93 7a00 	vldr	s14, [r3]
 8001d02:	4b17      	ldr	r3, [pc, #92]	@ (8001d60 <EX2_PID+0xd8>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	ee07 3a90 	vmov	s15, r3
 8001d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d12:	eeb8 7a08 	vmov.f32	s14, #136	@ 0xc0400000 -3.0
 8001d16:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d1e:	d400      	bmi.n	8001d22 <EX2_PID+0x9a>
	  }
//	  else if (Vfeedback_QEI>0.5){QEI_Rmotor();}
//	  else if (Vfeedback_QEI<-0.5){QEI_Lmotor();}
//	  else if (Vfeedback_QEI <0.5 && Vfeedback_QEI>-0.5){QEI_Stopmotor();}

}
 8001d20:	e019      	b.n	8001d56 <EX2_PID+0xce>
		  if(Vfeedback_QEI > 1){QEI_Rmotor();}
 8001d22:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <EX2_PID+0xdc>)
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001d2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d34:	dd02      	ble.n	8001d3c <EX2_PID+0xb4>
 8001d36:	f7ff fecb 	bl	8001ad0 <QEI_Rmotor>
}
 8001d3a:	e00c      	b.n	8001d56 <EX2_PID+0xce>
		  else if(Vfeedback_QEI < -1){QEI_Lmotor();}
 8001d3c:	4b09      	ldr	r3, [pc, #36]	@ (8001d64 <EX2_PID+0xdc>)
 8001d3e:	edd3 7a00 	vldr	s15, [r3]
 8001d42:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001d46:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001d4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d4e:	d400      	bmi.n	8001d52 <EX2_PID+0xca>
}
 8001d50:	e001      	b.n	8001d56 <EX2_PID+0xce>
		  else if(Vfeedback_QEI < -1){QEI_Lmotor();}
 8001d52:	f7ff fed3 	bl	8001afc <QEI_Lmotor>
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	200003c4 	.word	0x200003c4
 8001d60:	200003b8 	.word	0x200003b8
 8001d64:	200003a8 	.word	0x200003a8

08001d68 <EX3>:

void EX3(){
 8001d68:	b5b0      	push	{r4, r5, r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0

	  error = setposition - position;
 8001d6e:	4b56      	ldr	r3, [pc, #344]	@ (8001ec8 <EX3+0x160>)
 8001d70:	ed93 7a00 	vldr	s14, [r3]
 8001d74:	4b55      	ldr	r3, [pc, #340]	@ (8001ecc <EX3+0x164>)
 8001d76:	edd3 7a00 	vldr	s15, [r3]
 8001d7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d7e:	4b54      	ldr	r3, [pc, #336]	@ (8001ed0 <EX3+0x168>)
 8001d80:	edc3 7a00 	vstr	s15, [r3]
	  ADC_avg[0] = error;
 8001d84:	4b52      	ldr	r3, [pc, #328]	@ (8001ed0 <EX3+0x168>)
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001d8e:	ee17 3a90 	vmov	r3, s15
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	4b4f      	ldr	r3, [pc, #316]	@ (8001ed4 <EX3+0x16c>)
 8001d96:	801a      	strh	r2, [r3, #0]
	  avg();
 8001d98:	f000 f8fe 	bl	8001f98 <avg>
	  static uint64_t timestamp = 0;
	  uint64_t currentTime = micros();
 8001d9c:	f000 f96c 	bl	8002078 <micros>
 8001da0:	e9c7 0100 	strd	r0, r1, [r7]

	  if(currentTime > timestamp)
 8001da4:	4b4c      	ldr	r3, [pc, #304]	@ (8001ed8 <EX3+0x170>)
 8001da6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001daa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dae:	4290      	cmp	r0, r2
 8001db0:	eb71 0303 	sbcs.w	r3, r1, r3
 8001db4:	d225      	bcs.n	8001e02 <EX3+0x9a>
	  {
		  timestamp = currentTime + 5000; //us 200 Hz
 8001db6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001dba:	f241 3188 	movw	r1, #5000	@ 0x1388
 8001dbe:	1854      	adds	r4, r2, r1
 8001dc0:	f143 0500 	adc.w	r5, r3, #0
 8001dc4:	4b44      	ldr	r3, [pc, #272]	@ (8001ed8 <EX3+0x170>)
 8001dc6:	e9c3 4500 	strd	r4, r5, [r3]
		  datasend = ADC_avg[0];
 8001dca:	4b42      	ldr	r3, [pc, #264]	@ (8001ed4 <EX3+0x16c>)
 8001dcc:	881a      	ldrh	r2, [r3, #0]
 8001dce:	4b43      	ldr	r3, [pc, #268]	@ (8001edc <EX3+0x174>)
 8001dd0:	801a      	strh	r2, [r3, #0]

		  ADCBytes[0] = 0x69; //Header
 8001dd2:	4b43      	ldr	r3, [pc, #268]	@ (8001ee0 <EX3+0x178>)
 8001dd4:	2269      	movs	r2, #105	@ 0x69
 8001dd6:	701a      	strb	r2, [r3, #0]
		  ADCBytes[1] = (uint8_t)(datasend & 0xFF); // Lower byte
 8001dd8:	4b40      	ldr	r3, [pc, #256]	@ (8001edc <EX3+0x174>)
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b2da      	uxtb	r2, r3
 8001dde:	4b40      	ldr	r3, [pc, #256]	@ (8001ee0 <EX3+0x178>)
 8001de0:	705a      	strb	r2, [r3, #1]
		  ADCBytes[2] = (uint8_t)((datasend >> 8) & 0xFF); // Upper byte
 8001de2:	4b3e      	ldr	r3, [pc, #248]	@ (8001edc <EX3+0x174>)
 8001de4:	881b      	ldrh	r3, [r3, #0]
 8001de6:	0a1b      	lsrs	r3, r3, #8
 8001de8:	b29b      	uxth	r3, r3
 8001dea:	b2da      	uxtb	r2, r3
 8001dec:	4b3c      	ldr	r3, [pc, #240]	@ (8001ee0 <EX3+0x178>)
 8001dee:	709a      	strb	r2, [r3, #2]
		  ADCBytes[3] = 0x0A; //Terminater
 8001df0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ee0 <EX3+0x178>)
 8001df2:	220a      	movs	r2, #10
 8001df4:	70da      	strb	r2, [r3, #3]

		  HAL_UART_Transmit(&hlpuart1, ADCBytes , sizeof(ADCBytes), 10);
 8001df6:	230a      	movs	r3, #10
 8001df8:	2204      	movs	r2, #4
 8001dfa:	4939      	ldr	r1, [pc, #228]	@ (8001ee0 <EX3+0x178>)
 8001dfc:	4839      	ldr	r0, [pc, #228]	@ (8001ee4 <EX3+0x17c>)
 8001dfe:	f005 ffc7 	bl	8007d90 <HAL_UART_Transmit>
	  }

	  Degree_position = (datasend*360.0)/4095.0;
 8001e02:	4b36      	ldr	r3, [pc, #216]	@ (8001edc <EX3+0x174>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fb58 	bl	80004bc <__aeabi_i2d>
 8001e0c:	f04f 0200 	mov.w	r2, #0
 8001e10:	4b35      	ldr	r3, [pc, #212]	@ (8001ee8 <EX3+0x180>)
 8001e12:	f7fe fbbd 	bl	8000590 <__aeabi_dmul>
 8001e16:	4602      	mov	r2, r0
 8001e18:	460b      	mov	r3, r1
 8001e1a:	4610      	mov	r0, r2
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	a326      	add	r3, pc, #152	@ (adr r3, 8001eb8 <EX3+0x150>)
 8001e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e24:	f7fe fcde 	bl	80007e4 <__aeabi_ddiv>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4610      	mov	r0, r2
 8001e2e:	4619      	mov	r1, r3
 8001e30:	f7fe fdc0 	bl	80009b4 <__aeabi_d2iz>
 8001e34:	4603      	mov	r3, r0
 8001e36:	4a2d      	ldr	r2, [pc, #180]	@ (8001eec <EX3+0x184>)
 8001e38:	6013      	str	r3, [r2, #0]
	  Rad_position = (datasend*3.14)/4095.0;
 8001e3a:	4b28      	ldr	r3, [pc, #160]	@ (8001edc <EX3+0x174>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7fe fb3c 	bl	80004bc <__aeabi_i2d>
 8001e44:	a31e      	add	r3, pc, #120	@ (adr r3, 8001ec0 <EX3+0x158>)
 8001e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e4a:	f7fe fba1 	bl	8000590 <__aeabi_dmul>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	a318      	add	r3, pc, #96	@ (adr r3, 8001eb8 <EX3+0x150>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f7fe fcc2 	bl	80007e4 <__aeabi_ddiv>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7fe fda4 	bl	80009b4 <__aeabi_d2iz>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4a20      	ldr	r2, [pc, #128]	@ (8001ef0 <EX3+0x188>)
 8001e70:	6013      	str	r3, [r2, #0]
	  PWM1 = (int16_t)(Recieve_PWM[2]<< 8) + Recieve_PWM[1];
 8001e72:	4b20      	ldr	r3, [pc, #128]	@ (8001ef4 <EX3+0x18c>)
 8001e74:	789b      	ldrb	r3, [r3, #2]
 8001e76:	021b      	lsls	r3, r3, #8
 8001e78:	b21b      	sxth	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	4b1d      	ldr	r3, [pc, #116]	@ (8001ef4 <EX3+0x18c>)
 8001e7e:	785b      	ldrb	r3, [r3, #1]
 8001e80:	4413      	add	r3, r2
 8001e82:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef8 <EX3+0x190>)
 8001e84:	6013      	str	r3, [r2, #0]
	  PWM2 = (int16_t)((PWM1*65535)/4095);
 8001e86:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef8 <EX3+0x190>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	041b      	lsls	r3, r3, #16
 8001e8e:	1a9b      	subs	r3, r3, r2
 8001e90:	4a1a      	ldr	r2, [pc, #104]	@ (8001efc <EX3+0x194>)
 8001e92:	fb82 1203 	smull	r1, r2, r2, r3
 8001e96:	441a      	add	r2, r3
 8001e98:	12d2      	asrs	r2, r2, #11
 8001e9a:	17db      	asrs	r3, r3, #31
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	4b17      	ldr	r3, [pc, #92]	@ (8001f00 <EX3+0x198>)
 8001ea4:	601a      	str	r2, [r3, #0]
	  __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, PWM2);
 8001ea6:	4b16      	ldr	r3, [pc, #88]	@ (8001f00 <EX3+0x198>)
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	4b16      	ldr	r3, [pc, #88]	@ (8001f04 <EX3+0x19c>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001eb0:	bf00      	nop
 8001eb2:	3708      	adds	r7, #8
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8001eb8:	00000000 	.word	0x00000000
 8001ebc:	40affe00 	.word	0x40affe00
 8001ec0:	51eb851f 	.word	0x51eb851f
 8001ec4:	40091eb8 	.word	0x40091eb8
 8001ec8:	200003f8 	.word	0x200003f8
 8001ecc:	20000404 	.word	0x20000404
 8001ed0:	20000408 	.word	0x20000408
 8001ed4:	200003d0 	.word	0x200003d0
 8001ed8:	20000410 	.word	0x20000410
 8001edc:	200003d8 	.word	0x200003d8
 8001ee0:	200003d4 	.word	0x200003d4
 8001ee4:	20000194 	.word	0x20000194
 8001ee8:	40768000 	.word	0x40768000
 8001eec:	200003dc 	.word	0x200003dc
 8001ef0:	200003e0 	.word	0x200003e0
 8001ef4:	200003e4 	.word	0x200003e4
 8001ef8:	200003b0 	.word	0x200003b0
 8001efc:	80080081 	.word	0x80080081
 8001f00:	200003b4 	.word	0x200003b4
 8001f04:	20000228 	.word	0x20000228

08001f08 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
 {
 8001f08:	b480      	push	{r7}
 8001f0a:	b083      	sub	sp, #12
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	4603      	mov	r3, r0
 8001f10:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == GPIO_PIN_13)
 8001f12:	88fb      	ldrh	r3, [r7, #6]
 8001f14:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f18:	d112      	bne.n	8001f40 <HAL_GPIO_EXTI_Callback+0x38>
  {
   if(mode == 1){mode = 2;}
 8001f1a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <HAL_GPIO_EXTI_Callback+0x44>)
 8001f1c:	881b      	ldrh	r3, [r3, #0]
 8001f1e:	2b01      	cmp	r3, #1
 8001f20:	d103      	bne.n	8001f2a <HAL_GPIO_EXTI_Callback+0x22>
 8001f22:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <HAL_GPIO_EXTI_Callback+0x44>)
 8001f24:	2202      	movs	r2, #2
 8001f26:	801a      	strh	r2, [r3, #0]
   else if (mode == 2){mode = 3;}
   else{mode = 1;}
  }
 }
 8001f28:	e00a      	b.n	8001f40 <HAL_GPIO_EXTI_Callback+0x38>
   else if (mode == 2){mode = 3;}
 8001f2a:	4b08      	ldr	r3, [pc, #32]	@ (8001f4c <HAL_GPIO_EXTI_Callback+0x44>)
 8001f2c:	881b      	ldrh	r3, [r3, #0]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d103      	bne.n	8001f3a <HAL_GPIO_EXTI_Callback+0x32>
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <HAL_GPIO_EXTI_Callback+0x44>)
 8001f34:	2203      	movs	r2, #3
 8001f36:	801a      	strh	r2, [r3, #0]
 }
 8001f38:	e002      	b.n	8001f40 <HAL_GPIO_EXTI_Callback+0x38>
   else{mode = 1;}
 8001f3a:	4b04      	ldr	r3, [pc, #16]	@ (8001f4c <HAL_GPIO_EXTI_Callback+0x44>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	801a      	strh	r2, [r3, #0]
 }
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	20000000 	.word	0x20000000

08001f50 <led1>:

 void led1(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_SET);}
 8001f50:	b580      	push	{r7, lr}
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	2201      	movs	r2, #1
 8001f56:	2120      	movs	r1, #32
 8001f58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f5c:	f003 f8b4 	bl	80050c8 <HAL_GPIO_WritePin>
 8001f60:	bf00      	nop
 8001f62:	bd80      	pop	{r7, pc}

08001f64 <led2>:

 void led2(){HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5,GPIO_PIN_RESET);}
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	2200      	movs	r2, #0
 8001f6a:	2120      	movs	r1, #32
 8001f6c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f70:	f003 f8aa 	bl	80050c8 <HAL_GPIO_WritePin>
 8001f74:	bf00      	nop
 8001f76:	bd80      	pop	{r7, pc}

08001f78 <led3>:

 void led3()
 {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001f7c:	2120      	movs	r1, #32
 8001f7e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001f82:	f003 f8b9 	bl	80050f8 <HAL_GPIO_TogglePin>
  HAL_Delay(500);
 8001f86:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001f8a:	f000 fbc7 	bl	800271c <HAL_Delay>
 }
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	0000      	movs	r0, r0
 8001f94:	0000      	movs	r0, r0
	...

08001f98 <avg>:




 void avg()
 {
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 	 poten1=0;
 8001f9e:	4b30      	ldr	r3, [pc, #192]	@ (8002060 <avg+0xc8>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 	 poten2=0;
 8001fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8002064 <avg+0xcc>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	601a      	str	r2, [r3, #0]
 	for (int i = 0; i <= 38; i+=2){
 8001faa:	2300      	movs	r3, #0
 8001fac:	607b      	str	r3, [r7, #4]
 8001fae:	e002      	b.n	8001fb6 <avg+0x1e>
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	3302      	adds	r3, #2
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	2b26      	cmp	r3, #38	@ 0x26
 8001fba:	ddf9      	ble.n	8001fb0 <avg+0x18>

// 		poten1 += ADC_RawRead[i];
// 		poten2 += ADC_RawRead[i+1];
 		}

          setposition =((poten2/20.0)/4095.0)*360.0;
 8001fbc:	4b29      	ldr	r3, [pc, #164]	@ (8002064 <avg+0xcc>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7fe fa7b 	bl	80004bc <__aeabi_i2d>
 8001fc6:	f04f 0200 	mov.w	r2, #0
 8001fca:	4b27      	ldr	r3, [pc, #156]	@ (8002068 <avg+0xd0>)
 8001fcc:	f7fe fc0a 	bl	80007e4 <__aeabi_ddiv>
 8001fd0:	4602      	mov	r2, r0
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	4610      	mov	r0, r2
 8001fd6:	4619      	mov	r1, r3
 8001fd8:	a31f      	add	r3, pc, #124	@ (adr r3, 8002058 <avg+0xc0>)
 8001fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fde:	f7fe fc01 	bl	80007e4 <__aeabi_ddiv>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	460b      	mov	r3, r1
 8001fe6:	4610      	mov	r0, r2
 8001fe8:	4619      	mov	r1, r3
 8001fea:	f04f 0200 	mov.w	r2, #0
 8001fee:	4b1f      	ldr	r3, [pc, #124]	@ (800206c <avg+0xd4>)
 8001ff0:	f7fe face 	bl	8000590 <__aeabi_dmul>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fd02 	bl	8000a04 <__aeabi_d2f>
 8002000:	4603      	mov	r3, r0
 8002002:	4a1b      	ldr	r2, [pc, #108]	@ (8002070 <avg+0xd8>)
 8002004:	6013      	str	r3, [r2, #0]
          position= ((poten1/20.0)/4095.0)*360.0;
 8002006:	4b16      	ldr	r3, [pc, #88]	@ (8002060 <avg+0xc8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4618      	mov	r0, r3
 800200c:	f7fe fa56 	bl	80004bc <__aeabi_i2d>
 8002010:	f04f 0200 	mov.w	r2, #0
 8002014:	4b14      	ldr	r3, [pc, #80]	@ (8002068 <avg+0xd0>)
 8002016:	f7fe fbe5 	bl	80007e4 <__aeabi_ddiv>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	a30d      	add	r3, pc, #52	@ (adr r3, 8002058 <avg+0xc0>)
 8002024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002028:	f7fe fbdc 	bl	80007e4 <__aeabi_ddiv>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	4610      	mov	r0, r2
 8002032:	4619      	mov	r1, r3
 8002034:	f04f 0200 	mov.w	r2, #0
 8002038:	4b0c      	ldr	r3, [pc, #48]	@ (800206c <avg+0xd4>)
 800203a:	f7fe faa9 	bl	8000590 <__aeabi_dmul>
 800203e:	4602      	mov	r2, r0
 8002040:	460b      	mov	r3, r1
 8002042:	4610      	mov	r0, r2
 8002044:	4619      	mov	r1, r3
 8002046:	f7fe fcdd 	bl	8000a04 <__aeabi_d2f>
 800204a:	4603      	mov	r3, r0
 800204c:	4a09      	ldr	r2, [pc, #36]	@ (8002074 <avg+0xdc>)
 800204e:	6013      	str	r3, [r2, #0]

 }
 8002050:	bf00      	nop
 8002052:	3708      	adds	r7, #8
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	00000000 	.word	0x00000000
 800205c:	40affe00 	.word	0x40affe00
 8002060:	200003fc 	.word	0x200003fc
 8002064:	20000400 	.word	0x20000400
 8002068:	40340000 	.word	0x40340000
 800206c:	40768000 	.word	0x40768000
 8002070:	200003f8 	.word	0x200003f8
 8002074:	20000404 	.word	0x20000404

08002078 <micros>:
// 		_micros += UINT32_MAX;
// 	}
// }

uint64_t micros()
{
 8002078:	b4b0      	push	{r4, r5, r7}
 800207a:	af00      	add	r7, sp, #0
	return __HAL_TIM_GET_COUNTER(&htim5)+_micros;
 800207c:	4b09      	ldr	r3, [pc, #36]	@ (80020a4 <micros+0x2c>)
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002082:	2200      	movs	r2, #0
 8002084:	4618      	mov	r0, r3
 8002086:	4611      	mov	r1, r2
 8002088:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <micros+0x30>)
 800208a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800208e:	1884      	adds	r4, r0, r2
 8002090:	eb41 0503 	adc.w	r5, r1, r3
 8002094:	4622      	mov	r2, r4
 8002096:	462b      	mov	r3, r5
}
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	46bd      	mov	sp, r7
 800209e:	bcb0      	pop	{r4, r5, r7}
 80020a0:	4770      	bx	lr
 80020a2:	bf00      	nop
 80020a4:	2000030c 	.word	0x2000030c
 80020a8:	200003f0 	.word	0x200003f0

080020ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80020ac:	b480      	push	{r7}
 80020ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80020b0:	b672      	cpsid	i
}
 80020b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80020b4:	bf00      	nop
 80020b6:	e7fd      	b.n	80020b4 <Error_Handler+0x8>

080020b8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020be:	4b0f      	ldr	r3, [pc, #60]	@ (80020fc <HAL_MspInit+0x44>)
 80020c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020c2:	4a0e      	ldr	r2, [pc, #56]	@ (80020fc <HAL_MspInit+0x44>)
 80020c4:	f043 0301 	orr.w	r3, r3, #1
 80020c8:	6613      	str	r3, [r2, #96]	@ 0x60
 80020ca:	4b0c      	ldr	r3, [pc, #48]	@ (80020fc <HAL_MspInit+0x44>)
 80020cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020ce:	f003 0301 	and.w	r3, r3, #1
 80020d2:	607b      	str	r3, [r7, #4]
 80020d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80020d6:	4b09      	ldr	r3, [pc, #36]	@ (80020fc <HAL_MspInit+0x44>)
 80020d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020da:	4a08      	ldr	r2, [pc, #32]	@ (80020fc <HAL_MspInit+0x44>)
 80020dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80020e0:	6593      	str	r3, [r2, #88]	@ 0x58
 80020e2:	4b06      	ldr	r3, [pc, #24]	@ (80020fc <HAL_MspInit+0x44>)
 80020e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80020e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80020ee:	f003 f8d9 	bl	80052a4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40021000 	.word	0x40021000

08002100 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b0a2      	sub	sp, #136	@ 0x88
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002108:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800210c:	2200      	movs	r2, #0
 800210e:	601a      	str	r2, [r3, #0]
 8002110:	605a      	str	r2, [r3, #4]
 8002112:	609a      	str	r2, [r3, #8]
 8002114:	60da      	str	r2, [r3, #12]
 8002116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002118:	f107 0320 	add.w	r3, r7, #32
 800211c:	2254      	movs	r2, #84	@ 0x54
 800211e:	2100      	movs	r1, #0
 8002120:	4618      	mov	r0, r3
 8002122:	f006 fd17 	bl	8008b54 <memset>
  if(hadc->Instance==ADC1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800212e:	d15f      	bne.n	80021f0 <HAL_ADC_MspInit+0xf0>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8002130:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002134:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002136:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 800213a:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800213c:	f107 0320 	add.w	r3, r7, #32
 8002140:	4618      	mov	r0, r3
 8002142:	f003 fded 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8002146:	4603      	mov	r3, r0
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800214c:	f7ff ffae 	bl	80020ac <Error_Handler>
    }

    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8002150:	4b4e      	ldr	r3, [pc, #312]	@ (800228c <HAL_ADC_MspInit+0x18c>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	3301      	adds	r3, #1
 8002156:	4a4d      	ldr	r2, [pc, #308]	@ (800228c <HAL_ADC_MspInit+0x18c>)
 8002158:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800215a:	4b4c      	ldr	r3, [pc, #304]	@ (800228c <HAL_ADC_MspInit+0x18c>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d10b      	bne.n	800217a <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8002162:	4b4b      	ldr	r3, [pc, #300]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 8002164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002166:	4a4a      	ldr	r2, [pc, #296]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 8002168:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800216c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800216e:	4b48      	ldr	r3, [pc, #288]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 8002170:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002172:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002176:	61fb      	str	r3, [r7, #28]
 8002178:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800217a:	4b45      	ldr	r3, [pc, #276]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 800217c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800217e:	4a44      	ldr	r2, [pc, #272]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 8002180:	f043 0301 	orr.w	r3, r3, #1
 8002184:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002186:	4b42      	ldr	r3, [pc, #264]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 8002188:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800218a:	f003 0301 	and.w	r3, r3, #1
 800218e:	61bb      	str	r3, [r7, #24]
 8002190:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002192:	4b3f      	ldr	r3, [pc, #252]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 8002194:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002196:	4a3e      	ldr	r2, [pc, #248]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 8002198:	f043 0302 	orr.w	r3, r3, #2
 800219c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800219e:	4b3c      	ldr	r3, [pc, #240]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 80021a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80021a2:	f003 0302 	and.w	r3, r3, #2
 80021a6:	617b      	str	r3, [r7, #20]
 80021a8:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PB14     ------> ADC1_IN5
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80021aa:	2301      	movs	r3, #1
 80021ac:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ae:	2303      	movs	r3, #3
 80021b0:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b2:	2300      	movs	r3, #0
 80021b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80021ba:	4619      	mov	r1, r3
 80021bc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80021c0:	f002 fe00 	bl	8004dc4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 80021c4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80021c8:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ca:	2303      	movs	r3, #3
 80021cc:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d2:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 80021d6:	4619      	mov	r1, r3
 80021d8:	482e      	ldr	r0, [pc, #184]	@ (8002294 <HAL_ADC_MspInit+0x194>)
 80021da:	f002 fdf3 	bl	8004dc4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80021de:	2200      	movs	r2, #0
 80021e0:	2100      	movs	r1, #0
 80021e2:	2012      	movs	r0, #18
 80021e4:	f002 fdb9 	bl	8004d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80021e8:	2012      	movs	r0, #18
 80021ea:	f002 fdd0 	bl	8004d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80021ee:	e049      	b.n	8002284 <HAL_ADC_MspInit+0x184>
  else if(hadc->Instance==ADC2)
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a28      	ldr	r2, [pc, #160]	@ (8002298 <HAL_ADC_MspInit+0x198>)
 80021f6:	4293      	cmp	r3, r2
 80021f8:	d144      	bne.n	8002284 <HAL_ADC_MspInit+0x184>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80021fa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80021fe:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8002200:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8002204:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002206:	f107 0320 	add.w	r3, r7, #32
 800220a:	4618      	mov	r0, r3
 800220c:	f003 fd88 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <HAL_ADC_MspInit+0x11a>
      Error_Handler();
 8002216:	f7ff ff49 	bl	80020ac <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800221a:	4b1c      	ldr	r3, [pc, #112]	@ (800228c <HAL_ADC_MspInit+0x18c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	3301      	adds	r3, #1
 8002220:	4a1a      	ldr	r2, [pc, #104]	@ (800228c <HAL_ADC_MspInit+0x18c>)
 8002222:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8002224:	4b19      	ldr	r3, [pc, #100]	@ (800228c <HAL_ADC_MspInit+0x18c>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	2b01      	cmp	r3, #1
 800222a:	d10b      	bne.n	8002244 <HAL_ADC_MspInit+0x144>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800222c:	4b18      	ldr	r3, [pc, #96]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 800222e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002230:	4a17      	ldr	r2, [pc, #92]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 8002232:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002236:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002238:	4b15      	ldr	r3, [pc, #84]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 800223a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800223c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002240:	613b      	str	r3, [r7, #16]
 8002242:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002244:	4b12      	ldr	r3, [pc, #72]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 8002246:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002248:	4a11      	ldr	r2, [pc, #68]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 800224a:	f043 0304 	orr.w	r3, r3, #4
 800224e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002250:	4b0f      	ldr	r3, [pc, #60]	@ (8002290 <HAL_ADC_MspInit+0x190>)
 8002252:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	60fb      	str	r3, [r7, #12]
 800225a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_4;
 800225c:	2314      	movs	r3, #20
 800225e:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002260:	2303      	movs	r3, #3
 8002262:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002268:	f107 0374 	add.w	r3, r7, #116	@ 0x74
 800226c:	4619      	mov	r1, r3
 800226e:	480b      	ldr	r0, [pc, #44]	@ (800229c <HAL_ADC_MspInit+0x19c>)
 8002270:	f002 fda8 	bl	8004dc4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002274:	2200      	movs	r2, #0
 8002276:	2100      	movs	r1, #0
 8002278:	2012      	movs	r0, #18
 800227a:	f002 fd6e 	bl	8004d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800227e:	2012      	movs	r0, #18
 8002280:	f002 fd85 	bl	8004d8e <HAL_NVIC_EnableIRQ>
}
 8002284:	bf00      	nop
 8002286:	3788      	adds	r7, #136	@ 0x88
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	20000418 	.word	0x20000418
 8002290:	40021000 	.word	0x40021000
 8002294:	48000400 	.word	0x48000400
 8002298:	50000100 	.word	0x50000100
 800229c:	48000800 	.word	0x48000800

080022a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b09e      	sub	sp, #120	@ 0x78
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022a8:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80022ac:	2200      	movs	r2, #0
 80022ae:	601a      	str	r2, [r3, #0]
 80022b0:	605a      	str	r2, [r3, #4]
 80022b2:	609a      	str	r2, [r3, #8]
 80022b4:	60da      	str	r2, [r3, #12]
 80022b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022b8:	f107 0310 	add.w	r3, r7, #16
 80022bc:	2254      	movs	r2, #84	@ 0x54
 80022be:	2100      	movs	r1, #0
 80022c0:	4618      	mov	r0, r3
 80022c2:	f006 fc47 	bl	8008b54 <memset>
  if(huart->Instance==LPUART1)
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	4a1f      	ldr	r2, [pc, #124]	@ (8002348 <HAL_UART_MspInit+0xa8>)
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d136      	bne.n	800233e <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80022d0:	2320      	movs	r3, #32
 80022d2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022d8:	f107 0310 	add.w	r3, r7, #16
 80022dc:	4618      	mov	r0, r3
 80022de:	f003 fd1f 	bl	8005d20 <HAL_RCCEx_PeriphCLKConfig>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d001      	beq.n	80022ec <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80022e8:	f7ff fee0 	bl	80020ac <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80022ec:	4b17      	ldr	r3, [pc, #92]	@ (800234c <HAL_UART_MspInit+0xac>)
 80022ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022f0:	4a16      	ldr	r2, [pc, #88]	@ (800234c <HAL_UART_MspInit+0xac>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80022f8:	4b14      	ldr	r3, [pc, #80]	@ (800234c <HAL_UART_MspInit+0xac>)
 80022fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80022fc:	f003 0301 	and.w	r3, r3, #1
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002304:	4b11      	ldr	r3, [pc, #68]	@ (800234c <HAL_UART_MspInit+0xac>)
 8002306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002308:	4a10      	ldr	r2, [pc, #64]	@ (800234c <HAL_UART_MspInit+0xac>)
 800230a:	f043 0301 	orr.w	r3, r3, #1
 800230e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002310:	4b0e      	ldr	r3, [pc, #56]	@ (800234c <HAL_UART_MspInit+0xac>)
 8002312:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002314:	f003 0301 	and.w	r3, r3, #1
 8002318:	60bb      	str	r3, [r7, #8]
 800231a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800231c:	230c      	movs	r3, #12
 800231e:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800232c:	230c      	movs	r3, #12
 800232e:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002330:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8002334:	4619      	mov	r1, r3
 8002336:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800233a:	f002 fd43 	bl	8004dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 800233e:	bf00      	nop
 8002340:	3778      	adds	r7, #120	@ 0x78
 8002342:	46bd      	mov	sp, r7
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40008000 	.word	0x40008000
 800234c:	40021000 	.word	0x40021000

08002350 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b086      	sub	sp, #24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a1f      	ldr	r2, [pc, #124]	@ (80023dc <HAL_TIM_Base_MspInit+0x8c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d10c      	bne.n	800237c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002362:	4b1f      	ldr	r3, [pc, #124]	@ (80023e0 <HAL_TIM_Base_MspInit+0x90>)
 8002364:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002366:	4a1e      	ldr	r2, [pc, #120]	@ (80023e0 <HAL_TIM_Base_MspInit+0x90>)
 8002368:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800236c:	6613      	str	r3, [r2, #96]	@ 0x60
 800236e:	4b1c      	ldr	r3, [pc, #112]	@ (80023e0 <HAL_TIM_Base_MspInit+0x90>)
 8002370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002372:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002376:	617b      	str	r3, [r7, #20]
 8002378:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800237a:	e02a      	b.n	80023d2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002384:	d10c      	bne.n	80023a0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002386:	4b16      	ldr	r3, [pc, #88]	@ (80023e0 <HAL_TIM_Base_MspInit+0x90>)
 8002388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800238a:	4a15      	ldr	r2, [pc, #84]	@ (80023e0 <HAL_TIM_Base_MspInit+0x90>)
 800238c:	f043 0301 	orr.w	r3, r3, #1
 8002390:	6593      	str	r3, [r2, #88]	@ 0x58
 8002392:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <HAL_TIM_Base_MspInit+0x90>)
 8002394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	613b      	str	r3, [r7, #16]
 800239c:	693b      	ldr	r3, [r7, #16]
}
 800239e:	e018      	b.n	80023d2 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM5)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a0f      	ldr	r2, [pc, #60]	@ (80023e4 <HAL_TIM_Base_MspInit+0x94>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d113      	bne.n	80023d2 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80023aa:	4b0d      	ldr	r3, [pc, #52]	@ (80023e0 <HAL_TIM_Base_MspInit+0x90>)
 80023ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ae:	4a0c      	ldr	r2, [pc, #48]	@ (80023e0 <HAL_TIM_Base_MspInit+0x90>)
 80023b0:	f043 0308 	orr.w	r3, r3, #8
 80023b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80023b6:	4b0a      	ldr	r3, [pc, #40]	@ (80023e0 <HAL_TIM_Base_MspInit+0x90>)
 80023b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80023ba:	f003 0308 	and.w	r3, r3, #8
 80023be:	60fb      	str	r3, [r7, #12]
 80023c0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80023c2:	2200      	movs	r2, #0
 80023c4:	2100      	movs	r1, #0
 80023c6:	2032      	movs	r0, #50	@ 0x32
 80023c8:	f002 fcc7 	bl	8004d5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80023cc:	2032      	movs	r0, #50	@ 0x32
 80023ce:	f002 fcde 	bl	8004d8e <HAL_NVIC_EnableIRQ>
}
 80023d2:	bf00      	nop
 80023d4:	3718      	adds	r7, #24
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop
 80023dc:	40012c00 	.word	0x40012c00
 80023e0:	40021000 	.word	0x40021000
 80023e4:	40000c00 	.word	0x40000c00

080023e8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	@ 0x28
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f0:	f107 0314 	add.w	r3, r7, #20
 80023f4:	2200      	movs	r2, #0
 80023f6:	601a      	str	r2, [r3, #0]
 80023f8:	605a      	str	r2, [r3, #4]
 80023fa:	609a      	str	r2, [r3, #8]
 80023fc:	60da      	str	r2, [r3, #12]
 80023fe:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a17      	ldr	r2, [pc, #92]	@ (8002464 <HAL_TIM_Encoder_MspInit+0x7c>)
 8002406:	4293      	cmp	r3, r2
 8002408:	d128      	bne.n	800245c <HAL_TIM_Encoder_MspInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800240a:	4b17      	ldr	r3, [pc, #92]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x80>)
 800240c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800240e:	4a16      	ldr	r2, [pc, #88]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x80>)
 8002410:	f043 0302 	orr.w	r3, r3, #2
 8002414:	6593      	str	r3, [r2, #88]	@ 0x58
 8002416:	4b14      	ldr	r3, [pc, #80]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x80>)
 8002418:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	613b      	str	r3, [r7, #16]
 8002420:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002422:	4b11      	ldr	r3, [pc, #68]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x80>)
 8002424:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002426:	4a10      	ldr	r2, [pc, #64]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x80>)
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800242e:	4b0e      	ldr	r3, [pc, #56]	@ (8002468 <HAL_TIM_Encoder_MspInit+0x80>)
 8002430:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002432:	f003 0301 	and.w	r3, r3, #1
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800243a:	23c0      	movs	r3, #192	@ 0xc0
 800243c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800243e:	2302      	movs	r3, #2
 8002440:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002442:	2300      	movs	r3, #0
 8002444:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002446:	2300      	movs	r3, #0
 8002448:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800244a:	2302      	movs	r3, #2
 800244c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800244e:	f107 0314 	add.w	r3, r7, #20
 8002452:	4619      	mov	r1, r3
 8002454:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002458:	f002 fcb4 	bl	8004dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800245c:	bf00      	nop
 800245e:	3728      	adds	r7, #40	@ 0x28
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40000400 	.word	0x40000400
 8002468:	40021000 	.word	0x40021000

0800246c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b08a      	sub	sp, #40	@ 0x28
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002474:	f107 0314 	add.w	r3, r7, #20
 8002478:	2200      	movs	r2, #0
 800247a:	601a      	str	r2, [r3, #0]
 800247c:	605a      	str	r2, [r3, #4]
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	60da      	str	r2, [r3, #12]
 8002482:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	4a23      	ldr	r2, [pc, #140]	@ (8002518 <HAL_TIM_MspPostInit+0xac>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d11c      	bne.n	80024c8 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800248e:	4b23      	ldr	r3, [pc, #140]	@ (800251c <HAL_TIM_MspPostInit+0xb0>)
 8002490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002492:	4a22      	ldr	r2, [pc, #136]	@ (800251c <HAL_TIM_MspPostInit+0xb0>)
 8002494:	f043 0304 	orr.w	r3, r3, #4
 8002498:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800249a:	4b20      	ldr	r3, [pc, #128]	@ (800251c <HAL_TIM_MspPostInit+0xb0>)
 800249c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800249e:	f003 0304 	and.w	r3, r3, #4
 80024a2:	613b      	str	r3, [r7, #16]
 80024a4:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PC0     ------> TIM1_CH1
    PC1     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80024a6:	2303      	movs	r3, #3
 80024a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80024b6:	2302      	movs	r3, #2
 80024b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ba:	f107 0314 	add.w	r3, r7, #20
 80024be:	4619      	mov	r1, r3
 80024c0:	4817      	ldr	r0, [pc, #92]	@ (8002520 <HAL_TIM_MspPostInit+0xb4>)
 80024c2:	f002 fc7f 	bl	8004dc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80024c6:	e022      	b.n	800250e <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM2)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024d0:	d11d      	bne.n	800250e <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024d2:	4b12      	ldr	r3, [pc, #72]	@ (800251c <HAL_TIM_MspPostInit+0xb0>)
 80024d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024d6:	4a11      	ldr	r2, [pc, #68]	@ (800251c <HAL_TIM_MspPostInit+0xb0>)
 80024d8:	f043 0301 	orr.w	r3, r3, #1
 80024dc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80024de:	4b0f      	ldr	r3, [pc, #60]	@ (800251c <HAL_TIM_MspPostInit+0xb0>)
 80024e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024e2:	f003 0301 	and.w	r3, r3, #1
 80024e6:	60fb      	str	r3, [r7, #12]
 80024e8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 80024ea:	f248 0302 	movw	r3, #32770	@ 0x8002
 80024ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f0:	2302      	movs	r3, #2
 80024f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024f8:	2300      	movs	r3, #0
 80024fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024fc:	2301      	movs	r3, #1
 80024fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002500:	f107 0314 	add.w	r3, r7, #20
 8002504:	4619      	mov	r1, r3
 8002506:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800250a:	f002 fc5b 	bl	8004dc4 <HAL_GPIO_Init>
}
 800250e:	bf00      	nop
 8002510:	3728      	adds	r7, #40	@ 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	40012c00 	.word	0x40012c00
 800251c:	40021000 	.word	0x40021000
 8002520:	48000800 	.word	0x48000800

08002524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002524:	b480      	push	{r7}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002528:	bf00      	nop
 800252a:	e7fd      	b.n	8002528 <NMI_Handler+0x4>

0800252c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002530:	bf00      	nop
 8002532:	e7fd      	b.n	8002530 <HardFault_Handler+0x4>

08002534 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002534:	b480      	push	{r7}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002538:	bf00      	nop
 800253a:	e7fd      	b.n	8002538 <MemManage_Handler+0x4>

0800253c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002540:	bf00      	nop
 8002542:	e7fd      	b.n	8002540 <BusFault_Handler+0x4>

08002544 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002548:	bf00      	nop
 800254a:	e7fd      	b.n	8002548 <UsageFault_Handler+0x4>

0800254c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800254c:	b480      	push	{r7}
 800254e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	46bd      	mov	sp, r7
 8002554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002558:	4770      	bx	lr

0800255a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800255a:	b480      	push	{r7}
 800255c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800255e:	bf00      	nop
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr

08002568 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800256c:	bf00      	nop
 800256e:	46bd      	mov	sp, r7
 8002570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002574:	4770      	bx	lr

08002576 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800257a:	f000 f8b1 	bl	80026e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800257e:	bf00      	nop
 8002580:	bd80      	pop	{r7, pc}
	...

08002584 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002588:	4803      	ldr	r0, [pc, #12]	@ (8002598 <ADC1_2_IRQHandler+0x14>)
 800258a:	f001 f8b7 	bl	80036fc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 800258e:	4803      	ldr	r0, [pc, #12]	@ (800259c <ADC1_2_IRQHandler+0x18>)
 8002590:	f001 f8b4 	bl	80036fc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}
 8002598:	200000bc 	.word	0x200000bc
 800259c:	20000128 	.word	0x20000128

080025a0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80025a4:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80025a8:	f002 fdc0 	bl	800512c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80025b4:	4802      	ldr	r0, [pc, #8]	@ (80025c0 <TIM5_IRQHandler+0x10>)
 80025b6:	f004 f9e9 	bl	800698c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80025ba:	bf00      	nop
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	2000030c 	.word	0x2000030c

080025c4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025c8:	4b06      	ldr	r3, [pc, #24]	@ (80025e4 <SystemInit+0x20>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ce:	4a05      	ldr	r2, [pc, #20]	@ (80025e4 <SystemInit+0x20>)
 80025d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80025d8:	bf00      	nop
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	e000ed00 	.word	0xe000ed00

080025e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80025e8:	480d      	ldr	r0, [pc, #52]	@ (8002620 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80025ea:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 80025ec:	f7ff ffea 	bl	80025c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80025f0:	480c      	ldr	r0, [pc, #48]	@ (8002624 <LoopForever+0x6>)
  ldr r1, =_edata
 80025f2:	490d      	ldr	r1, [pc, #52]	@ (8002628 <LoopForever+0xa>)
  ldr r2, =_sidata
 80025f4:	4a0d      	ldr	r2, [pc, #52]	@ (800262c <LoopForever+0xe>)
  movs r3, #0
 80025f6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80025f8:	e002      	b.n	8002600 <LoopCopyDataInit>

080025fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025fe:	3304      	adds	r3, #4

08002600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002604:	d3f9      	bcc.n	80025fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002606:	4a0a      	ldr	r2, [pc, #40]	@ (8002630 <LoopForever+0x12>)
  ldr r4, =_ebss
 8002608:	4c0a      	ldr	r4, [pc, #40]	@ (8002634 <LoopForever+0x16>)
  movs r3, #0
 800260a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800260c:	e001      	b.n	8002612 <LoopFillZerobss>

0800260e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800260e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002610:	3204      	adds	r2, #4

08002612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002614:	d3fb      	bcc.n	800260e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002616:	f006 faa5 	bl	8008b64 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800261a:	f7fe fbbd 	bl	8000d98 <main>

0800261e <LoopForever>:

LoopForever:
    b LoopForever
 800261e:	e7fe      	b.n	800261e <LoopForever>
  ldr   r0, =_estack
 8002620:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002624:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002628:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800262c:	08008c14 	.word	0x08008c14
  ldr r2, =_sbss
 8002630:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8002634:	20000420 	.word	0x20000420

08002638 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002638:	e7fe      	b.n	8002638 <ADC3_IRQHandler>

0800263a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002640:	2300      	movs	r3, #0
 8002642:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002644:	2003      	movs	r0, #3
 8002646:	f002 fb7d 	bl	8004d44 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800264a:	2000      	movs	r0, #0
 800264c:	f000 f80e 	bl	800266c <HAL_InitTick>
 8002650:	4603      	mov	r3, r0
 8002652:	2b00      	cmp	r3, #0
 8002654:	d002      	beq.n	800265c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002656:	2301      	movs	r3, #1
 8002658:	71fb      	strb	r3, [r7, #7]
 800265a:	e001      	b.n	8002660 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800265c:	f7ff fd2c 	bl	80020b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002660:	79fb      	ldrb	r3, [r7, #7]

}
 8002662:	4618      	mov	r0, r3
 8002664:	3708      	adds	r7, #8
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}
	...

0800266c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b084      	sub	sp, #16
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002678:	4b16      	ldr	r3, [pc, #88]	@ (80026d4 <HAL_InitTick+0x68>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d022      	beq.n	80026c6 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002680:	4b15      	ldr	r3, [pc, #84]	@ (80026d8 <HAL_InitTick+0x6c>)
 8002682:	681a      	ldr	r2, [r3, #0]
 8002684:	4b13      	ldr	r3, [pc, #76]	@ (80026d4 <HAL_InitTick+0x68>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800268c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002690:	fbb2 f3f3 	udiv	r3, r2, r3
 8002694:	4618      	mov	r0, r3
 8002696:	f002 fb88 	bl	8004daa <HAL_SYSTICK_Config>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d10f      	bne.n	80026c0 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2b0f      	cmp	r3, #15
 80026a4:	d809      	bhi.n	80026ba <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80026a6:	2200      	movs	r2, #0
 80026a8:	6879      	ldr	r1, [r7, #4]
 80026aa:	f04f 30ff 	mov.w	r0, #4294967295
 80026ae:	f002 fb54 	bl	8004d5a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80026b2:	4a0a      	ldr	r2, [pc, #40]	@ (80026dc <HAL_InitTick+0x70>)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6013      	str	r3, [r2, #0]
 80026b8:	e007      	b.n	80026ca <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80026ba:	2301      	movs	r3, #1
 80026bc:	73fb      	strb	r3, [r7, #15]
 80026be:	e004      	b.n	80026ca <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	73fb      	strb	r3, [r7, #15]
 80026c4:	e001      	b.n	80026ca <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80026ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80026cc:	4618      	mov	r0, r3
 80026ce:	3710      	adds	r7, #16
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}
 80026d4:	2000009c 	.word	0x2000009c
 80026d8:	20000094 	.word	0x20000094
 80026dc:	20000098 	.word	0x20000098

080026e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026e0:	b480      	push	{r7}
 80026e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026e4:	4b05      	ldr	r3, [pc, #20]	@ (80026fc <HAL_IncTick+0x1c>)
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	4b05      	ldr	r3, [pc, #20]	@ (8002700 <HAL_IncTick+0x20>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a03      	ldr	r2, [pc, #12]	@ (80026fc <HAL_IncTick+0x1c>)
 80026f0:	6013      	str	r3, [r2, #0]
}
 80026f2:	bf00      	nop
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr
 80026fc:	2000041c 	.word	0x2000041c
 8002700:	2000009c 	.word	0x2000009c

08002704 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  return uwTick;
 8002708:	4b03      	ldr	r3, [pc, #12]	@ (8002718 <HAL_GetTick+0x14>)
 800270a:	681b      	ldr	r3, [r3, #0]
}
 800270c:	4618      	mov	r0, r3
 800270e:	46bd      	mov	sp, r7
 8002710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002714:	4770      	bx	lr
 8002716:	bf00      	nop
 8002718:	2000041c 	.word	0x2000041c

0800271c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002724:	f7ff ffee 	bl	8002704 <HAL_GetTick>
 8002728:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002734:	d004      	beq.n	8002740 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002736:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_Delay+0x40>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68fa      	ldr	r2, [r7, #12]
 800273c:	4413      	add	r3, r2
 800273e:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002740:	bf00      	nop
 8002742:	f7ff ffdf 	bl	8002704 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	68bb      	ldr	r3, [r7, #8]
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	68fa      	ldr	r2, [r7, #12]
 800274e:	429a      	cmp	r2, r3
 8002750:	d8f7      	bhi.n	8002742 <HAL_Delay+0x26>
  {
  }
}
 8002752:	bf00      	nop
 8002754:	bf00      	nop
 8002756:	3710      	adds	r7, #16
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	2000009c 	.word	0x2000009c

08002760 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
 8002768:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002772:	683b      	ldr	r3, [r7, #0]
 8002774:	431a      	orrs	r2, r3
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	609a      	str	r2, [r3, #8]
}
 800277a:	bf00      	nop
 800277c:	370c      	adds	r7, #12
 800277e:	46bd      	mov	sp, r7
 8002780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002784:	4770      	bx	lr

08002786 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002786:	b480      	push	{r7}
 8002788:	b083      	sub	sp, #12
 800278a:	af00      	add	r7, sp, #0
 800278c:	6078      	str	r0, [r7, #4]
 800278e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	431a      	orrs	r2, r3
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	609a      	str	r2, [r3, #8]
}
 80027a0:	bf00      	nop
 80027a2:	370c      	adds	r7, #12
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80027ac:	b480      	push	{r7}
 80027ae:	b083      	sub	sp, #12
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 80027bc:	4618      	mov	r0, r3
 80027be:	370c      	adds	r7, #12
 80027c0:	46bd      	mov	sp, r7
 80027c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c6:	4770      	bx	lr

080027c8 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b087      	sub	sp, #28
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	60f8      	str	r0, [r7, #12]
 80027d0:	60b9      	str	r1, [r7, #8]
 80027d2:	607a      	str	r2, [r7, #4]
 80027d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	3360      	adds	r3, #96	@ 0x60
 80027da:	461a      	mov	r2, r3
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	4413      	add	r3, r2
 80027e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	681a      	ldr	r2, [r3, #0]
 80027e8:	4b08      	ldr	r3, [pc, #32]	@ (800280c <LL_ADC_SetOffset+0x44>)
 80027ea:	4013      	ands	r3, r2
 80027ec:	687a      	ldr	r2, [r7, #4]
 80027ee:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	430a      	orrs	r2, r1
 80027f6:	4313      	orrs	r3, r2
 80027f8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002800:	bf00      	nop
 8002802:	371c      	adds	r7, #28
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	03fff000 	.word	0x03fff000

08002810 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	3360      	adds	r3, #96	@ 0x60
 800281e:	461a      	mov	r2, r3
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	4413      	add	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002830:	4618      	mov	r0, r3
 8002832:	3714      	adds	r7, #20
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr

0800283c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	3360      	adds	r3, #96	@ 0x60
 800284c:	461a      	mov	r2, r3
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	4413      	add	r3, r2
 8002854:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	431a      	orrs	r2, r3
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002866:	bf00      	nop
 8002868:	371c      	adds	r7, #28
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr

08002872 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002872:	b480      	push	{r7}
 8002874:	b087      	sub	sp, #28
 8002876:	af00      	add	r7, sp, #0
 8002878:	60f8      	str	r0, [r7, #12]
 800287a:	60b9      	str	r1, [r7, #8]
 800287c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	3360      	adds	r3, #96	@ 0x60
 8002882:	461a      	mov	r2, r3
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	431a      	orrs	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800289c:	bf00      	nop
 800289e:	371c      	adds	r7, #28
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr

080028a8 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b087      	sub	sp, #28
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	60f8      	str	r0, [r7, #12]
 80028b0:	60b9      	str	r1, [r7, #8]
 80028b2:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	3360      	adds	r3, #96	@ 0x60
 80028b8:	461a      	mov	r2, r3
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	009b      	lsls	r3, r3, #2
 80028be:	4413      	add	r3, r2
 80028c0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	431a      	orrs	r2, r3
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80028d2:	bf00      	nop
 80028d4:	371c      	adds	r7, #28
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
 80028e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	695b      	ldr	r3, [r3, #20]
 80028ec:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	431a      	orrs	r2, r3
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	615a      	str	r2, [r3, #20]
}
 80028f8:	bf00      	nop
 80028fa:	370c      	adds	r7, #12
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr

08002904 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002918:	2301      	movs	r3, #1
 800291a:	e000      	b.n	800291e <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 800291c:	2300      	movs	r3, #0
}
 800291e:	4618      	mov	r0, r3
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800292a:	b480      	push	{r7}
 800292c:	b087      	sub	sp, #28
 800292e:	af00      	add	r7, sp, #0
 8002930:	60f8      	str	r0, [r7, #12]
 8002932:	60b9      	str	r1, [r7, #8]
 8002934:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	3330      	adds	r3, #48	@ 0x30
 800293a:	461a      	mov	r2, r3
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	0a1b      	lsrs	r3, r3, #8
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	f003 030c 	and.w	r3, r3, #12
 8002946:	4413      	add	r3, r2
 8002948:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	681a      	ldr	r2, [r3, #0]
 800294e:	68bb      	ldr	r3, [r7, #8]
 8002950:	f003 031f 	and.w	r3, r3, #31
 8002954:	211f      	movs	r1, #31
 8002956:	fa01 f303 	lsl.w	r3, r1, r3
 800295a:	43db      	mvns	r3, r3
 800295c:	401a      	ands	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	0e9b      	lsrs	r3, r3, #26
 8002962:	f003 011f 	and.w	r1, r3, #31
 8002966:	68bb      	ldr	r3, [r7, #8]
 8002968:	f003 031f 	and.w	r3, r3, #31
 800296c:	fa01 f303 	lsl.w	r3, r1, r3
 8002970:	431a      	orrs	r2, r3
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002976:	bf00      	nop
 8002978:	371c      	adds	r7, #28
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr

08002982 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002982:	b480      	push	{r7}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800298e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002996:	2301      	movs	r3, #1
 8002998:	e000      	b.n	800299c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b087      	sub	sp, #28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	60f8      	str	r0, [r7, #12]
 80029b0:	60b9      	str	r1, [r7, #8]
 80029b2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	3314      	adds	r3, #20
 80029b8:	461a      	mov	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	0e5b      	lsrs	r3, r3, #25
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	f003 0304 	and.w	r3, r3, #4
 80029c4:	4413      	add	r3, r2
 80029c6:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80029c8:	697b      	ldr	r3, [r7, #20]
 80029ca:	681a      	ldr	r2, [r3, #0]
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	0d1b      	lsrs	r3, r3, #20
 80029d0:	f003 031f 	and.w	r3, r3, #31
 80029d4:	2107      	movs	r1, #7
 80029d6:	fa01 f303 	lsl.w	r3, r1, r3
 80029da:	43db      	mvns	r3, r3
 80029dc:	401a      	ands	r2, r3
 80029de:	68bb      	ldr	r3, [r7, #8]
 80029e0:	0d1b      	lsrs	r3, r3, #20
 80029e2:	f003 031f 	and.w	r3, r3, #31
 80029e6:	6879      	ldr	r1, [r7, #4]
 80029e8:	fa01 f303 	lsl.w	r3, r1, r3
 80029ec:	431a      	orrs	r2, r3
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr
	...

08002a00 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	60f8      	str	r0, [r7, #12]
 8002a08:	60b9      	str	r1, [r7, #8]
 8002a0a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a18:	43db      	mvns	r3, r3
 8002a1a:	401a      	ands	r2, r3
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0318 	and.w	r3, r3, #24
 8002a22:	4908      	ldr	r1, [pc, #32]	@ (8002a44 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002a24:	40d9      	lsrs	r1, r3
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	400b      	ands	r3, r1
 8002a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a2e:	431a      	orrs	r2, r3
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8002a36:	bf00      	nop
 8002a38:	3714      	adds	r7, #20
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	0007ffff 	.word	0x0007ffff

08002a48 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b083      	sub	sp, #12
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	689b      	ldr	r3, [r3, #8]
 8002a54:	f003 031f 	and.w	r3, r3, #31
}
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8002a74:	4618      	mov	r0, r3
 8002a76:	370c      	adds	r7, #12
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b083      	sub	sp, #12
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	689b      	ldr	r3, [r3, #8]
 8002a8c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8002a90:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6093      	str	r3, [r2, #8]
}
 8002a98:	bf00      	nop
 8002a9a:	370c      	adds	r7, #12
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa2:	4770      	bx	lr

08002aa4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b083      	sub	sp, #12
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002ab4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002ab8:	d101      	bne.n	8002abe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002aba:	2301      	movs	r3, #1
 8002abc:	e000      	b.n	8002ac0 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	370c      	adds	r7, #12
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002adc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002ae0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002b08:	d101      	bne.n	8002b0e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002b0e:	2300      	movs	r3, #0
}
 8002b10:	4618      	mov	r0, r3
 8002b12:	370c      	adds	r7, #12
 8002b14:	46bd      	mov	sp, r7
 8002b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1a:	4770      	bx	lr

08002b1c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b2c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b30:	f043 0201 	orr.w	r2, r3, #1
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr

08002b44 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	689b      	ldr	r3, [r3, #8]
 8002b50:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002b54:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002b58:	f043 0202 	orr.w	r2, r3, #2
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	f003 0301 	and.w	r3, r3, #1
 8002b7c:	2b01      	cmp	r3, #1
 8002b7e:	d101      	bne.n	8002b84 <LL_ADC_IsEnabled+0x18>
 8002b80:	2301      	movs	r3, #1
 8002b82:	e000      	b.n	8002b86 <LL_ADC_IsEnabled+0x1a>
 8002b84:	2300      	movs	r3, #0
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	370c      	adds	r7, #12
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b90:	4770      	bx	lr

08002b92 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b083      	sub	sp, #12
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 0302 	and.w	r3, r3, #2
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d101      	bne.n	8002baa <LL_ADC_IsDisableOngoing+0x18>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e000      	b.n	8002bac <LL_ADC_IsDisableOngoing+0x1a>
 8002baa:	2300      	movs	r3, #0
}
 8002bac:	4618      	mov	r0, r3
 8002bae:	370c      	adds	r7, #12
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	689b      	ldr	r3, [r3, #8]
 8002bc4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bc8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bcc:	f043 0204 	orr.w	r2, r3, #4
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002bd4:	bf00      	nop
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002bf0:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002bf4:	f043 0210 	orr.w	r2, r3, #16
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 8002bfc:	bf00      	nop
 8002bfe:	370c      	adds	r7, #12
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr

08002c08 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	f003 0304 	and.w	r3, r3, #4
 8002c18:	2b04      	cmp	r3, #4
 8002c1a:	d101      	bne.n	8002c20 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	e000      	b.n	8002c22 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <LL_ADC_INJ_StopConversion>:
  * @rmtoll CR       JADSTP         LL_ADC_INJ_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_INJ_StopConversion(ADC_TypeDef *ADCx)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002c3e:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002c42:	f043 0220 	orr.w	r2, r3, #32
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_JADSTP);
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr

08002c56 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002c56:	b480      	push	{r7}
 8002c58:	b083      	sub	sp, #12
 8002c5a:	af00      	add	r7, sp, #0
 8002c5c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	f003 0308 	and.w	r3, r3, #8
 8002c66:	2b08      	cmp	r3, #8
 8002c68:	d101      	bne.n	8002c6e <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e000      	b.n	8002c70 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002c6e:	2300      	movs	r3, #0
}
 8002c70:	4618      	mov	r0, r3
 8002c72:	370c      	adds	r7, #12
 8002c74:	46bd      	mov	sp, r7
 8002c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7a:	4770      	bx	lr

08002c7c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c7c:	b590      	push	{r4, r7, lr}
 8002c7e:	b089      	sub	sp, #36	@ 0x24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c84:	2300      	movs	r3, #0
 8002c86:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d101      	bne.n	8002c96 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e1a9      	b.n	8002fea <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d109      	bne.n	8002cb8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f7ff fa2b 	bl	8002100 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff fef1 	bl	8002aa4 <LL_ADC_IsDeepPowerDownEnabled>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d004      	beq.n	8002cd2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4618      	mov	r0, r3
 8002cce:	f7ff fed7 	bl	8002a80 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff ff0c 	bl	8002af4 <LL_ADC_IsInternalRegulatorEnabled>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d115      	bne.n	8002d0e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f7ff fef0 	bl	8002acc <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002cec:	4b9c      	ldr	r3, [pc, #624]	@ (8002f60 <HAL_ADC_Init+0x2e4>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	099b      	lsrs	r3, r3, #6
 8002cf2:	4a9c      	ldr	r2, [pc, #624]	@ (8002f64 <HAL_ADC_Init+0x2e8>)
 8002cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8002cf8:	099b      	lsrs	r3, r3, #6
 8002cfa:	3301      	adds	r3, #1
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d00:	e002      	b.n	8002d08 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	3b01      	subs	r3, #1
 8002d06:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f9      	bne.n	8002d02 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4618      	mov	r0, r3
 8002d14:	f7ff feee 	bl	8002af4 <LL_ADC_IsInternalRegulatorEnabled>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d10d      	bne.n	8002d3a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d22:	f043 0210 	orr.w	r2, r3, #16
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002d2e:	f043 0201 	orr.w	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f7ff ff62 	bl	8002c08 <LL_ADC_REG_IsConversionOngoing>
 8002d44:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d4a:	f003 0310 	and.w	r3, r3, #16
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	f040 8142 	bne.w	8002fd8 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d54:	697b      	ldr	r3, [r7, #20]
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	f040 813e 	bne.w	8002fd8 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d60:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8002d64:	f043 0202 	orr.w	r2, r3, #2
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fefb 	bl	8002b6c <LL_ADC_IsEnabled>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d141      	bne.n	8002e00 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002d84:	d004      	beq.n	8002d90 <HAL_ADC_Init+0x114>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a77      	ldr	r2, [pc, #476]	@ (8002f68 <HAL_ADC_Init+0x2ec>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d10f      	bne.n	8002db0 <HAL_ADC_Init+0x134>
 8002d90:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8002d94:	f7ff feea 	bl	8002b6c <LL_ADC_IsEnabled>
 8002d98:	4604      	mov	r4, r0
 8002d9a:	4873      	ldr	r0, [pc, #460]	@ (8002f68 <HAL_ADC_Init+0x2ec>)
 8002d9c:	f7ff fee6 	bl	8002b6c <LL_ADC_IsEnabled>
 8002da0:	4603      	mov	r3, r0
 8002da2:	4323      	orrs	r3, r4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	bf0c      	ite	eq
 8002da8:	2301      	moveq	r3, #1
 8002daa:	2300      	movne	r3, #0
 8002dac:	b2db      	uxtb	r3, r3
 8002dae:	e012      	b.n	8002dd6 <HAL_ADC_Init+0x15a>
 8002db0:	486e      	ldr	r0, [pc, #440]	@ (8002f6c <HAL_ADC_Init+0x2f0>)
 8002db2:	f7ff fedb 	bl	8002b6c <LL_ADC_IsEnabled>
 8002db6:	4604      	mov	r4, r0
 8002db8:	486d      	ldr	r0, [pc, #436]	@ (8002f70 <HAL_ADC_Init+0x2f4>)
 8002dba:	f7ff fed7 	bl	8002b6c <LL_ADC_IsEnabled>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	431c      	orrs	r4, r3
 8002dc2:	486c      	ldr	r0, [pc, #432]	@ (8002f74 <HAL_ADC_Init+0x2f8>)
 8002dc4:	f7ff fed2 	bl	8002b6c <LL_ADC_IsEnabled>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	4323      	orrs	r3, r4
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	bf0c      	ite	eq
 8002dd0:	2301      	moveq	r3, #1
 8002dd2:	2300      	movne	r3, #0
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d012      	beq.n	8002e00 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002de2:	d004      	beq.n	8002dee <HAL_ADC_Init+0x172>
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	4a5f      	ldr	r2, [pc, #380]	@ (8002f68 <HAL_ADC_Init+0x2ec>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d101      	bne.n	8002df2 <HAL_ADC_Init+0x176>
 8002dee:	4a62      	ldr	r2, [pc, #392]	@ (8002f78 <HAL_ADC_Init+0x2fc>)
 8002df0:	e000      	b.n	8002df4 <HAL_ADC_Init+0x178>
 8002df2:	4a62      	ldr	r2, [pc, #392]	@ (8002f7c <HAL_ADC_Init+0x300>)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	4619      	mov	r1, r3
 8002dfa:	4610      	mov	r0, r2
 8002dfc:	f7ff fcb0 	bl	8002760 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	7f5b      	ldrb	r3, [r3, #29]
 8002e04:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e0a:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002e10:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8002e16:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e1e:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e20:	4313      	orrs	r3, r2
 8002e22:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002e2a:	2b01      	cmp	r3, #1
 8002e2c:	d106      	bne.n	8002e3c <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e32:	3b01      	subs	r3, #1
 8002e34:	045b      	lsls	r3, r3, #17
 8002e36:	69ba      	ldr	r2, [r7, #24]
 8002e38:	4313      	orrs	r3, r2
 8002e3a:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d009      	beq.n	8002e58 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e48:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e50:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002e52:	69ba      	ldr	r2, [r7, #24]
 8002e54:	4313      	orrs	r3, r2
 8002e56:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	68da      	ldr	r2, [r3, #12]
 8002e5e:	4b48      	ldr	r3, [pc, #288]	@ (8002f80 <HAL_ADC_Init+0x304>)
 8002e60:	4013      	ands	r3, r2
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	6812      	ldr	r2, [r2, #0]
 8002e66:	69b9      	ldr	r1, [r7, #24]
 8002e68:	430b      	orrs	r3, r1
 8002e6a:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	691b      	ldr	r3, [r3, #16]
 8002e72:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	430a      	orrs	r2, r1
 8002e80:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4618      	mov	r0, r3
 8002e88:	f7ff fee5 	bl	8002c56 <LL_ADC_INJ_IsConversionOngoing>
 8002e8c:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d17f      	bne.n	8002f94 <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d17c      	bne.n	8002f94 <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e9e:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002ea6:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	68db      	ldr	r3, [r3, #12]
 8002eb2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002eb6:	f023 0302 	bic.w	r3, r3, #2
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	6812      	ldr	r2, [r2, #0]
 8002ebe:	69b9      	ldr	r1, [r7, #24]
 8002ec0:	430b      	orrs	r3, r1
 8002ec2:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	691b      	ldr	r3, [r3, #16]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d017      	beq.n	8002efc <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	691a      	ldr	r2, [r3, #16]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002eda:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002ee4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002ee8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002eec:	687a      	ldr	r2, [r7, #4]
 8002eee:	6911      	ldr	r1, [r2, #16]
 8002ef0:	687a      	ldr	r2, [r7, #4]
 8002ef2:	6812      	ldr	r2, [r2, #0]
 8002ef4:	430b      	orrs	r3, r1
 8002ef6:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002efa:	e013      	b.n	8002f24 <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	691a      	ldr	r2, [r3, #16]
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002f0a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002f14:	687a      	ldr	r2, [r7, #4]
 8002f16:	6812      	ldr	r2, [r2, #0]
 8002f18:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002f1c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002f20:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	d12a      	bne.n	8002f84 <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	691b      	ldr	r3, [r3, #16]
 8002f34:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8002f38:	f023 0304 	bic.w	r3, r3, #4
 8002f3c:	687a      	ldr	r2, [r7, #4]
 8002f3e:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002f40:	687a      	ldr	r2, [r7, #4]
 8002f42:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002f44:	4311      	orrs	r1, r2
 8002f46:	687a      	ldr	r2, [r7, #4]
 8002f48:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8002f4a:	4311      	orrs	r1, r2
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002f50:	430a      	orrs	r2, r1
 8002f52:	431a      	orrs	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f042 0201 	orr.w	r2, r2, #1
 8002f5c:	611a      	str	r2, [r3, #16]
 8002f5e:	e019      	b.n	8002f94 <HAL_ADC_Init+0x318>
 8002f60:	20000094 	.word	0x20000094
 8002f64:	053e2d63 	.word	0x053e2d63
 8002f68:	50000100 	.word	0x50000100
 8002f6c:	50000400 	.word	0x50000400
 8002f70:	50000500 	.word	0x50000500
 8002f74:	50000600 	.word	0x50000600
 8002f78:	50000300 	.word	0x50000300
 8002f7c:	50000700 	.word	0x50000700
 8002f80:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	691a      	ldr	r2, [r3, #16]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f022 0201 	bic.w	r2, r2, #1
 8002f92:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	2b01      	cmp	r3, #1
 8002f9a:	d10c      	bne.n	8002fb6 <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fa2:	f023 010f 	bic.w	r1, r3, #15
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	1e5a      	subs	r2, r3, #1
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8002fb4:	e007      	b.n	8002fc6 <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f022 020f 	bic.w	r2, r2, #15
 8002fc4:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fca:	f023 0303 	bic.w	r3, r3, #3
 8002fce:	f043 0201 	orr.w	r2, r3, #1
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002fd6:	e007      	b.n	8002fe8 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002fdc:	f043 0210 	orr.w	r2, r3, #16
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002fe8:	7ffb      	ldrb	r3, [r7, #31]
}
 8002fea:	4618      	mov	r0, r3
 8002fec:	3724      	adds	r7, #36	@ 0x24
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	bd90      	pop	{r4, r7, pc}
 8002ff2:	bf00      	nop

08002ff4 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ff4:	b580      	push	{r7, lr}
 8002ff6:	b086      	sub	sp, #24
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003004:	d004      	beq.n	8003010 <HAL_ADC_Start+0x1c>
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4a67      	ldr	r2, [pc, #412]	@ (80031a8 <HAL_ADC_Start+0x1b4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d101      	bne.n	8003014 <HAL_ADC_Start+0x20>
 8003010:	4b66      	ldr	r3, [pc, #408]	@ (80031ac <HAL_ADC_Start+0x1b8>)
 8003012:	e000      	b.n	8003016 <HAL_ADC_Start+0x22>
 8003014:	4b66      	ldr	r3, [pc, #408]	@ (80031b0 <HAL_ADC_Start+0x1bc>)
 8003016:	4618      	mov	r0, r3
 8003018:	f7ff fd16 	bl	8002a48 <LL_ADC_GetMultimode>
 800301c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff fdf0 	bl	8002c08 <LL_ADC_REG_IsConversionOngoing>
 8003028:	4603      	mov	r3, r0
 800302a:	2b00      	cmp	r3, #0
 800302c:	f040 80b4 	bne.w	8003198 <HAL_ADC_Start+0x1a4>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003036:	2b01      	cmp	r3, #1
 8003038:	d101      	bne.n	800303e <HAL_ADC_Start+0x4a>
 800303a:	2302      	movs	r3, #2
 800303c:	e0af      	b.n	800319e <HAL_ADC_Start+0x1aa>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2201      	movs	r2, #1
 8003042:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003046:	6878      	ldr	r0, [r7, #4]
 8003048:	f001 fac8 	bl	80045dc <ADC_Enable>
 800304c:	4603      	mov	r3, r0
 800304e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	2b00      	cmp	r3, #0
 8003054:	f040 809b 	bne.w	800318e <HAL_ADC_Start+0x19a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800305c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8003060:	f023 0301 	bic.w	r3, r3, #1
 8003064:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a4d      	ldr	r2, [pc, #308]	@ (80031a8 <HAL_ADC_Start+0x1b4>)
 8003072:	4293      	cmp	r3, r2
 8003074:	d009      	beq.n	800308a <HAL_ADC_Start+0x96>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	4a4e      	ldr	r2, [pc, #312]	@ (80031b4 <HAL_ADC_Start+0x1c0>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d002      	beq.n	8003086 <HAL_ADC_Start+0x92>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	e003      	b.n	800308e <HAL_ADC_Start+0x9a>
 8003086:	4b4c      	ldr	r3, [pc, #304]	@ (80031b8 <HAL_ADC_Start+0x1c4>)
 8003088:	e001      	b.n	800308e <HAL_ADC_Start+0x9a>
 800308a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	4293      	cmp	r3, r2
 8003094:	d002      	beq.n	800309c <HAL_ADC_Start+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d105      	bne.n	80030a8 <HAL_ADC_Start+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030a0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030b4:	d106      	bne.n	80030c4 <HAL_ADC_Start+0xd0>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80030ba:	f023 0206 	bic.w	r2, r3, #6
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	661a      	str	r2, [r3, #96]	@ 0x60
 80030c2:	e002      	b.n	80030ca <HAL_ADC_Start+0xd6>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	221c      	movs	r2, #28
 80030d0:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a32      	ldr	r2, [pc, #200]	@ (80031a8 <HAL_ADC_Start+0x1b4>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d009      	beq.n	80030f8 <HAL_ADC_Start+0x104>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	4a32      	ldr	r2, [pc, #200]	@ (80031b4 <HAL_ADC_Start+0x1c0>)
 80030ea:	4293      	cmp	r3, r2
 80030ec:	d002      	beq.n	80030f4 <HAL_ADC_Start+0x100>
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	e003      	b.n	80030fc <HAL_ADC_Start+0x108>
 80030f4:	4b30      	ldr	r3, [pc, #192]	@ (80031b8 <HAL_ADC_Start+0x1c4>)
 80030f6:	e001      	b.n	80030fc <HAL_ADC_Start+0x108>
 80030f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	6812      	ldr	r2, [r2, #0]
 8003100:	4293      	cmp	r3, r2
 8003102:	d008      	beq.n	8003116 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d005      	beq.n	8003116 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	2b05      	cmp	r3, #5
 800310e:	d002      	beq.n	8003116 <HAL_ADC_Start+0x122>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	2b09      	cmp	r3, #9
 8003114:	d114      	bne.n	8003140 <HAL_ADC_Start+0x14c>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d007      	beq.n	8003134 <HAL_ADC_Start+0x140>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003128:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800312c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	65da      	str	r2, [r3, #92]	@ 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4618      	mov	r0, r3
 800313a:	f7ff fd3d 	bl	8002bb8 <LL_ADC_REG_StartConversion>
 800313e:	e02d      	b.n	800319c <HAL_ADC_Start+0x1a8>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003144:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	4a15      	ldr	r2, [pc, #84]	@ (80031a8 <HAL_ADC_Start+0x1b4>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d009      	beq.n	800316a <HAL_ADC_Start+0x176>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4a16      	ldr	r2, [pc, #88]	@ (80031b4 <HAL_ADC_Start+0x1c0>)
 800315c:	4293      	cmp	r3, r2
 800315e:	d002      	beq.n	8003166 <HAL_ADC_Start+0x172>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	e003      	b.n	800316e <HAL_ADC_Start+0x17a>
 8003166:	4b14      	ldr	r3, [pc, #80]	@ (80031b8 <HAL_ADC_Start+0x1c4>)
 8003168:	e001      	b.n	800316e <HAL_ADC_Start+0x17a>
 800316a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800316e:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	68db      	ldr	r3, [r3, #12]
 8003174:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00f      	beq.n	800319c <HAL_ADC_Start+0x1a8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003180:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003184:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800318c:	e006      	b.n	800319c <HAL_ADC_Start+0x1a8>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 8003196:	e001      	b.n	800319c <HAL_ADC_Start+0x1a8>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003198:	2302      	movs	r3, #2
 800319a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800319c:	7dfb      	ldrb	r3, [r7, #23]
}
 800319e:	4618      	mov	r0, r3
 80031a0:	3718      	adds	r7, #24
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	50000100 	.word	0x50000100
 80031ac:	50000300 	.word	0x50000300
 80031b0:	50000700 	.word	0x50000700
 80031b4:	50000500 	.word	0x50000500
 80031b8:	50000400 	.word	0x50000400

080031bc <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80031ca:	2b01      	cmp	r3, #1
 80031cc:	d101      	bne.n	80031d2 <HAL_ADC_Stop+0x16>
 80031ce:	2302      	movs	r3, #2
 80031d0:	e023      	b.n	800321a <HAL_ADC_Stop+0x5e>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2201      	movs	r2, #1
 80031d6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* 1. Stop potential conversion on going, on ADC groups regular and injected */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80031da:	2103      	movs	r1, #3
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f001 f941 	bl	8004464 <ADC_ConversionStop>
 80031e2:	4603      	mov	r3, r0
 80031e4:	73fb      	strb	r3, [r7, #15]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80031e6:	7bfb      	ldrb	r3, [r7, #15]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d111      	bne.n	8003210 <HAL_ADC_Stop+0x54>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80031ec:	6878      	ldr	r0, [r7, #4]
 80031ee:	f001 fa8b 	bl	8004708 <ADC_Disable>
 80031f2:	4603      	mov	r3, r0
 80031f4:	73fb      	strb	r3, [r7, #15]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80031f6:	7bfb      	ldrb	r3, [r7, #15]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d109      	bne.n	8003210 <HAL_ADC_Stop+0x54>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003200:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003204:	f023 0301 	bic.w	r3, r3, #1
 8003208:	f043 0201 	orr.w	r2, r3, #1
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	65da      	str	r2, [r3, #92]	@ 0x5c
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8003218:	7bfb      	ldrb	r3, [r7, #15]
}
 800321a:	4618      	mov	r0, r3
 800321c:	3710      	adds	r7, #16
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}
	...

08003224 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b088      	sub	sp, #32
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003236:	d004      	beq.n	8003242 <HAL_ADC_PollForConversion+0x1e>
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a77      	ldr	r2, [pc, #476]	@ (800341c <HAL_ADC_PollForConversion+0x1f8>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <HAL_ADC_PollForConversion+0x22>
 8003242:	4b77      	ldr	r3, [pc, #476]	@ (8003420 <HAL_ADC_PollForConversion+0x1fc>)
 8003244:	e000      	b.n	8003248 <HAL_ADC_PollForConversion+0x24>
 8003246:	4b77      	ldr	r3, [pc, #476]	@ (8003424 <HAL_ADC_PollForConversion+0x200>)
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff fbfd 	bl	8002a48 <LL_ADC_GetMultimode>
 800324e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	2b08      	cmp	r3, #8
 8003256:	d102      	bne.n	800325e <HAL_ADC_PollForConversion+0x3a>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003258:	2308      	movs	r3, #8
 800325a:	61fb      	str	r3, [r7, #28]
 800325c:	e037      	b.n	80032ce <HAL_ADC_PollForConversion+0xaa>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d005      	beq.n	8003270 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b05      	cmp	r3, #5
 8003268:	d002      	beq.n	8003270 <HAL_ADC_PollForConversion+0x4c>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800326a:	697b      	ldr	r3, [r7, #20]
 800326c:	2b09      	cmp	r3, #9
 800326e:	d111      	bne.n	8003294 <HAL_ADC_PollForConversion+0x70>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	68db      	ldr	r3, [r3, #12]
 8003276:	f003 0301 	and.w	r3, r3, #1
 800327a:	2b00      	cmp	r3, #0
 800327c:	d007      	beq.n	800328e <HAL_ADC_PollForConversion+0x6a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003282:	f043 0220 	orr.w	r2, r3, #32
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e0c1      	b.n	8003412 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800328e:	2304      	movs	r3, #4
 8003290:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003292:	e01c      	b.n	80032ce <HAL_ADC_PollForConversion+0xaa>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800329c:	d004      	beq.n	80032a8 <HAL_ADC_PollForConversion+0x84>
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a5e      	ldr	r2, [pc, #376]	@ (800341c <HAL_ADC_PollForConversion+0x1f8>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d101      	bne.n	80032ac <HAL_ADC_PollForConversion+0x88>
 80032a8:	4b5d      	ldr	r3, [pc, #372]	@ (8003420 <HAL_ADC_PollForConversion+0x1fc>)
 80032aa:	e000      	b.n	80032ae <HAL_ADC_PollForConversion+0x8a>
 80032ac:	4b5d      	ldr	r3, [pc, #372]	@ (8003424 <HAL_ADC_PollForConversion+0x200>)
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff fbd8 	bl	8002a64 <LL_ADC_GetMultiDMATransfer>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d007      	beq.n	80032ca <HAL_ADC_PollForConversion+0xa6>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80032be:	f043 0220 	orr.w	r2, r3, #32
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	65da      	str	r2, [r3, #92]	@ 0x5c
        return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e0a3      	b.n	8003412 <HAL_ADC_PollForConversion+0x1ee>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80032ca:	2304      	movs	r3, #4
 80032cc:	61fb      	str	r3, [r7, #28]
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80032ce:	f7ff fa19 	bl	8002704 <HAL_GetTick>
 80032d2:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032d4:	e021      	b.n	800331a <HAL_ADC_PollForConversion+0xf6>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032dc:	d01d      	beq.n	800331a <HAL_ADC_PollForConversion+0xf6>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80032de:	f7ff fa11 	bl	8002704 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	683a      	ldr	r2, [r7, #0]
 80032ea:	429a      	cmp	r2, r3
 80032ec:	d302      	bcc.n	80032f4 <HAL_ADC_PollForConversion+0xd0>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d112      	bne.n	800331a <HAL_ADC_PollForConversion+0xf6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681a      	ldr	r2, [r3, #0]
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	4013      	ands	r3, r2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d10b      	bne.n	800331a <HAL_ADC_PollForConversion+0xf6>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003306:	f043 0204 	orr.w	r2, r3, #4
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

          return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e07b      	b.n	8003412 <HAL_ADC_PollForConversion+0x1ee>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	69fb      	ldr	r3, [r7, #28]
 8003322:	4013      	ands	r3, r2
 8003324:	2b00      	cmp	r3, #0
 8003326:	d0d6      	beq.n	80032d6 <HAL_ADC_PollForConversion+0xb2>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800332c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4618      	mov	r0, r3
 800333a:	f7ff fae3 	bl	8002904 <LL_ADC_REG_IsTriggerSourceSWStart>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d01c      	beq.n	800337e <HAL_ADC_PollForConversion+0x15a>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	7f5b      	ldrb	r3, [r3, #29]
 8003348:	2b00      	cmp	r3, #0
 800334a:	d118      	bne.n	800337e <HAL_ADC_PollForConversion+0x15a>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0308 	and.w	r3, r3, #8
 8003356:	2b08      	cmp	r3, #8
 8003358:	d111      	bne.n	800337e <HAL_ADC_PollForConversion+0x15a>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800335e:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	65da      	str	r2, [r3, #92]	@ 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800336a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800336e:	2b00      	cmp	r3, #0
 8003370:	d105      	bne.n	800337e <HAL_ADC_PollForConversion+0x15a>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003376:	f043 0201 	orr.w	r2, r3, #1
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a26      	ldr	r2, [pc, #152]	@ (800341c <HAL_ADC_PollForConversion+0x1f8>)
 8003384:	4293      	cmp	r3, r2
 8003386:	d009      	beq.n	800339c <HAL_ADC_PollForConversion+0x178>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a26      	ldr	r2, [pc, #152]	@ (8003428 <HAL_ADC_PollForConversion+0x204>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d002      	beq.n	8003398 <HAL_ADC_PollForConversion+0x174>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	e003      	b.n	80033a0 <HAL_ADC_PollForConversion+0x17c>
 8003398:	4b24      	ldr	r3, [pc, #144]	@ (800342c <HAL_ADC_PollForConversion+0x208>)
 800339a:	e001      	b.n	80033a0 <HAL_ADC_PollForConversion+0x17c>
 800339c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d008      	beq.n	80033ba <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d005      	beq.n	80033ba <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	2b05      	cmp	r3, #5
 80033b2:	d002      	beq.n	80033ba <HAL_ADC_PollForConversion+0x196>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033b4:	697b      	ldr	r3, [r7, #20]
 80033b6:	2b09      	cmp	r3, #9
 80033b8:	d104      	bne.n	80033c4 <HAL_ADC_PollForConversion+0x1a0>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	68db      	ldr	r3, [r3, #12]
 80033c0:	61bb      	str	r3, [r7, #24]
 80033c2:	e014      	b.n	80033ee <HAL_ADC_PollForConversion+0x1ca>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a14      	ldr	r2, [pc, #80]	@ (800341c <HAL_ADC_PollForConversion+0x1f8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d009      	beq.n	80033e2 <HAL_ADC_PollForConversion+0x1be>
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a15      	ldr	r2, [pc, #84]	@ (8003428 <HAL_ADC_PollForConversion+0x204>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d002      	beq.n	80033de <HAL_ADC_PollForConversion+0x1ba>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	e003      	b.n	80033e6 <HAL_ADC_PollForConversion+0x1c2>
 80033de:	4b13      	ldr	r3, [pc, #76]	@ (800342c <HAL_ADC_PollForConversion+0x208>)
 80033e0:	e001      	b.n	80033e6 <HAL_ADC_PollForConversion+0x1c2>
 80033e2:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80033e6:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80033ee:	69fb      	ldr	r3, [r7, #28]
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d104      	bne.n	80033fe <HAL_ADC_PollForConversion+0x1da>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2208      	movs	r2, #8
 80033fa:	601a      	str	r2, [r3, #0]
 80033fc:	e008      	b.n	8003410 <HAL_ADC_PollForConversion+0x1ec>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80033fe:	69bb      	ldr	r3, [r7, #24]
 8003400:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003404:	2b00      	cmp	r3, #0
 8003406:	d103      	bne.n	8003410 <HAL_ADC_PollForConversion+0x1ec>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	220c      	movs	r2, #12
 800340e:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3720      	adds	r7, #32
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	50000100 	.word	0x50000100
 8003420:	50000300 	.word	0x50000300
 8003424:	50000700 	.word	0x50000700
 8003428:	50000500 	.word	0x50000500
 800342c:	50000400 	.word	0x50000400

08003430 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003440:	d004      	beq.n	800344c <HAL_ADC_Start_IT+0x1c>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a92      	ldr	r2, [pc, #584]	@ (8003690 <HAL_ADC_Start_IT+0x260>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d101      	bne.n	8003450 <HAL_ADC_Start_IT+0x20>
 800344c:	4b91      	ldr	r3, [pc, #580]	@ (8003694 <HAL_ADC_Start_IT+0x264>)
 800344e:	e000      	b.n	8003452 <HAL_ADC_Start_IT+0x22>
 8003450:	4b91      	ldr	r3, [pc, #580]	@ (8003698 <HAL_ADC_Start_IT+0x268>)
 8003452:	4618      	mov	r0, r3
 8003454:	f7ff faf8 	bl	8002a48 <LL_ADC_GetMultimode>
 8003458:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fbd2 	bl	8002c08 <LL_ADC_REG_IsConversionOngoing>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	f040 8132 	bne.w	80036d0 <HAL_ADC_Start_IT+0x2a0>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_ADC_Start_IT+0x4a>
 8003476:	2302      	movs	r3, #2
 8003478:	e12d      	b.n	80036d6 <HAL_ADC_Start_IT+0x2a6>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f001 f8aa 	bl	80045dc <ADC_Enable>
 8003488:	4603      	mov	r3, r0
 800348a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800348c:	7dfb      	ldrb	r3, [r7, #23]
 800348e:	2b00      	cmp	r3, #0
 8003490:	f040 8119 	bne.w	80036c6 <HAL_ADC_Start_IT+0x296>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003498:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800349c:	f023 0301 	bic.w	r3, r3, #1
 80034a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a78      	ldr	r2, [pc, #480]	@ (8003690 <HAL_ADC_Start_IT+0x260>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d009      	beq.n	80034c6 <HAL_ADC_Start_IT+0x96>
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4a79      	ldr	r2, [pc, #484]	@ (800369c <HAL_ADC_Start_IT+0x26c>)
 80034b8:	4293      	cmp	r3, r2
 80034ba:	d002      	beq.n	80034c2 <HAL_ADC_Start_IT+0x92>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	e003      	b.n	80034ca <HAL_ADC_Start_IT+0x9a>
 80034c2:	4b77      	ldr	r3, [pc, #476]	@ (80036a0 <HAL_ADC_Start_IT+0x270>)
 80034c4:	e001      	b.n	80034ca <HAL_ADC_Start_IT+0x9a>
 80034c6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6812      	ldr	r2, [r2, #0]
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d002      	beq.n	80034d8 <HAL_ADC_Start_IT+0xa8>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d105      	bne.n	80034e4 <HAL_ADC_Start_IT+0xb4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034dc:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	65da      	str	r2, [r3, #92]	@ 0x5c
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80034e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d006      	beq.n	80034fe <HAL_ADC_Start_IT+0xce>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80034f4:	f023 0206 	bic.w	r2, r3, #6
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	661a      	str	r2, [r3, #96]	@ 0x60
 80034fc:	e002      	b.n	8003504 <HAL_ADC_Start_IT+0xd4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2200      	movs	r2, #0
 8003502:	661a      	str	r2, [r3, #96]	@ 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	221c      	movs	r2, #28
 800350a:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	685a      	ldr	r2, [r3, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f022 021c 	bic.w	r2, r2, #28
 8003522:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	699b      	ldr	r3, [r3, #24]
 8003528:	2b08      	cmp	r3, #8
 800352a:	d108      	bne.n	800353e <HAL_ADC_Start_IT+0x10e>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f042 0208 	orr.w	r2, r2, #8
 800353a:	605a      	str	r2, [r3, #4]
          break;
 800353c:	e008      	b.n	8003550 <HAL_ADC_Start_IT+0x120>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	685a      	ldr	r2, [r3, #4]
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f042 0204 	orr.w	r2, r2, #4
 800354c:	605a      	str	r2, [r3, #4]
          break;
 800354e:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003554:	2b00      	cmp	r3, #0
 8003556:	d107      	bne.n	8003568 <HAL_ADC_Start_IT+0x138>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	685a      	ldr	r2, [r3, #4]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f042 0210 	orr.w	r2, r2, #16
 8003566:	605a      	str	r2, [r3, #4]
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	4a48      	ldr	r2, [pc, #288]	@ (8003690 <HAL_ADC_Start_IT+0x260>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d009      	beq.n	8003586 <HAL_ADC_Start_IT+0x156>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	4a49      	ldr	r2, [pc, #292]	@ (800369c <HAL_ADC_Start_IT+0x26c>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d002      	beq.n	8003582 <HAL_ADC_Start_IT+0x152>
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	e003      	b.n	800358a <HAL_ADC_Start_IT+0x15a>
 8003582:	4b47      	ldr	r3, [pc, #284]	@ (80036a0 <HAL_ADC_Start_IT+0x270>)
 8003584:	e001      	b.n	800358a <HAL_ADC_Start_IT+0x15a>
 8003586:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	6812      	ldr	r2, [r2, #0]
 800358e:	4293      	cmp	r3, r2
 8003590:	d008      	beq.n	80035a4 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d005      	beq.n	80035a4 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	2b05      	cmp	r3, #5
 800359c:	d002      	beq.n	80035a4 <HAL_ADC_Start_IT+0x174>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	2b09      	cmp	r3, #9
 80035a2:	d13a      	bne.n	800361a <HAL_ADC_Start_IT+0x1ea>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68db      	ldr	r3, [r3, #12]
 80035aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d02d      	beq.n	800360e <HAL_ADC_Start_IT+0x1de>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80035b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80035ba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	699b      	ldr	r3, [r3, #24]
 80035c6:	2b08      	cmp	r3, #8
 80035c8:	d110      	bne.n	80035ec <HAL_ADC_Start_IT+0x1bc>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	685a      	ldr	r2, [r3, #4]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 0220 	bic.w	r2, r2, #32
 80035d8:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	685a      	ldr	r2, [r3, #4]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035e8:	605a      	str	r2, [r3, #4]
              break;
 80035ea:	e010      	b.n	800360e <HAL_ADC_Start_IT+0x1de>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	685a      	ldr	r2, [r3, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80035fa:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	685a      	ldr	r2, [r3, #4]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0220 	orr.w	r2, r2, #32
 800360a:	605a      	str	r2, [r3, #4]
              break;
 800360c:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4618      	mov	r0, r3
 8003614:	f7ff fad0 	bl	8002bb8 <LL_ADC_REG_StartConversion>
 8003618:	e05c      	b.n	80036d4 <HAL_ADC_Start_IT+0x2a4>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800361e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	65da      	str	r2, [r3, #92]	@ 0x5c
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	4a19      	ldr	r2, [pc, #100]	@ (8003690 <HAL_ADC_Start_IT+0x260>)
 800362c:	4293      	cmp	r3, r2
 800362e:	d009      	beq.n	8003644 <HAL_ADC_Start_IT+0x214>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	4a19      	ldr	r2, [pc, #100]	@ (800369c <HAL_ADC_Start_IT+0x26c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d002      	beq.n	8003640 <HAL_ADC_Start_IT+0x210>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	e003      	b.n	8003648 <HAL_ADC_Start_IT+0x218>
 8003640:	4b17      	ldr	r3, [pc, #92]	@ (80036a0 <HAL_ADC_Start_IT+0x270>)
 8003642:	e001      	b.n	8003648 <HAL_ADC_Start_IT+0x218>
 8003644:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003648:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d03e      	beq.n	80036d4 <HAL_ADC_Start_IT+0x2a4>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800365a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800365e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	65da      	str	r2, [r3, #92]	@ 0x5c
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	699b      	ldr	r3, [r3, #24]
 800366a:	2b08      	cmp	r3, #8
 800366c:	d11a      	bne.n	80036a4 <HAL_ADC_Start_IT+0x274>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	685a      	ldr	r2, [r3, #4]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0220 	bic.w	r2, r2, #32
 800367c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	685a      	ldr	r2, [r3, #4]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800368c:	605a      	str	r2, [r3, #4]
              break;
 800368e:	e021      	b.n	80036d4 <HAL_ADC_Start_IT+0x2a4>
 8003690:	50000100 	.word	0x50000100
 8003694:	50000300 	.word	0x50000300
 8003698:	50000700 	.word	0x50000700
 800369c:	50000500 	.word	0x50000500
 80036a0:	50000400 	.word	0x50000400
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	685a      	ldr	r2, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036b2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	685a      	ldr	r2, [r3, #4]
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f042 0220 	orr.w	r2, r2, #32
 80036c2:	605a      	str	r2, [r3, #4]
              break;
 80036c4:	e006      	b.n	80036d4 <HAL_ADC_Start_IT+0x2a4>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80036ce:	e001      	b.n	80036d4 <HAL_ADC_Start_IT+0x2a4>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80036d0:	2302      	movs	r3, #2
 80036d2:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80036d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3718      	adds	r7, #24
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop

080036e0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80036e0:	b480      	push	{r7}
 80036e2:	b083      	sub	sp, #12
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b08a      	sub	sp, #40	@ 0x28
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003720:	d004      	beq.n	800372c <HAL_ADC_IRQHandler+0x30>
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	4a8e      	ldr	r2, [pc, #568]	@ (8003960 <HAL_ADC_IRQHandler+0x264>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d101      	bne.n	8003730 <HAL_ADC_IRQHandler+0x34>
 800372c:	4b8d      	ldr	r3, [pc, #564]	@ (8003964 <HAL_ADC_IRQHandler+0x268>)
 800372e:	e000      	b.n	8003732 <HAL_ADC_IRQHandler+0x36>
 8003730:	4b8d      	ldr	r3, [pc, #564]	@ (8003968 <HAL_ADC_IRQHandler+0x26c>)
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff f988 	bl	8002a48 <LL_ADC_GetMultimode>
 8003738:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	f003 0302 	and.w	r3, r3, #2
 8003740:	2b00      	cmp	r3, #0
 8003742:	d017      	beq.n	8003774 <HAL_ADC_IRQHandler+0x78>
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d012      	beq.n	8003774 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2b00      	cmp	r3, #0
 8003758:	d105      	bne.n	8003766 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800375e:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f001 f90a 	bl	8004980 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	2202      	movs	r2, #2
 8003772:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b00      	cmp	r3, #0
 800377c:	d004      	beq.n	8003788 <HAL_ADC_IRQHandler+0x8c>
 800377e:	69bb      	ldr	r3, [r7, #24]
 8003780:	f003 0304 	and.w	r3, r3, #4
 8003784:	2b00      	cmp	r3, #0
 8003786:	d10b      	bne.n	80037a0 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003788:	69fb      	ldr	r3, [r7, #28]
 800378a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 8094 	beq.w	80038bc <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	f003 0308 	and.w	r3, r3, #8
 800379a:	2b00      	cmp	r3, #0
 800379c:	f000 808e 	beq.w	80038bc <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d105      	bne.n	80037b8 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f7ff f8a1 	bl	8002904 <LL_ADC_REG_IsTriggerSourceSWStart>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d072      	beq.n	80038ae <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a64      	ldr	r2, [pc, #400]	@ (8003960 <HAL_ADC_IRQHandler+0x264>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d009      	beq.n	80037e6 <HAL_ADC_IRQHandler+0xea>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a65      	ldr	r2, [pc, #404]	@ (800396c <HAL_ADC_IRQHandler+0x270>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d002      	beq.n	80037e2 <HAL_ADC_IRQHandler+0xe6>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	e003      	b.n	80037ea <HAL_ADC_IRQHandler+0xee>
 80037e2:	4b63      	ldr	r3, [pc, #396]	@ (8003970 <HAL_ADC_IRQHandler+0x274>)
 80037e4:	e001      	b.n	80037ea <HAL_ADC_IRQHandler+0xee>
 80037e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	6812      	ldr	r2, [r2, #0]
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d008      	beq.n	8003804 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d005      	beq.n	8003804 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b05      	cmp	r3, #5
 80037fc:	d002      	beq.n	8003804 <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b09      	cmp	r3, #9
 8003802:	d104      	bne.n	800380e <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	623b      	str	r3, [r7, #32]
 800380c:	e014      	b.n	8003838 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a53      	ldr	r2, [pc, #332]	@ (8003960 <HAL_ADC_IRQHandler+0x264>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d009      	beq.n	800382c <HAL_ADC_IRQHandler+0x130>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4a53      	ldr	r2, [pc, #332]	@ (800396c <HAL_ADC_IRQHandler+0x270>)
 800381e:	4293      	cmp	r3, r2
 8003820:	d002      	beq.n	8003828 <HAL_ADC_IRQHandler+0x12c>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	e003      	b.n	8003830 <HAL_ADC_IRQHandler+0x134>
 8003828:	4b51      	ldr	r3, [pc, #324]	@ (8003970 <HAL_ADC_IRQHandler+0x274>)
 800382a:	e001      	b.n	8003830 <HAL_ADC_IRQHandler+0x134>
 800382c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003830:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8003838:	6a3b      	ldr	r3, [r7, #32]
 800383a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d135      	bne.n	80038ae <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f003 0308 	and.w	r3, r3, #8
 800384c:	2b08      	cmp	r3, #8
 800384e:	d12e      	bne.n	80038ae <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4618      	mov	r0, r3
 8003856:	f7ff f9d7 	bl	8002c08 <LL_ADC_REG_IsConversionOngoing>
 800385a:	4603      	mov	r3, r0
 800385c:	2b00      	cmp	r3, #0
 800385e:	d11a      	bne.n	8003896 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685a      	ldr	r2, [r3, #4]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f022 020c 	bic.w	r2, r2, #12
 800386e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003874:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003884:	2b00      	cmp	r3, #0
 8003886:	d112      	bne.n	80038ae <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800388c:	f043 0201 	orr.w	r2, r3, #1
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003894:	e00b      	b.n	80038ae <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800389a:	f043 0210 	orr.w	r2, r3, #16
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038a6:	f043 0201 	orr.w	r2, r3, #1
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80038ae:	6878      	ldr	r0, [r7, #4]
 80038b0:	f7fe f898 	bl	80019e4 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	220c      	movs	r2, #12
 80038ba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038bc:	69fb      	ldr	r3, [r7, #28]
 80038be:	f003 0320 	and.w	r3, r3, #32
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d004      	beq.n	80038d0 <HAL_ADC_IRQHandler+0x1d4>
 80038c6:	69bb      	ldr	r3, [r7, #24]
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10b      	bne.n	80038e8 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	f000 80b3 	beq.w	8003a42 <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80038dc:	69bb      	ldr	r3, [r7, #24]
 80038de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 80ad 	beq.w	8003a42 <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038ec:	f003 0310 	and.w	r3, r3, #16
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d105      	bne.n	8003900 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80038f8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4618      	mov	r0, r3
 8003906:	f7ff f83c 	bl	8002982 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800390a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fe fff7 	bl	8002904 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003916:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	4a10      	ldr	r2, [pc, #64]	@ (8003960 <HAL_ADC_IRQHandler+0x264>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d009      	beq.n	8003936 <HAL_ADC_IRQHandler+0x23a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	4a11      	ldr	r2, [pc, #68]	@ (800396c <HAL_ADC_IRQHandler+0x270>)
 8003928:	4293      	cmp	r3, r2
 800392a:	d002      	beq.n	8003932 <HAL_ADC_IRQHandler+0x236>
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	e003      	b.n	800393a <HAL_ADC_IRQHandler+0x23e>
 8003932:	4b0f      	ldr	r3, [pc, #60]	@ (8003970 <HAL_ADC_IRQHandler+0x274>)
 8003934:	e001      	b.n	800393a <HAL_ADC_IRQHandler+0x23e>
 8003936:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800393a:	687a      	ldr	r2, [r7, #4]
 800393c:	6812      	ldr	r2, [r2, #0]
 800393e:	4293      	cmp	r3, r2
 8003940:	d008      	beq.n	8003954 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d005      	beq.n	8003954 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003948:	697b      	ldr	r3, [r7, #20]
 800394a:	2b06      	cmp	r3, #6
 800394c:	d002      	beq.n	8003954 <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	2b07      	cmp	r3, #7
 8003952:	d10f      	bne.n	8003974 <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	68db      	ldr	r3, [r3, #12]
 800395a:	623b      	str	r3, [r7, #32]
 800395c:	e01f      	b.n	800399e <HAL_ADC_IRQHandler+0x2a2>
 800395e:	bf00      	nop
 8003960:	50000100 	.word	0x50000100
 8003964:	50000300 	.word	0x50000300
 8003968:	50000700 	.word	0x50000700
 800396c:	50000500 	.word	0x50000500
 8003970:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a8b      	ldr	r2, [pc, #556]	@ (8003ba8 <HAL_ADC_IRQHandler+0x4ac>)
 800397a:	4293      	cmp	r3, r2
 800397c:	d009      	beq.n	8003992 <HAL_ADC_IRQHandler+0x296>
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a8a      	ldr	r2, [pc, #552]	@ (8003bac <HAL_ADC_IRQHandler+0x4b0>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d002      	beq.n	800398e <HAL_ADC_IRQHandler+0x292>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	e003      	b.n	8003996 <HAL_ADC_IRQHandler+0x29a>
 800398e:	4b88      	ldr	r3, [pc, #544]	@ (8003bb0 <HAL_ADC_IRQHandler+0x4b4>)
 8003990:	e001      	b.n	8003996 <HAL_ADC_IRQHandler+0x29a>
 8003992:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8003996:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d047      	beq.n	8003a34 <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80039a4:	6a3b      	ldr	r3, [r7, #32]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d007      	beq.n	80039be <HAL_ADC_IRQHandler+0x2c2>
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d03f      	beq.n	8003a34 <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80039b4:	6a3b      	ldr	r3, [r7, #32]
 80039b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d13a      	bne.n	8003a34 <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80039c8:	2b40      	cmp	r3, #64	@ 0x40
 80039ca:	d133      	bne.n	8003a34 <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80039cc:	6a3b      	ldr	r3, [r7, #32]
 80039ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d12e      	bne.n	8003a34 <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff f93b 	bl	8002c56 <LL_ADC_INJ_IsConversionOngoing>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11a      	bne.n	8003a1c <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80039f4:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80039fa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d112      	bne.n	8003a34 <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	65da      	str	r2, [r3, #92]	@ 0x5c
 8003a1a:	e00b      	b.n	8003a34 <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a20:	f043 0210 	orr.w	r2, r3, #16
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f000 ff7b 	bl	8004930 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	2260      	movs	r2, #96	@ 0x60
 8003a40:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d011      	beq.n	8003a70 <HAL_ADC_IRQHandler+0x374>
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d00c      	beq.n	8003a70 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a5a:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f8aa 	bl	8003bbc <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2280      	movs	r2, #128	@ 0x80
 8003a6e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003a70:	69fb      	ldr	r3, [r7, #28]
 8003a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d012      	beq.n	8003aa0 <HAL_ADC_IRQHandler+0x3a4>
 8003a7a:	69bb      	ldr	r3, [r7, #24]
 8003a7c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d00d      	beq.n	8003aa0 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003a88:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003a90:	6878      	ldr	r0, [r7, #4]
 8003a92:	f000 ff61 	bl	8004958 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a9e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003aa0:	69fb      	ldr	r3, [r7, #28]
 8003aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d012      	beq.n	8003ad0 <HAL_ADC_IRQHandler+0x3d4>
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00d      	beq.n	8003ad0 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ab8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f000 ff53 	bl	800496c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ace:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	f003 0310 	and.w	r3, r3, #16
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d043      	beq.n	8003b62 <HAL_ADC_IRQHandler+0x466>
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f003 0310 	and.w	r3, r3, #16
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d03e      	beq.n	8003b62 <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d102      	bne.n	8003af2 <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8003aec:	2301      	movs	r3, #1
 8003aee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003af0:	e021      	b.n	8003b36 <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d015      	beq.n	8003b24 <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003b00:	d004      	beq.n	8003b0c <HAL_ADC_IRQHandler+0x410>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a28      	ldr	r2, [pc, #160]	@ (8003ba8 <HAL_ADC_IRQHandler+0x4ac>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d101      	bne.n	8003b10 <HAL_ADC_IRQHandler+0x414>
 8003b0c:	4b29      	ldr	r3, [pc, #164]	@ (8003bb4 <HAL_ADC_IRQHandler+0x4b8>)
 8003b0e:	e000      	b.n	8003b12 <HAL_ADC_IRQHandler+0x416>
 8003b10:	4b29      	ldr	r3, [pc, #164]	@ (8003bb8 <HAL_ADC_IRQHandler+0x4bc>)
 8003b12:	4618      	mov	r0, r3
 8003b14:	f7fe ffa6 	bl	8002a64 <LL_ADC_GetMultiDMATransfer>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d00b      	beq.n	8003b36 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003b1e:	2301      	movs	r3, #1
 8003b20:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b22:	e008      	b.n	8003b36 <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8003b32:	2301      	movs	r3, #1
 8003b34:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b38:	2b01      	cmp	r3, #1
 8003b3a:	d10e      	bne.n	8003b5a <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b40:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b4c:	f043 0202 	orr.w	r2, r3, #2
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 f83b 	bl	8003bd0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	2210      	movs	r2, #16
 8003b60:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003b62:	69fb      	ldr	r3, [r7, #28]
 8003b64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d018      	beq.n	8003b9e <HAL_ADC_IRQHandler+0x4a2>
 8003b6c:	69bb      	ldr	r3, [r7, #24]
 8003b6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d013      	beq.n	8003b9e <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003b7a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b86:	f043 0208 	orr.w	r2, r3, #8
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003b96:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fed3 	bl	8004944 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003b9e:	bf00      	nop
 8003ba0:	3728      	adds	r7, #40	@ 0x28
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	50000100 	.word	0x50000100
 8003bac:	50000500 	.word	0x50000500
 8003bb0:	50000400 	.word	0x50000400
 8003bb4:	50000300 	.word	0x50000300
 8003bb8:	50000700 	.word	0x50000700

08003bbc <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr

08003bd0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003bd0:	b480      	push	{r7}
 8003bd2:	b083      	sub	sp, #12
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b0b6      	sub	sp, #216	@ 0xd8
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
 8003bec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003bee:	2300      	movs	r3, #0
 8003bf0:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d102      	bne.n	8003c08 <HAL_ADC_ConfigChannel+0x24>
 8003c02:	2302      	movs	r3, #2
 8003c04:	f000 bc13 	b.w	800442e <HAL_ADC_ConfigChannel+0x84a>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4618      	mov	r0, r3
 8003c16:	f7fe fff7 	bl	8002c08 <LL_ADC_REG_IsConversionOngoing>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f040 83f3 	bne.w	8004408 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6818      	ldr	r0, [r3, #0]
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	6859      	ldr	r1, [r3, #4]
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	f7fe fe7b 	bl	800292a <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f7fe ffe5 	bl	8002c08 <LL_ADC_REG_IsConversionOngoing>
 8003c3e:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4618      	mov	r0, r3
 8003c48:	f7ff f805 	bl	8002c56 <LL_ADC_INJ_IsConversionOngoing>
 8003c4c:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003c50:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	f040 81d9 	bne.w	800400c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003c5a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	f040 81d4 	bne.w	800400c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c6c:	d10f      	bne.n	8003c8e <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6818      	ldr	r0, [r3, #0]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2200      	movs	r2, #0
 8003c78:	4619      	mov	r1, r3
 8003c7a:	f7fe fe95 	bl	80029a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8003c86:	4618      	mov	r0, r3
 8003c88:	f7fe fe29 	bl	80028de <LL_ADC_SetSamplingTimeCommonConfig>
 8003c8c:	e00e      	b.n	8003cac <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6818      	ldr	r0, [r3, #0]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	6819      	ldr	r1, [r3, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f7fe fe84 	bl	80029a8 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2100      	movs	r1, #0
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f7fe fe19 	bl	80028de <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	695a      	ldr	r2, [r3, #20]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	08db      	lsrs	r3, r3, #3
 8003cb8:	f003 0303 	and.w	r3, r3, #3
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003cc2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	2b04      	cmp	r3, #4
 8003ccc:	d022      	beq.n	8003d14 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6818      	ldr	r0, [r3, #0]
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	6919      	ldr	r1, [r3, #16]
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003cde:	f7fe fd73 	bl	80027c8 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6818      	ldr	r0, [r3, #0]
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	6919      	ldr	r1, [r3, #16]
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	699b      	ldr	r3, [r3, #24]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f7fe fdbf 	bl	8002872 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6818      	ldr	r0, [r3, #0]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d102      	bne.n	8003d0a <HAL_ADC_ConfigChannel+0x126>
 8003d04:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8003d08:	e000      	b.n	8003d0c <HAL_ADC_ConfigChannel+0x128>
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	f7fe fdcb 	bl	80028a8 <LL_ADC_SetOffsetSaturation>
 8003d12:	e17b      	b.n	800400c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2100      	movs	r1, #0
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	f7fe fd78 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003d20:	4603      	mov	r3, r0
 8003d22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d10a      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x15c>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	2100      	movs	r1, #0
 8003d30:	4618      	mov	r0, r3
 8003d32:	f7fe fd6d 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003d36:	4603      	mov	r3, r0
 8003d38:	0e9b      	lsrs	r3, r3, #26
 8003d3a:	f003 021f 	and.w	r2, r3, #31
 8003d3e:	e01e      	b.n	8003d7e <HAL_ADC_ConfigChannel+0x19a>
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2100      	movs	r1, #0
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fe fd62 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003d56:	fa93 f3a3 	rbit	r3, r3
 8003d5a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003d5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003d62:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003d66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d101      	bne.n	8003d72 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003d6e:	2320      	movs	r3, #32
 8003d70:	e004      	b.n	8003d7c <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003d72:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003d76:	fab3 f383 	clz	r3, r3
 8003d7a:	b2db      	uxtb	r3, r3
 8003d7c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d105      	bne.n	8003d96 <HAL_ADC_ConfigChannel+0x1b2>
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	0e9b      	lsrs	r3, r3, #26
 8003d90:	f003 031f 	and.w	r3, r3, #31
 8003d94:	e018      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x1e4>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d9e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8003da2:	fa93 f3a3 	rbit	r3, r3
 8003da6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8003daa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003dae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8003db2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8003dba:	2320      	movs	r3, #32
 8003dbc:	e004      	b.n	8003dc8 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 8003dbe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003dc2:	fab3 f383 	clz	r3, r3
 8003dc6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	d106      	bne.n	8003dda <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	2100      	movs	r1, #0
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	f7fe fd31 	bl	800283c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	2101      	movs	r1, #1
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7fe fd15 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003de6:	4603      	mov	r3, r0
 8003de8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <HAL_ADC_ConfigChannel+0x222>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	2101      	movs	r1, #1
 8003df6:	4618      	mov	r0, r3
 8003df8:	f7fe fd0a 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003dfc:	4603      	mov	r3, r0
 8003dfe:	0e9b      	lsrs	r3, r3, #26
 8003e00:	f003 021f 	and.w	r2, r3, #31
 8003e04:	e01e      	b.n	8003e44 <HAL_ADC_ConfigChannel+0x260>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2101      	movs	r1, #1
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f7fe fcff 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003e12:	4603      	mov	r3, r0
 8003e14:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e18:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003e1c:	fa93 f3a3 	rbit	r3, r3
 8003e20:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003e24:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8003e2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d101      	bne.n	8003e38 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003e34:	2320      	movs	r3, #32
 8003e36:	e004      	b.n	8003e42 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003e38:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003e3c:	fab3 f383 	clz	r3, r3
 8003e40:	b2db      	uxtb	r3, r3
 8003e42:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d105      	bne.n	8003e5c <HAL_ADC_ConfigChannel+0x278>
 8003e50:	683b      	ldr	r3, [r7, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	0e9b      	lsrs	r3, r3, #26
 8003e56:	f003 031f 	and.w	r3, r3, #31
 8003e5a:	e018      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x2aa>
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e64:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003e68:	fa93 f3a3 	rbit	r3, r3
 8003e6c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003e70:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003e74:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003e78:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e7c:	2b00      	cmp	r3, #0
 8003e7e:	d101      	bne.n	8003e84 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003e80:	2320      	movs	r3, #32
 8003e82:	e004      	b.n	8003e8e <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003e84:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003e88:	fab3 f383 	clz	r3, r3
 8003e8c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d106      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2200      	movs	r2, #0
 8003e98:	2101      	movs	r1, #1
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe fcce 	bl	800283c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	2102      	movs	r1, #2
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe fcb2 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003eac:	4603      	mov	r3, r0
 8003eae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d10a      	bne.n	8003ecc <HAL_ADC_ConfigChannel+0x2e8>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	2102      	movs	r1, #2
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	f7fe fca7 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003ec2:	4603      	mov	r3, r0
 8003ec4:	0e9b      	lsrs	r3, r3, #26
 8003ec6:	f003 021f 	and.w	r2, r3, #31
 8003eca:	e01e      	b.n	8003f0a <HAL_ADC_ConfigChannel+0x326>
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2102      	movs	r1, #2
 8003ed2:	4618      	mov	r0, r3
 8003ed4:	f7fe fc9c 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ede:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003ee2:	fa93 f3a3 	rbit	r3, r3
 8003ee6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8003eea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003eee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8003ef2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003efa:	2320      	movs	r3, #32
 8003efc:	e004      	b.n	8003f08 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003efe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003f02:	fab3 f383 	clz	r3, r3
 8003f06:	b2db      	uxtb	r3, r3
 8003f08:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d105      	bne.n	8003f22 <HAL_ADC_ConfigChannel+0x33e>
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	0e9b      	lsrs	r3, r3, #26
 8003f1c:	f003 031f 	and.w	r3, r3, #31
 8003f20:	e016      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x36c>
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f2a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003f2e:	fa93 f3a3 	rbit	r3, r3
 8003f32:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003f34:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003f36:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8003f3a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003f42:	2320      	movs	r3, #32
 8003f44:	e004      	b.n	8003f50 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 8003f46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f4a:	fab3 f383 	clz	r3, r3
 8003f4e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003f50:	429a      	cmp	r2, r3
 8003f52:	d106      	bne.n	8003f62 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	2102      	movs	r1, #2
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	f7fe fc6d 	bl	800283c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2103      	movs	r1, #3
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fe fc51 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d10a      	bne.n	8003f8e <HAL_ADC_ConfigChannel+0x3aa>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2103      	movs	r1, #3
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f7fe fc46 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003f84:	4603      	mov	r3, r0
 8003f86:	0e9b      	lsrs	r3, r3, #26
 8003f88:	f003 021f 	and.w	r2, r3, #31
 8003f8c:	e017      	b.n	8003fbe <HAL_ADC_ConfigChannel+0x3da>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	2103      	movs	r1, #3
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7fe fc3b 	bl	8002810 <LL_ADC_GetOffsetChannel>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f9e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003fa0:	fa93 f3a3 	rbit	r3, r3
 8003fa4:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8003fa6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003fa8:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003faa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d101      	bne.n	8003fb4 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8003fb0:	2320      	movs	r3, #32
 8003fb2:	e003      	b.n	8003fbc <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8003fb4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003fb6:	fab3 f383 	clz	r3, r3
 8003fba:	b2db      	uxtb	r3, r3
 8003fbc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d105      	bne.n	8003fd6 <HAL_ADC_ConfigChannel+0x3f2>
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	0e9b      	lsrs	r3, r3, #26
 8003fd0:	f003 031f 	and.w	r3, r3, #31
 8003fd4:	e011      	b.n	8003ffa <HAL_ADC_ConfigChannel+0x416>
 8003fd6:	683b      	ldr	r3, [r7, #0]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fdc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8003fde:	fa93 f3a3 	rbit	r3, r3
 8003fe2:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8003fe4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fe6:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8003fe8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d101      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003fee:	2320      	movs	r3, #32
 8003ff0:	e003      	b.n	8003ffa <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003ff2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003ff4:	fab3 f383 	clz	r3, r3
 8003ff8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d106      	bne.n	800400c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	2200      	movs	r2, #0
 8004004:	2103      	movs	r1, #3
 8004006:	4618      	mov	r0, r3
 8004008:	f7fe fc18 	bl	800283c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4618      	mov	r0, r3
 8004012:	f7fe fdab 	bl	8002b6c <LL_ADC_IsEnabled>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	f040 813d 	bne.w	8004298 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6818      	ldr	r0, [r3, #0]
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	6819      	ldr	r1, [r3, #0]
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	461a      	mov	r2, r3
 800402c:	f7fe fce8 	bl	8002a00 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	68db      	ldr	r3, [r3, #12]
 8004034:	4aa2      	ldr	r2, [pc, #648]	@ (80042c0 <HAL_ADC_ConfigChannel+0x6dc>)
 8004036:	4293      	cmp	r3, r2
 8004038:	f040 812e 	bne.w	8004298 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10b      	bne.n	8004064 <HAL_ADC_ConfigChannel+0x480>
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	0e9b      	lsrs	r3, r3, #26
 8004052:	3301      	adds	r3, #1
 8004054:	f003 031f 	and.w	r3, r3, #31
 8004058:	2b09      	cmp	r3, #9
 800405a:	bf94      	ite	ls
 800405c:	2301      	movls	r3, #1
 800405e:	2300      	movhi	r3, #0
 8004060:	b2db      	uxtb	r3, r3
 8004062:	e019      	b.n	8004098 <HAL_ADC_ConfigChannel+0x4b4>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800406a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800406c:	fa93 f3a3 	rbit	r3, r3
 8004070:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8004072:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8004074:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8004076:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004078:	2b00      	cmp	r3, #0
 800407a:	d101      	bne.n	8004080 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 800407c:	2320      	movs	r3, #32
 800407e:	e003      	b.n	8004088 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8004080:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004082:	fab3 f383 	clz	r3, r3
 8004086:	b2db      	uxtb	r3, r3
 8004088:	3301      	adds	r3, #1
 800408a:	f003 031f 	and.w	r3, r3, #31
 800408e:	2b09      	cmp	r3, #9
 8004090:	bf94      	ite	ls
 8004092:	2301      	movls	r3, #1
 8004094:	2300      	movhi	r3, #0
 8004096:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004098:	2b00      	cmp	r3, #0
 800409a:	d079      	beq.n	8004190 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d107      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x4d4>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	0e9b      	lsrs	r3, r3, #26
 80040ae:	3301      	adds	r3, #1
 80040b0:	069b      	lsls	r3, r3, #26
 80040b2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040b6:	e015      	b.n	80040e4 <HAL_ADC_ConfigChannel+0x500>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80040c0:	fa93 f3a3 	rbit	r3, r3
 80040c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80040c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80040c8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80040ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80040d0:	2320      	movs	r3, #32
 80040d2:	e003      	b.n	80040dc <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80040d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80040d6:	fab3 f383 	clz	r3, r3
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	3301      	adds	r3, #1
 80040de:	069b      	lsls	r3, r3, #26
 80040e0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d109      	bne.n	8004104 <HAL_ADC_ConfigChannel+0x520>
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	0e9b      	lsrs	r3, r3, #26
 80040f6:	3301      	adds	r3, #1
 80040f8:	f003 031f 	and.w	r3, r3, #31
 80040fc:	2101      	movs	r1, #1
 80040fe:	fa01 f303 	lsl.w	r3, r1, r3
 8004102:	e017      	b.n	8004134 <HAL_ADC_ConfigChannel+0x550>
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800410a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800410c:	fa93 f3a3 	rbit	r3, r3
 8004110:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8004112:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004114:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8004116:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004118:	2b00      	cmp	r3, #0
 800411a:	d101      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800411c:	2320      	movs	r3, #32
 800411e:	e003      	b.n	8004128 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8004120:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004122:	fab3 f383 	clz	r3, r3
 8004126:	b2db      	uxtb	r3, r3
 8004128:	3301      	adds	r3, #1
 800412a:	f003 031f 	and.w	r3, r3, #31
 800412e:	2101      	movs	r1, #1
 8004130:	fa01 f303 	lsl.w	r3, r1, r3
 8004134:	ea42 0103 	orr.w	r1, r2, r3
 8004138:	683b      	ldr	r3, [r7, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004140:	2b00      	cmp	r3, #0
 8004142:	d10a      	bne.n	800415a <HAL_ADC_ConfigChannel+0x576>
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	0e9b      	lsrs	r3, r3, #26
 800414a:	3301      	adds	r3, #1
 800414c:	f003 021f 	and.w	r2, r3, #31
 8004150:	4613      	mov	r3, r2
 8004152:	005b      	lsls	r3, r3, #1
 8004154:	4413      	add	r3, r2
 8004156:	051b      	lsls	r3, r3, #20
 8004158:	e018      	b.n	800418c <HAL_ADC_ConfigChannel+0x5a8>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004160:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004162:	fa93 f3a3 	rbit	r3, r3
 8004166:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004168:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800416a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 800416c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800416e:	2b00      	cmp	r3, #0
 8004170:	d101      	bne.n	8004176 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8004172:	2320      	movs	r3, #32
 8004174:	e003      	b.n	800417e <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8004176:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004178:	fab3 f383 	clz	r3, r3
 800417c:	b2db      	uxtb	r3, r3
 800417e:	3301      	adds	r3, #1
 8004180:	f003 021f 	and.w	r2, r3, #31
 8004184:	4613      	mov	r3, r2
 8004186:	005b      	lsls	r3, r3, #1
 8004188:	4413      	add	r3, r2
 800418a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800418c:	430b      	orrs	r3, r1
 800418e:	e07e      	b.n	800428e <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004198:	2b00      	cmp	r3, #0
 800419a:	d107      	bne.n	80041ac <HAL_ADC_ConfigChannel+0x5c8>
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	0e9b      	lsrs	r3, r3, #26
 80041a2:	3301      	adds	r3, #1
 80041a4:	069b      	lsls	r3, r3, #26
 80041a6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041aa:	e015      	b.n	80041d8 <HAL_ADC_ConfigChannel+0x5f4>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80041b4:	fa93 f3a3 	rbit	r3, r3
 80041b8:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80041ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041bc:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80041be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80041c4:	2320      	movs	r3, #32
 80041c6:	e003      	b.n	80041d0 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80041c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041ca:	fab3 f383 	clz	r3, r3
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	3301      	adds	r3, #1
 80041d2:	069b      	lsls	r3, r3, #26
 80041d4:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d109      	bne.n	80041f8 <HAL_ADC_ConfigChannel+0x614>
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	0e9b      	lsrs	r3, r3, #26
 80041ea:	3301      	adds	r3, #1
 80041ec:	f003 031f 	and.w	r3, r3, #31
 80041f0:	2101      	movs	r1, #1
 80041f2:	fa01 f303 	lsl.w	r3, r1, r3
 80041f6:	e017      	b.n	8004228 <HAL_ADC_ConfigChannel+0x644>
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	fa93 f3a3 	rbit	r3, r3
 8004204:	61fb      	str	r3, [r7, #28]
  return result;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 800420a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800420c:	2b00      	cmp	r3, #0
 800420e:	d101      	bne.n	8004214 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8004210:	2320      	movs	r3, #32
 8004212:	e003      	b.n	800421c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8004214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004216:	fab3 f383 	clz	r3, r3
 800421a:	b2db      	uxtb	r3, r3
 800421c:	3301      	adds	r3, #1
 800421e:	f003 031f 	and.w	r3, r3, #31
 8004222:	2101      	movs	r1, #1
 8004224:	fa01 f303 	lsl.w	r3, r1, r3
 8004228:	ea42 0103 	orr.w	r1, r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10d      	bne.n	8004254 <HAL_ADC_ConfigChannel+0x670>
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	0e9b      	lsrs	r3, r3, #26
 800423e:	3301      	adds	r3, #1
 8004240:	f003 021f 	and.w	r2, r3, #31
 8004244:	4613      	mov	r3, r2
 8004246:	005b      	lsls	r3, r3, #1
 8004248:	4413      	add	r3, r2
 800424a:	3b1e      	subs	r3, #30
 800424c:	051b      	lsls	r3, r3, #20
 800424e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004252:	e01b      	b.n	800428c <HAL_ADC_ConfigChannel+0x6a8>
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	fa93 f3a3 	rbit	r3, r3
 8004260:	613b      	str	r3, [r7, #16]
  return result;
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	2b00      	cmp	r3, #0
 800426a:	d101      	bne.n	8004270 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 800426c:	2320      	movs	r3, #32
 800426e:	e003      	b.n	8004278 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8004270:	69bb      	ldr	r3, [r7, #24]
 8004272:	fab3 f383 	clz	r3, r3
 8004276:	b2db      	uxtb	r3, r3
 8004278:	3301      	adds	r3, #1
 800427a:	f003 021f 	and.w	r2, r3, #31
 800427e:	4613      	mov	r3, r2
 8004280:	005b      	lsls	r3, r3, #1
 8004282:	4413      	add	r3, r2
 8004284:	3b1e      	subs	r3, #30
 8004286:	051b      	lsls	r3, r3, #20
 8004288:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800428c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800428e:	683a      	ldr	r2, [r7, #0]
 8004290:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004292:	4619      	mov	r1, r3
 8004294:	f7fe fb88 	bl	80029a8 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681a      	ldr	r2, [r3, #0]
 800429c:	4b09      	ldr	r3, [pc, #36]	@ (80042c4 <HAL_ADC_ConfigChannel+0x6e0>)
 800429e:	4013      	ands	r3, r2
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	f000 80be 	beq.w	8004422 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80042ae:	d004      	beq.n	80042ba <HAL_ADC_ConfigChannel+0x6d6>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a04      	ldr	r2, [pc, #16]	@ (80042c8 <HAL_ADC_ConfigChannel+0x6e4>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d10a      	bne.n	80042d0 <HAL_ADC_ConfigChannel+0x6ec>
 80042ba:	4b04      	ldr	r3, [pc, #16]	@ (80042cc <HAL_ADC_ConfigChannel+0x6e8>)
 80042bc:	e009      	b.n	80042d2 <HAL_ADC_ConfigChannel+0x6ee>
 80042be:	bf00      	nop
 80042c0:	407f0000 	.word	0x407f0000
 80042c4:	80080000 	.word	0x80080000
 80042c8:	50000100 	.word	0x50000100
 80042cc:	50000300 	.word	0x50000300
 80042d0:	4b59      	ldr	r3, [pc, #356]	@ (8004438 <HAL_ADC_ConfigChannel+0x854>)
 80042d2:	4618      	mov	r0, r3
 80042d4:	f7fe fa6a 	bl	80027ac <LL_ADC_GetCommonPathInternalCh>
 80042d8:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a56      	ldr	r2, [pc, #344]	@ (800443c <HAL_ADC_ConfigChannel+0x858>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d004      	beq.n	80042f0 <HAL_ADC_ConfigChannel+0x70c>
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a55      	ldr	r2, [pc, #340]	@ (8004440 <HAL_ADC_ConfigChannel+0x85c>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d13a      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80042f0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80042f4:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d134      	bne.n	8004366 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004304:	d005      	beq.n	8004312 <HAL_ADC_ConfigChannel+0x72e>
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	4a4e      	ldr	r2, [pc, #312]	@ (8004444 <HAL_ADC_ConfigChannel+0x860>)
 800430c:	4293      	cmp	r3, r2
 800430e:	f040 8085 	bne.w	800441c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800431a:	d004      	beq.n	8004326 <HAL_ADC_ConfigChannel+0x742>
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4a49      	ldr	r2, [pc, #292]	@ (8004448 <HAL_ADC_ConfigChannel+0x864>)
 8004322:	4293      	cmp	r3, r2
 8004324:	d101      	bne.n	800432a <HAL_ADC_ConfigChannel+0x746>
 8004326:	4a49      	ldr	r2, [pc, #292]	@ (800444c <HAL_ADC_ConfigChannel+0x868>)
 8004328:	e000      	b.n	800432c <HAL_ADC_ConfigChannel+0x748>
 800432a:	4a43      	ldr	r2, [pc, #268]	@ (8004438 <HAL_ADC_ConfigChannel+0x854>)
 800432c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004330:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8004334:	4619      	mov	r1, r3
 8004336:	4610      	mov	r0, r2
 8004338:	f7fe fa25 	bl	8002786 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800433c:	4b44      	ldr	r3, [pc, #272]	@ (8004450 <HAL_ADC_ConfigChannel+0x86c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	099b      	lsrs	r3, r3, #6
 8004342:	4a44      	ldr	r2, [pc, #272]	@ (8004454 <HAL_ADC_ConfigChannel+0x870>)
 8004344:	fba2 2303 	umull	r2, r3, r2, r3
 8004348:	099b      	lsrs	r3, r3, #6
 800434a:	1c5a      	adds	r2, r3, #1
 800434c:	4613      	mov	r3, r2
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	4413      	add	r3, r2
 8004352:	009b      	lsls	r3, r3, #2
 8004354:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004356:	e002      	b.n	800435e <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3b01      	subs	r3, #1
 800435c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d1f9      	bne.n	8004358 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004364:	e05a      	b.n	800441c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a3b      	ldr	r2, [pc, #236]	@ (8004458 <HAL_ADC_ConfigChannel+0x874>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d125      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004370:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8004374:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d11f      	bne.n	80043bc <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	4a31      	ldr	r2, [pc, #196]	@ (8004448 <HAL_ADC_ConfigChannel+0x864>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d104      	bne.n	8004390 <HAL_ADC_ConfigChannel+0x7ac>
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4a34      	ldr	r2, [pc, #208]	@ (800445c <HAL_ADC_ConfigChannel+0x878>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d047      	beq.n	8004420 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004398:	d004      	beq.n	80043a4 <HAL_ADC_ConfigChannel+0x7c0>
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a2a      	ldr	r2, [pc, #168]	@ (8004448 <HAL_ADC_ConfigChannel+0x864>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d101      	bne.n	80043a8 <HAL_ADC_ConfigChannel+0x7c4>
 80043a4:	4a29      	ldr	r2, [pc, #164]	@ (800444c <HAL_ADC_ConfigChannel+0x868>)
 80043a6:	e000      	b.n	80043aa <HAL_ADC_ConfigChannel+0x7c6>
 80043a8:	4a23      	ldr	r2, [pc, #140]	@ (8004438 <HAL_ADC_ConfigChannel+0x854>)
 80043aa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043ae:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043b2:	4619      	mov	r1, r3
 80043b4:	4610      	mov	r0, r2
 80043b6:	f7fe f9e6 	bl	8002786 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80043ba:	e031      	b.n	8004420 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a27      	ldr	r2, [pc, #156]	@ (8004460 <HAL_ADC_ConfigChannel+0x87c>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d12d      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80043c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d127      	bne.n	8004422 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4a1c      	ldr	r2, [pc, #112]	@ (8004448 <HAL_ADC_ConfigChannel+0x864>)
 80043d8:	4293      	cmp	r3, r2
 80043da:	d022      	beq.n	8004422 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80043e4:	d004      	beq.n	80043f0 <HAL_ADC_ConfigChannel+0x80c>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a17      	ldr	r2, [pc, #92]	@ (8004448 <HAL_ADC_ConfigChannel+0x864>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d101      	bne.n	80043f4 <HAL_ADC_ConfigChannel+0x810>
 80043f0:	4a16      	ldr	r2, [pc, #88]	@ (800444c <HAL_ADC_ConfigChannel+0x868>)
 80043f2:	e000      	b.n	80043f6 <HAL_ADC_ConfigChannel+0x812>
 80043f4:	4a10      	ldr	r2, [pc, #64]	@ (8004438 <HAL_ADC_ConfigChannel+0x854>)
 80043f6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80043fa:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80043fe:	4619      	mov	r1, r3
 8004400:	4610      	mov	r0, r2
 8004402:	f7fe f9c0 	bl	8002786 <LL_ADC_SetCommonPathInternalCh>
 8004406:	e00c      	b.n	8004422 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800440c:	f043 0220 	orr.w	r2, r3, #32
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
 800441a:	e002      	b.n	8004422 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800441c:	bf00      	nop
 800441e:	e000      	b.n	8004422 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004420:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800442a:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800442e:	4618      	mov	r0, r3
 8004430:	37d8      	adds	r7, #216	@ 0xd8
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}
 8004436:	bf00      	nop
 8004438:	50000700 	.word	0x50000700
 800443c:	c3210000 	.word	0xc3210000
 8004440:	90c00010 	.word	0x90c00010
 8004444:	50000600 	.word	0x50000600
 8004448:	50000100 	.word	0x50000100
 800444c:	50000300 	.word	0x50000300
 8004450:	20000094 	.word	0x20000094
 8004454:	053e2d63 	.word	0x053e2d63
 8004458:	c7520000 	.word	0xc7520000
 800445c:	50000500 	.word	0x50000500
 8004460:	cb840000 	.word	0xcb840000

08004464 <ADC_ConversionStop>:
  *            @arg @ref ADC_INJECTED_GROUP          ADC injected conversion type.
  *            @arg @ref ADC_REGULAR_INJECTED_GROUP  ADC regular and injected conversion type.
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc, uint32_t ConversionGroup)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t Conversion_Timeout_CPU_cycles = 0UL;
 800446e:	2300      	movs	r3, #0
 8004470:	61fb      	str	r3, [r7, #28]
  uint32_t conversion_group_reassigned = ConversionGroup;
 8004472:	683b      	ldr	r3, [r7, #0]
 8004474:	61bb      	str	r3, [r7, #24]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));

  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe fbc4 	bl	8002c08 <LL_ADC_REG_IsConversionOngoing>
 8004480:	6138      	str	r0, [r7, #16]
  tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f7fe fbe5 	bl	8002c56 <LL_ADC_INJ_IsConversionOngoing>
 800448c:	60f8      	str	r0, [r7, #12]
  if ((tmp_adc_is_conversion_on_going_regular != 0UL)
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d103      	bne.n	800449c <ADC_ConversionStop+0x38>
      || (tmp_adc_is_conversion_on_going_injected != 0UL)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2b00      	cmp	r3, #0
 8004498:	f000 8098 	beq.w	80045cc <ADC_ConversionStop+0x168>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if (((hadc->Instance->CFGR & ADC_CFGR_JAUTO) != 0UL)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d02a      	beq.n	8004500 <ADC_ConversionStop+0x9c>
        && (hadc->Init.ContinuousConvMode == ENABLE)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	7f5b      	ldrb	r3, [r3, #29]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d126      	bne.n	8004500 <ADC_ConversionStop+0x9c>
        && (hadc->Init.LowPowerAutoWait == ENABLE)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	7f1b      	ldrb	r3, [r3, #28]
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d122      	bne.n	8004500 <ADC_ConversionStop+0x9c>
       )
    {
      /* Use stop of regular group */
      conversion_group_reassigned = ADC_REGULAR_GROUP;
 80044ba:	2301      	movs	r3, #1
 80044bc:	61bb      	str	r3, [r7, #24]

      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80044be:	e014      	b.n	80044ea <ADC_ConversionStop+0x86>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES * 4UL))
 80044c0:	69fb      	ldr	r3, [r7, #28]
 80044c2:	4a45      	ldr	r2, [pc, #276]	@ (80045d8 <ADC_ConversionStop+0x174>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d90d      	bls.n	80044e4 <ADC_ConversionStop+0x80>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80044cc:	f043 0210 	orr.w	r2, r3, #16
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044d8:	f043 0201 	orr.w	r2, r3, #1
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	e074      	b.n	80045ce <ADC_ConversionStop+0x16a>
        }
        Conversion_Timeout_CPU_cycles ++;
 80044e4:	69fb      	ldr	r3, [r7, #28]
 80044e6:	3301      	adds	r3, #1
 80044e8:	61fb      	str	r3, [r7, #28]
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == 0UL)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044f4:	2b40      	cmp	r3, #64	@ 0x40
 80044f6:	d1e3      	bne.n	80044c0 <ADC_ConversionStop+0x5c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2240      	movs	r2, #64	@ 0x40
 80044fe:	601a      	str	r2, [r3, #0]
    }

    /* Stop potential conversion on going on ADC group regular */
    if (conversion_group_reassigned != ADC_INJECTED_GROUP)
 8004500:	69bb      	ldr	r3, [r7, #24]
 8004502:	2b02      	cmp	r3, #2
 8004504:	d014      	beq.n	8004530 <ADC_ConversionStop+0xcc>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4618      	mov	r0, r3
 800450c:	f7fe fb7c 	bl	8002c08 <LL_ADC_REG_IsConversionOngoing>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00c      	beq.n	8004530 <ADC_ConversionStop+0xcc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	4618      	mov	r0, r3
 800451c:	f7fe fb39 	bl	8002b92 <LL_ADC_IsDisableOngoing>
 8004520:	4603      	mov	r3, r0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d104      	bne.n	8004530 <ADC_ConversionStop+0xcc>
        {
          /* Stop ADC group regular conversion */
          LL_ADC_REG_StopConversion(hadc->Instance);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4618      	mov	r0, r3
 800452c:	f7fe fb58 	bl	8002be0 <LL_ADC_REG_StopConversion>
        }
      }
    }

    /* Stop potential conversion on going on ADC group injected */
    if (conversion_group_reassigned != ADC_REGULAR_GROUP)
 8004530:	69bb      	ldr	r3, [r7, #24]
 8004532:	2b01      	cmp	r3, #1
 8004534:	d014      	beq.n	8004560 <ADC_ConversionStop+0xfc>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0 */
      if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) != 0UL)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4618      	mov	r0, r3
 800453c:	f7fe fb8b 	bl	8002c56 <LL_ADC_INJ_IsConversionOngoing>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d00c      	beq.n	8004560 <ADC_ConversionStop+0xfc>
      {
        if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	4618      	mov	r0, r3
 800454c:	f7fe fb21 	bl	8002b92 <LL_ADC_IsDisableOngoing>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d104      	bne.n	8004560 <ADC_ConversionStop+0xfc>
        {
          /* Stop ADC group injected conversion */
          LL_ADC_INJ_StopConversion(hadc->Instance);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fe fb67 	bl	8002c2e <LL_ADC_INJ_StopConversion>
        }
      }
    }

    /* Selection of start and stop bits with respect to the regular or injected group */
    switch (conversion_group_reassigned)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b02      	cmp	r3, #2
 8004564:	d005      	beq.n	8004572 <ADC_ConversionStop+0x10e>
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	2b03      	cmp	r3, #3
 800456a:	d105      	bne.n	8004578 <ADC_ConversionStop+0x114>
    {
      case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800456c:	230c      	movs	r3, #12
 800456e:	617b      	str	r3, [r7, #20]
        break;
 8004570:	e005      	b.n	800457e <ADC_ConversionStop+0x11a>
      case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8004572:	2308      	movs	r3, #8
 8004574:	617b      	str	r3, [r7, #20]
        break;
 8004576:	e002      	b.n	800457e <ADC_ConversionStop+0x11a>
      /* Case ADC_REGULAR_GROUP only*/
      default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8004578:	2304      	movs	r3, #4
 800457a:	617b      	str	r3, [r7, #20]
        break;
 800457c:	bf00      	nop
    }

    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 800457e:	f7fe f8c1 	bl	8002704 <HAL_GetTick>
 8004582:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004584:	e01b      	b.n	80045be <ADC_ConversionStop+0x15a>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8004586:	f7fe f8bd 	bl	8002704 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b05      	cmp	r3, #5
 8004592:	d914      	bls.n	80045be <ADC_ConversionStop+0x15a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689a      	ldr	r2, [r3, #8]
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	4013      	ands	r3, r2
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d00d      	beq.n	80045be <ADC_ConversionStop+0x15a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80045a6:	f043 0210 	orr.w	r2, r3, #16
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80045b2:	f043 0201 	orr.w	r2, r3, #1
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e007      	b.n	80045ce <ADC_ConversionStop+0x16a>
    while ((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != 0UL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689a      	ldr	r2, [r3, #8]
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d1dc      	bne.n	8004586 <ADC_ConversionStop+0x122>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3720      	adds	r7, #32
 80045d2:	46bd      	mov	sp, r7
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	bf00      	nop
 80045d8:	a33fffff 	.word	0xa33fffff

080045dc <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b084      	sub	sp, #16
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80045e4:	2300      	movs	r3, #0
 80045e6:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4618      	mov	r0, r3
 80045ee:	f7fe fabd 	bl	8002b6c <LL_ADC_IsEnabled>
 80045f2:	4603      	mov	r3, r0
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d176      	bne.n	80046e6 <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	689a      	ldr	r2, [r3, #8]
 80045fe:	4b3c      	ldr	r3, [pc, #240]	@ (80046f0 <ADC_Enable+0x114>)
 8004600:	4013      	ands	r3, r2
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00d      	beq.n	8004622 <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800460a:	f043 0210 	orr.w	r2, r3, #16
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004616:	f043 0201 	orr.w	r2, r3, #1
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e062      	b.n	80046e8 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fe fa78 	bl	8002b1c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004634:	d004      	beq.n	8004640 <ADC_Enable+0x64>
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4a2e      	ldr	r2, [pc, #184]	@ (80046f4 <ADC_Enable+0x118>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d101      	bne.n	8004644 <ADC_Enable+0x68>
 8004640:	4b2d      	ldr	r3, [pc, #180]	@ (80046f8 <ADC_Enable+0x11c>)
 8004642:	e000      	b.n	8004646 <ADC_Enable+0x6a>
 8004644:	4b2d      	ldr	r3, [pc, #180]	@ (80046fc <ADC_Enable+0x120>)
 8004646:	4618      	mov	r0, r3
 8004648:	f7fe f8b0 	bl	80027ac <LL_ADC_GetCommonPathInternalCh>
 800464c:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800464e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8004652:	2b00      	cmp	r3, #0
 8004654:	d013      	beq.n	800467e <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004656:	4b2a      	ldr	r3, [pc, #168]	@ (8004700 <ADC_Enable+0x124>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	099b      	lsrs	r3, r3, #6
 800465c:	4a29      	ldr	r2, [pc, #164]	@ (8004704 <ADC_Enable+0x128>)
 800465e:	fba2 2303 	umull	r2, r3, r2, r3
 8004662:	099b      	lsrs	r3, r3, #6
 8004664:	1c5a      	adds	r2, r3, #1
 8004666:	4613      	mov	r3, r2
 8004668:	005b      	lsls	r3, r3, #1
 800466a:	4413      	add	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004670:	e002      	b.n	8004678 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	3b01      	subs	r3, #1
 8004676:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d1f9      	bne.n	8004672 <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800467e:	f7fe f841 	bl	8002704 <HAL_GetTick>
 8004682:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004684:	e028      	b.n	80046d8 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4618      	mov	r0, r3
 800468c:	f7fe fa6e 	bl	8002b6c <LL_ADC_IsEnabled>
 8004690:	4603      	mov	r3, r0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d104      	bne.n	80046a0 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	4618      	mov	r0, r3
 800469c:	f7fe fa3e 	bl	8002b1c <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80046a0:	f7fe f830 	bl	8002704 <HAL_GetTick>
 80046a4:	4602      	mov	r2, r0
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	1ad3      	subs	r3, r2, r3
 80046aa:	2b02      	cmp	r3, #2
 80046ac:	d914      	bls.n	80046d8 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	f003 0301 	and.w	r3, r3, #1
 80046b8:	2b01      	cmp	r3, #1
 80046ba:	d00d      	beq.n	80046d8 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c0:	f043 0210 	orr.w	r2, r3, #16
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80046cc:	f043 0201 	orr.w	r2, r3, #1
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	e007      	b.n	80046e8 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f003 0301 	and.w	r3, r3, #1
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d1cf      	bne.n	8004686 <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80046e6:	2300      	movs	r3, #0
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	3710      	adds	r7, #16
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	8000003f 	.word	0x8000003f
 80046f4:	50000100 	.word	0x50000100
 80046f8:	50000300 	.word	0x50000300
 80046fc:	50000700 	.word	0x50000700
 8004700:	20000094 	.word	0x20000094
 8004704:	053e2d63 	.word	0x053e2d63

08004708 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b084      	sub	sp, #16
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	4618      	mov	r0, r3
 8004716:	f7fe fa3c 	bl	8002b92 <LL_ADC_IsDisableOngoing>
 800471a:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe fa23 	bl	8002b6c <LL_ADC_IsEnabled>
 8004726:	4603      	mov	r3, r0
 8004728:	2b00      	cmp	r3, #0
 800472a:	d047      	beq.n	80047bc <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d144      	bne.n	80047bc <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f003 030d 	and.w	r3, r3, #13
 800473c:	2b01      	cmp	r3, #1
 800473e:	d10c      	bne.n	800475a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f7fe f9fd 	bl	8002b44 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2203      	movs	r2, #3
 8004750:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8004752:	f7fd ffd7 	bl	8002704 <HAL_GetTick>
 8004756:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004758:	e029      	b.n	80047ae <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800475e:	f043 0210 	orr.w	r2, r3, #16
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	65da      	str	r2, [r3, #92]	@ 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800476a:	f043 0201 	orr.w	r2, r3, #1
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_ERROR;
 8004772:	2301      	movs	r3, #1
 8004774:	e023      	b.n	80047be <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004776:	f7fd ffc5 	bl	8002704 <HAL_GetTick>
 800477a:	4602      	mov	r2, r0
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b02      	cmp	r3, #2
 8004782:	d914      	bls.n	80047ae <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	f003 0301 	and.w	r3, r3, #1
 800478e:	2b00      	cmp	r3, #0
 8004790:	d00d      	beq.n	80047ae <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004796:	f043 0210 	orr.w	r2, r3, #16
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80047a2:	f043 0201 	orr.w	r2, r3, #1
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
 80047ac:	e007      	b.n	80047be <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 0301 	and.w	r3, r3, #1
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d1dc      	bne.n	8004776 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80047bc:	2300      	movs	r3, #0
}
 80047be:	4618      	mov	r0, r3
 80047c0:	3710      	adds	r7, #16
 80047c2:	46bd      	mov	sp, r7
 80047c4:	bd80      	pop	{r7, pc}

080047c6 <LL_ADC_IsEnabled>:
{
 80047c6:	b480      	push	{r7}
 80047c8:	b083      	sub	sp, #12
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	689b      	ldr	r3, [r3, #8]
 80047d2:	f003 0301 	and.w	r3, r3, #1
 80047d6:	2b01      	cmp	r3, #1
 80047d8:	d101      	bne.n	80047de <LL_ADC_IsEnabled+0x18>
 80047da:	2301      	movs	r3, #1
 80047dc:	e000      	b.n	80047e0 <LL_ADC_IsEnabled+0x1a>
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <LL_ADC_StartCalibration>:
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	689b      	ldr	r3, [r3, #8]
 80047fa:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80047fe:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8004808:	4313      	orrs	r3, r2
 800480a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	609a      	str	r2, [r3, #8]
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr

0800481e <LL_ADC_IsCalibrationOnGoing>:
{
 800481e:	b480      	push	{r7}
 8004820:	b083      	sub	sp, #12
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800482e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004832:	d101      	bne.n	8004838 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	370c      	adds	r7, #12
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr

08004846 <LL_ADC_REG_IsConversionOngoing>:
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f003 0304 	and.w	r3, r3, #4
 8004856:	2b04      	cmp	r3, #4
 8004858:	d101      	bne.n	800485e <LL_ADC_REG_IsConversionOngoing+0x18>
 800485a:	2301      	movs	r3, #1
 800485c:	e000      	b.n	8004860 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800485e:	2300      	movs	r3, #0
}
 8004860:	4618      	mov	r0, r3
 8004862:	370c      	adds	r7, #12
 8004864:	46bd      	mov	sp, r7
 8004866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486a:	4770      	bx	lr

0800486c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8004876:	2300      	movs	r3, #0
 8004878:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8004880:	2b01      	cmp	r3, #1
 8004882:	d101      	bne.n	8004888 <HAL_ADCEx_Calibration_Start+0x1c>
 8004884:	2302      	movs	r3, #2
 8004886:	e04d      	b.n	8004924 <HAL_ADCEx_Calibration_Start+0xb8>
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2201      	movs	r2, #1
 800488c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff ff39 	bl	8004708 <ADC_Disable>
 8004896:	4603      	mov	r3, r0
 8004898:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 800489a:	7bfb      	ldrb	r3, [r7, #15]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d136      	bne.n	800490e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048a4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80048a8:	f023 0302 	bic.w	r3, r3, #2
 80048ac:	f043 0202 	orr.w	r2, r3, #2
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	65da      	str	r2, [r3, #92]	@ 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	6839      	ldr	r1, [r7, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff ff96 	bl	80047ec <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048c0:	e014      	b.n	80048ec <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	3301      	adds	r3, #1
 80048c6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 80048c8:	68bb      	ldr	r3, [r7, #8]
 80048ca:	4a18      	ldr	r2, [pc, #96]	@ (800492c <HAL_ADCEx_Calibration_Start+0xc0>)
 80048cc:	4293      	cmp	r3, r2
 80048ce:	d90d      	bls.n	80048ec <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80048d4:	f023 0312 	bic.w	r3, r3, #18
 80048d8:	f043 0210 	orr.w	r2, r3, #16
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	65da      	str	r2, [r3, #92]	@ 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2200      	movs	r2, #0
 80048e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        return HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e01b      	b.n	8004924 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff ff94 	bl	800481e <LL_ADC_IsCalibrationOnGoing>
 80048f6:	4603      	mov	r3, r0
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d1e2      	bne.n	80048c2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004900:	f023 0303 	bic.w	r3, r3, #3
 8004904:	f043 0201 	orr.w	r2, r3, #1
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800490c:	e005      	b.n	800491a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004912:	f043 0210 	orr.w	r2, r3, #16
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2200      	movs	r2, #0
 800491e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004922:	7bfb      	ldrb	r3, [r7, #15]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3710      	adds	r7, #16
 8004928:	46bd      	mov	sp, r7
 800492a:	bd80      	pop	{r7, pc}
 800492c:	0004de01 	.word	0x0004de01

08004930 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8004930:	b480      	push	{r7}
 8004932:	b083      	sub	sp, #12
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8004938:	bf00      	nop
 800493a:	370c      	adds	r7, #12
 800493c:	46bd      	mov	sp, r7
 800493e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004942:	4770      	bx	lr

08004944 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8004944:	b480      	push	{r7}
 8004946:	b083      	sub	sp, #12
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 800494c:	bf00      	nop
 800494e:	370c      	adds	r7, #12
 8004950:	46bd      	mov	sp, r7
 8004952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004956:	4770      	bx	lr

08004958 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8004958:	b480      	push	{r7}
 800495a:	b083      	sub	sp, #12
 800495c:	af00      	add	r7, sp, #0
 800495e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr

0800496c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 800496c:	b480      	push	{r7}
 800496e:	b083      	sub	sp, #12
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8004974:	bf00      	nop
 8004976:	370c      	adds	r7, #12
 8004978:	46bd      	mov	sp, r7
 800497a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497e:	4770      	bx	lr

08004980 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8004980:	b480      	push	{r7}
 8004982:	b083      	sub	sp, #12
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8004988:	bf00      	nop
 800498a:	370c      	adds	r7, #12
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8004994:	b590      	push	{r4, r7, lr}
 8004996:	b0a1      	sub	sp, #132	@ 0x84
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800499e:	2300      	movs	r3, #0
 80049a0:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d101      	bne.n	80049b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80049ae:	2302      	movs	r3, #2
 80049b0:	e0e7      	b.n	8004b82 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	2201      	movs	r2, #1
 80049b6:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 80049ba:	2300      	movs	r3, #0
 80049bc:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 80049be:	2300      	movs	r3, #0
 80049c0:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80049ca:	d102      	bne.n	80049d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80049cc:	4b6f      	ldr	r3, [pc, #444]	@ (8004b8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80049ce:	60bb      	str	r3, [r7, #8]
 80049d0:	e009      	b.n	80049e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	4a6e      	ldr	r2, [pc, #440]	@ (8004b90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 80049d8:	4293      	cmp	r3, r2
 80049da:	d102      	bne.n	80049e2 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 80049dc:	4b6d      	ldr	r3, [pc, #436]	@ (8004b94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 80049de:	60bb      	str	r3, [r7, #8]
 80049e0:	e001      	b.n	80049e6 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 80049e2:	2300      	movs	r3, #0
 80049e4:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80049e6:	68bb      	ldr	r3, [r7, #8]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d10b      	bne.n	8004a04 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80049f0:	f043 0220 	orr.w	r2, r3, #32
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 8004a00:	2301      	movs	r3, #1
 8004a02:	e0be      	b.n	8004b82 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8004a04:	68bb      	ldr	r3, [r7, #8]
 8004a06:	4618      	mov	r0, r3
 8004a08:	f7ff ff1d 	bl	8004846 <LL_ADC_REG_IsConversionOngoing>
 8004a0c:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4618      	mov	r0, r3
 8004a14:	f7ff ff17 	bl	8004846 <LL_ADC_REG_IsConversionOngoing>
 8004a18:	4603      	mov	r3, r0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	f040 80a0 	bne.w	8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8004a20:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f040 809c 	bne.w	8004b60 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a30:	d004      	beq.n	8004a3c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a55      	ldr	r2, [pc, #340]	@ (8004b8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d101      	bne.n	8004a40 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004a3c:	4b56      	ldr	r3, [pc, #344]	@ (8004b98 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004a3e:	e000      	b.n	8004a42 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004a40:	4b56      	ldr	r3, [pc, #344]	@ (8004b9c <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8004a42:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d04b      	beq.n	8004ae4 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004a4c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a4e:	689b      	ldr	r3, [r3, #8]
 8004a50:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	6859      	ldr	r1, [r3, #4]
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8004a5e:	035b      	lsls	r3, r3, #13
 8004a60:	430b      	orrs	r3, r1
 8004a62:	431a      	orrs	r2, r3
 8004a64:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004a66:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004a70:	d004      	beq.n	8004a7c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a45      	ldr	r2, [pc, #276]	@ (8004b8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d10f      	bne.n	8004a9c <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004a7c:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004a80:	f7ff fea1 	bl	80047c6 <LL_ADC_IsEnabled>
 8004a84:	4604      	mov	r4, r0
 8004a86:	4841      	ldr	r0, [pc, #260]	@ (8004b8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004a88:	f7ff fe9d 	bl	80047c6 <LL_ADC_IsEnabled>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	4323      	orrs	r3, r4
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	bf0c      	ite	eq
 8004a94:	2301      	moveq	r3, #1
 8004a96:	2300      	movne	r3, #0
 8004a98:	b2db      	uxtb	r3, r3
 8004a9a:	e012      	b.n	8004ac2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004a9c:	483c      	ldr	r0, [pc, #240]	@ (8004b90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004a9e:	f7ff fe92 	bl	80047c6 <LL_ADC_IsEnabled>
 8004aa2:	4604      	mov	r4, r0
 8004aa4:	483b      	ldr	r0, [pc, #236]	@ (8004b94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004aa6:	f7ff fe8e 	bl	80047c6 <LL_ADC_IsEnabled>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	431c      	orrs	r4, r3
 8004aae:	483c      	ldr	r0, [pc, #240]	@ (8004ba0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004ab0:	f7ff fe89 	bl	80047c6 <LL_ADC_IsEnabled>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4323      	orrs	r3, r4
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	bf0c      	ite	eq
 8004abc:	2301      	moveq	r3, #1
 8004abe:	2300      	movne	r3, #0
 8004ac0:	b2db      	uxtb	r3, r3
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d056      	beq.n	8004b74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004ac6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ac8:	689b      	ldr	r3, [r3, #8]
 8004aca:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004ace:	f023 030f 	bic.w	r3, r3, #15
 8004ad2:	683a      	ldr	r2, [r7, #0]
 8004ad4:	6811      	ldr	r1, [r2, #0]
 8004ad6:	683a      	ldr	r2, [r7, #0]
 8004ad8:	6892      	ldr	r2, [r2, #8]
 8004ada:	430a      	orrs	r2, r1
 8004adc:	431a      	orrs	r2, r3
 8004ade:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae0:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004ae2:	e047      	b.n	8004b74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004ae4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004aec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004aee:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004af8:	d004      	beq.n	8004b04 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a23      	ldr	r2, [pc, #140]	@ (8004b8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d10f      	bne.n	8004b24 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8004b04:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8004b08:	f7ff fe5d 	bl	80047c6 <LL_ADC_IsEnabled>
 8004b0c:	4604      	mov	r4, r0
 8004b0e:	481f      	ldr	r0, [pc, #124]	@ (8004b8c <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004b10:	f7ff fe59 	bl	80047c6 <LL_ADC_IsEnabled>
 8004b14:	4603      	mov	r3, r0
 8004b16:	4323      	orrs	r3, r4
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	bf0c      	ite	eq
 8004b1c:	2301      	moveq	r3, #1
 8004b1e:	2300      	movne	r3, #0
 8004b20:	b2db      	uxtb	r3, r3
 8004b22:	e012      	b.n	8004b4a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8004b24:	481a      	ldr	r0, [pc, #104]	@ (8004b90 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004b26:	f7ff fe4e 	bl	80047c6 <LL_ADC_IsEnabled>
 8004b2a:	4604      	mov	r4, r0
 8004b2c:	4819      	ldr	r0, [pc, #100]	@ (8004b94 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004b2e:	f7ff fe4a 	bl	80047c6 <LL_ADC_IsEnabled>
 8004b32:	4603      	mov	r3, r0
 8004b34:	431c      	orrs	r4, r3
 8004b36:	481a      	ldr	r0, [pc, #104]	@ (8004ba0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004b38:	f7ff fe45 	bl	80047c6 <LL_ADC_IsEnabled>
 8004b3c:	4603      	mov	r3, r0
 8004b3e:	4323      	orrs	r3, r4
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	bf0c      	ite	eq
 8004b44:	2301      	moveq	r3, #1
 8004b46:	2300      	movne	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d012      	beq.n	8004b74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004b4e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8004b56:	f023 030f 	bic.w	r3, r3, #15
 8004b5a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8004b5c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b5e:	e009      	b.n	8004b74 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004b64:	f043 0220 	orr.w	r2, r3, #32
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8004b72:	e000      	b.n	8004b76 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8004b74:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8004b7e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8004b82:	4618      	mov	r0, r3
 8004b84:	3784      	adds	r7, #132	@ 0x84
 8004b86:	46bd      	mov	sp, r7
 8004b88:	bd90      	pop	{r4, r7, pc}
 8004b8a:	bf00      	nop
 8004b8c:	50000100 	.word	0x50000100
 8004b90:	50000400 	.word	0x50000400
 8004b94:	50000500 	.word	0x50000500
 8004b98:	50000300 	.word	0x50000300
 8004b9c:	50000700 	.word	0x50000700
 8004ba0:	50000600 	.word	0x50000600

08004ba4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ba4:	b480      	push	{r7}
 8004ba6:	b085      	sub	sp, #20
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	f003 0307 	and.w	r3, r3, #7
 8004bb2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8004be8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004bba:	68ba      	ldr	r2, [r7, #8]
 8004bbc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004bcc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004bd0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004bd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004bd6:	4a04      	ldr	r2, [pc, #16]	@ (8004be8 <__NVIC_SetPriorityGrouping+0x44>)
 8004bd8:	68bb      	ldr	r3, [r7, #8]
 8004bda:	60d3      	str	r3, [r2, #12]
}
 8004bdc:	bf00      	nop
 8004bde:	3714      	adds	r7, #20
 8004be0:	46bd      	mov	sp, r7
 8004be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be6:	4770      	bx	lr
 8004be8:	e000ed00 	.word	0xe000ed00

08004bec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004bec:	b480      	push	{r7}
 8004bee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004bf0:	4b04      	ldr	r3, [pc, #16]	@ (8004c04 <__NVIC_GetPriorityGrouping+0x18>)
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	0a1b      	lsrs	r3, r3, #8
 8004bf6:	f003 0307 	and.w	r3, r3, #7
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr
 8004c04:	e000ed00 	.word	0xe000ed00

08004c08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004c08:	b480      	push	{r7}
 8004c0a:	b083      	sub	sp, #12
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	4603      	mov	r3, r0
 8004c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	db0b      	blt.n	8004c32 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004c1a:	79fb      	ldrb	r3, [r7, #7]
 8004c1c:	f003 021f 	and.w	r2, r3, #31
 8004c20:	4907      	ldr	r1, [pc, #28]	@ (8004c40 <__NVIC_EnableIRQ+0x38>)
 8004c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c26:	095b      	lsrs	r3, r3, #5
 8004c28:	2001      	movs	r0, #1
 8004c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8004c2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004c32:	bf00      	nop
 8004c34:	370c      	adds	r7, #12
 8004c36:	46bd      	mov	sp, r7
 8004c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c3c:	4770      	bx	lr
 8004c3e:	bf00      	nop
 8004c40:	e000e100 	.word	0xe000e100

08004c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	6039      	str	r1, [r7, #0]
 8004c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	db0a      	blt.n	8004c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	b2da      	uxtb	r2, r3
 8004c5c:	490c      	ldr	r1, [pc, #48]	@ (8004c90 <__NVIC_SetPriority+0x4c>)
 8004c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004c62:	0112      	lsls	r2, r2, #4
 8004c64:	b2d2      	uxtb	r2, r2
 8004c66:	440b      	add	r3, r1
 8004c68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004c6c:	e00a      	b.n	8004c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	b2da      	uxtb	r2, r3
 8004c72:	4908      	ldr	r1, [pc, #32]	@ (8004c94 <__NVIC_SetPriority+0x50>)
 8004c74:	79fb      	ldrb	r3, [r7, #7]
 8004c76:	f003 030f 	and.w	r3, r3, #15
 8004c7a:	3b04      	subs	r3, #4
 8004c7c:	0112      	lsls	r2, r2, #4
 8004c7e:	b2d2      	uxtb	r2, r2
 8004c80:	440b      	add	r3, r1
 8004c82:	761a      	strb	r2, [r3, #24]
}
 8004c84:	bf00      	nop
 8004c86:	370c      	adds	r7, #12
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8e:	4770      	bx	lr
 8004c90:	e000e100 	.word	0xe000e100
 8004c94:	e000ed00 	.word	0xe000ed00

08004c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b089      	sub	sp, #36	@ 0x24
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	60f8      	str	r0, [r7, #12]
 8004ca0:	60b9      	str	r1, [r7, #8]
 8004ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f003 0307 	and.w	r3, r3, #7
 8004caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	f1c3 0307 	rsb	r3, r3, #7
 8004cb2:	2b04      	cmp	r3, #4
 8004cb4:	bf28      	it	cs
 8004cb6:	2304      	movcs	r3, #4
 8004cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004cba:	69fb      	ldr	r3, [r7, #28]
 8004cbc:	3304      	adds	r3, #4
 8004cbe:	2b06      	cmp	r3, #6
 8004cc0:	d902      	bls.n	8004cc8 <NVIC_EncodePriority+0x30>
 8004cc2:	69fb      	ldr	r3, [r7, #28]
 8004cc4:	3b03      	subs	r3, #3
 8004cc6:	e000      	b.n	8004cca <NVIC_EncodePriority+0x32>
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ccc:	f04f 32ff 	mov.w	r2, #4294967295
 8004cd0:	69bb      	ldr	r3, [r7, #24]
 8004cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004cd6:	43da      	mvns	r2, r3
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	401a      	ands	r2, r3
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8004cea:	43d9      	mvns	r1, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004cf0:	4313      	orrs	r3, r2
         );
}
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	3724      	adds	r7, #36	@ 0x24
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
	...

08004d00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
 8004d06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004d10:	d301      	bcc.n	8004d16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004d12:	2301      	movs	r3, #1
 8004d14:	e00f      	b.n	8004d36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004d16:	4a0a      	ldr	r2, [pc, #40]	@ (8004d40 <SysTick_Config+0x40>)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004d1e:	210f      	movs	r1, #15
 8004d20:	f04f 30ff 	mov.w	r0, #4294967295
 8004d24:	f7ff ff8e 	bl	8004c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004d28:	4b05      	ldr	r3, [pc, #20]	@ (8004d40 <SysTick_Config+0x40>)
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004d2e:	4b04      	ldr	r3, [pc, #16]	@ (8004d40 <SysTick_Config+0x40>)
 8004d30:	2207      	movs	r2, #7
 8004d32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	e000e010 	.word	0xe000e010

08004d44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b082      	sub	sp, #8
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004d4c:	6878      	ldr	r0, [r7, #4]
 8004d4e:	f7ff ff29 	bl	8004ba4 <__NVIC_SetPriorityGrouping>
}
 8004d52:	bf00      	nop
 8004d54:	3708      	adds	r7, #8
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b086      	sub	sp, #24
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	4603      	mov	r3, r0
 8004d62:	60b9      	str	r1, [r7, #8]
 8004d64:	607a      	str	r2, [r7, #4]
 8004d66:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004d68:	f7ff ff40 	bl	8004bec <__NVIC_GetPriorityGrouping>
 8004d6c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	68b9      	ldr	r1, [r7, #8]
 8004d72:	6978      	ldr	r0, [r7, #20]
 8004d74:	f7ff ff90 	bl	8004c98 <NVIC_EncodePriority>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004d7e:	4611      	mov	r1, r2
 8004d80:	4618      	mov	r0, r3
 8004d82:	f7ff ff5f 	bl	8004c44 <__NVIC_SetPriority>
}
 8004d86:	bf00      	nop
 8004d88:	3718      	adds	r7, #24
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}

08004d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	4603      	mov	r3, r0
 8004d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	f7ff ff33 	bl	8004c08 <__NVIC_EnableIRQ>
}
 8004da2:	bf00      	nop
 8004da4:	3708      	adds	r7, #8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b082      	sub	sp, #8
 8004dae:	af00      	add	r7, sp, #0
 8004db0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004db2:	6878      	ldr	r0, [r7, #4]
 8004db4:	f7ff ffa4 	bl	8004d00 <SysTick_Config>
 8004db8:	4603      	mov	r3, r0
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3708      	adds	r7, #8
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b087      	sub	sp, #28
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
 8004dcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004dd2:	e15a      	b.n	800508a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004dd4:	683b      	ldr	r3, [r7, #0]
 8004dd6:	681a      	ldr	r2, [r3, #0]
 8004dd8:	2101      	movs	r1, #1
 8004dda:	697b      	ldr	r3, [r7, #20]
 8004ddc:	fa01 f303 	lsl.w	r3, r1, r3
 8004de0:	4013      	ands	r3, r2
 8004de2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	f000 814c 	beq.w	8005084 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	685b      	ldr	r3, [r3, #4]
 8004df0:	f003 0303 	and.w	r3, r3, #3
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d005      	beq.n	8004e04 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004e00:	2b02      	cmp	r3, #2
 8004e02:	d130      	bne.n	8004e66 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	005b      	lsls	r3, r3, #1
 8004e0e:	2203      	movs	r2, #3
 8004e10:	fa02 f303 	lsl.w	r3, r2, r3
 8004e14:	43db      	mvns	r3, r3
 8004e16:	693a      	ldr	r2, [r7, #16]
 8004e18:	4013      	ands	r3, r2
 8004e1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	68da      	ldr	r2, [r3, #12]
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	005b      	lsls	r3, r3, #1
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	4313      	orrs	r3, r2
 8004e2c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	693a      	ldr	r2, [r7, #16]
 8004e32:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e42:	43db      	mvns	r3, r3
 8004e44:	693a      	ldr	r2, [r7, #16]
 8004e46:	4013      	ands	r3, r2
 8004e48:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	091b      	lsrs	r3, r3, #4
 8004e50:	f003 0201 	and.w	r2, r3, #1
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	fa02 f303 	lsl.w	r3, r2, r3
 8004e5a:	693a      	ldr	r2, [r7, #16]
 8004e5c:	4313      	orrs	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f003 0303 	and.w	r3, r3, #3
 8004e6e:	2b03      	cmp	r3, #3
 8004e70:	d017      	beq.n	8004ea2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	68db      	ldr	r3, [r3, #12]
 8004e76:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004e78:	697b      	ldr	r3, [r7, #20]
 8004e7a:	005b      	lsls	r3, r3, #1
 8004e7c:	2203      	movs	r2, #3
 8004e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e82:	43db      	mvns	r3, r3
 8004e84:	693a      	ldr	r2, [r7, #16]
 8004e86:	4013      	ands	r3, r2
 8004e88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	689a      	ldr	r2, [r3, #8]
 8004e8e:	697b      	ldr	r3, [r7, #20]
 8004e90:	005b      	lsls	r3, r3, #1
 8004e92:	fa02 f303 	lsl.w	r3, r2, r3
 8004e96:	693a      	ldr	r2, [r7, #16]
 8004e98:	4313      	orrs	r3, r2
 8004e9a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	693a      	ldr	r2, [r7, #16]
 8004ea0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	685b      	ldr	r3, [r3, #4]
 8004ea6:	f003 0303 	and.w	r3, r3, #3
 8004eaa:	2b02      	cmp	r3, #2
 8004eac:	d123      	bne.n	8004ef6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004eae:	697b      	ldr	r3, [r7, #20]
 8004eb0:	08da      	lsrs	r2, r3, #3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	3208      	adds	r2, #8
 8004eb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eba:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	f003 0307 	and.w	r3, r3, #7
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	220f      	movs	r2, #15
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ed2:	683b      	ldr	r3, [r7, #0]
 8004ed4:	691a      	ldr	r2, [r3, #16]
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f003 0307 	and.w	r3, r3, #7
 8004edc:	009b      	lsls	r3, r3, #2
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	08da      	lsrs	r2, r3, #3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	3208      	adds	r2, #8
 8004ef0:	6939      	ldr	r1, [r7, #16]
 8004ef2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	005b      	lsls	r3, r3, #1
 8004f00:	2203      	movs	r2, #3
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43db      	mvns	r3, r3
 8004f08:	693a      	ldr	r2, [r7, #16]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f003 0203 	and.w	r2, r3, #3
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	005b      	lsls	r3, r3, #1
 8004f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	f000 80a6 	beq.w	8005084 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f38:	4b5b      	ldr	r3, [pc, #364]	@ (80050a8 <HAL_GPIO_Init+0x2e4>)
 8004f3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f3c:	4a5a      	ldr	r2, [pc, #360]	@ (80050a8 <HAL_GPIO_Init+0x2e4>)
 8004f3e:	f043 0301 	orr.w	r3, r3, #1
 8004f42:	6613      	str	r3, [r2, #96]	@ 0x60
 8004f44:	4b58      	ldr	r3, [pc, #352]	@ (80050a8 <HAL_GPIO_Init+0x2e4>)
 8004f46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f48:	f003 0301 	and.w	r3, r3, #1
 8004f4c:	60bb      	str	r3, [r7, #8]
 8004f4e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004f50:	4a56      	ldr	r2, [pc, #344]	@ (80050ac <HAL_GPIO_Init+0x2e8>)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	089b      	lsrs	r3, r3, #2
 8004f56:	3302      	adds	r3, #2
 8004f58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004f5e:	697b      	ldr	r3, [r7, #20]
 8004f60:	f003 0303 	and.w	r3, r3, #3
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	220f      	movs	r2, #15
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	693a      	ldr	r2, [r7, #16]
 8004f70:	4013      	ands	r3, r2
 8004f72:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004f7a:	d01f      	beq.n	8004fbc <HAL_GPIO_Init+0x1f8>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a4c      	ldr	r2, [pc, #304]	@ (80050b0 <HAL_GPIO_Init+0x2ec>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d019      	beq.n	8004fb8 <HAL_GPIO_Init+0x1f4>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a4b      	ldr	r2, [pc, #300]	@ (80050b4 <HAL_GPIO_Init+0x2f0>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d013      	beq.n	8004fb4 <HAL_GPIO_Init+0x1f0>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	4a4a      	ldr	r2, [pc, #296]	@ (80050b8 <HAL_GPIO_Init+0x2f4>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d00d      	beq.n	8004fb0 <HAL_GPIO_Init+0x1ec>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	4a49      	ldr	r2, [pc, #292]	@ (80050bc <HAL_GPIO_Init+0x2f8>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d007      	beq.n	8004fac <HAL_GPIO_Init+0x1e8>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	4a48      	ldr	r2, [pc, #288]	@ (80050c0 <HAL_GPIO_Init+0x2fc>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d101      	bne.n	8004fa8 <HAL_GPIO_Init+0x1e4>
 8004fa4:	2305      	movs	r3, #5
 8004fa6:	e00a      	b.n	8004fbe <HAL_GPIO_Init+0x1fa>
 8004fa8:	2306      	movs	r3, #6
 8004faa:	e008      	b.n	8004fbe <HAL_GPIO_Init+0x1fa>
 8004fac:	2304      	movs	r3, #4
 8004fae:	e006      	b.n	8004fbe <HAL_GPIO_Init+0x1fa>
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e004      	b.n	8004fbe <HAL_GPIO_Init+0x1fa>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e002      	b.n	8004fbe <HAL_GPIO_Init+0x1fa>
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e000      	b.n	8004fbe <HAL_GPIO_Init+0x1fa>
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	697a      	ldr	r2, [r7, #20]
 8004fc0:	f002 0203 	and.w	r2, r2, #3
 8004fc4:	0092      	lsls	r2, r2, #2
 8004fc6:	4093      	lsls	r3, r2
 8004fc8:	693a      	ldr	r2, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004fce:	4937      	ldr	r1, [pc, #220]	@ (80050ac <HAL_GPIO_Init+0x2e8>)
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	089b      	lsrs	r3, r3, #2
 8004fd4:	3302      	adds	r3, #2
 8004fd6:	693a      	ldr	r2, [r7, #16]
 8004fd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004fdc:	4b39      	ldr	r3, [pc, #228]	@ (80050c4 <HAL_GPIO_Init+0x300>)
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	43db      	mvns	r3, r3
 8004fe6:	693a      	ldr	r2, [r7, #16]
 8004fe8:	4013      	ands	r3, r2
 8004fea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004fec:	683b      	ldr	r3, [r7, #0]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d003      	beq.n	8005000 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004ff8:	693a      	ldr	r2, [r7, #16]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005000:	4a30      	ldr	r2, [pc, #192]	@ (80050c4 <HAL_GPIO_Init+0x300>)
 8005002:	693b      	ldr	r3, [r7, #16]
 8005004:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005006:	4b2f      	ldr	r3, [pc, #188]	@ (80050c4 <HAL_GPIO_Init+0x300>)
 8005008:	68db      	ldr	r3, [r3, #12]
 800500a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	43db      	mvns	r3, r3
 8005010:	693a      	ldr	r2, [r7, #16]
 8005012:	4013      	ands	r3, r2
 8005014:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	685b      	ldr	r3, [r3, #4]
 800501a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d003      	beq.n	800502a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	4313      	orrs	r3, r2
 8005028:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800502a:	4a26      	ldr	r2, [pc, #152]	@ (80050c4 <HAL_GPIO_Init+0x300>)
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005030:	4b24      	ldr	r3, [pc, #144]	@ (80050c4 <HAL_GPIO_Init+0x300>)
 8005032:	685b      	ldr	r3, [r3, #4]
 8005034:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	43db      	mvns	r3, r3
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4013      	ands	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005048:	2b00      	cmp	r3, #0
 800504a:	d003      	beq.n	8005054 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005054:	4a1b      	ldr	r2, [pc, #108]	@ (80050c4 <HAL_GPIO_Init+0x300>)
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800505a:	4b1a      	ldr	r3, [pc, #104]	@ (80050c4 <HAL_GPIO_Init+0x300>)
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	43db      	mvns	r3, r3
 8005064:	693a      	ldr	r2, [r7, #16]
 8005066:	4013      	ands	r3, r2
 8005068:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005076:	693a      	ldr	r2, [r7, #16]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	4313      	orrs	r3, r2
 800507c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800507e:	4a11      	ldr	r2, [pc, #68]	@ (80050c4 <HAL_GPIO_Init+0x300>)
 8005080:	693b      	ldr	r3, [r7, #16]
 8005082:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	3301      	adds	r3, #1
 8005088:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681a      	ldr	r2, [r3, #0]
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	fa22 f303 	lsr.w	r3, r2, r3
 8005094:	2b00      	cmp	r3, #0
 8005096:	f47f ae9d 	bne.w	8004dd4 <HAL_GPIO_Init+0x10>
  }
}
 800509a:	bf00      	nop
 800509c:	bf00      	nop
 800509e:	371c      	adds	r7, #28
 80050a0:	46bd      	mov	sp, r7
 80050a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a6:	4770      	bx	lr
 80050a8:	40021000 	.word	0x40021000
 80050ac:	40010000 	.word	0x40010000
 80050b0:	48000400 	.word	0x48000400
 80050b4:	48000800 	.word	0x48000800
 80050b8:	48000c00 	.word	0x48000c00
 80050bc:	48001000 	.word	0x48001000
 80050c0:	48001400 	.word	0x48001400
 80050c4:	40010400 	.word	0x40010400

080050c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	460b      	mov	r3, r1
 80050d2:	807b      	strh	r3, [r7, #2]
 80050d4:	4613      	mov	r3, r2
 80050d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80050d8:	787b      	ldrb	r3, [r7, #1]
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d003      	beq.n	80050e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80050de:	887a      	ldrh	r2, [r7, #2]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80050e4:	e002      	b.n	80050ec <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80050e6:	887a      	ldrh	r2, [r7, #2]
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80050ec:	bf00      	nop
 80050ee:	370c      	adds	r7, #12
 80050f0:	46bd      	mov	sp, r7
 80050f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f6:	4770      	bx	lr

080050f8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b085      	sub	sp, #20
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
 8005100:	460b      	mov	r3, r1
 8005102:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800510a:	887a      	ldrh	r2, [r7, #2]
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	4013      	ands	r3, r2
 8005110:	041a      	lsls	r2, r3, #16
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	43d9      	mvns	r1, r3
 8005116:	887b      	ldrh	r3, [r7, #2]
 8005118:	400b      	ands	r3, r1
 800511a:	431a      	orrs	r2, r3
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	619a      	str	r2, [r3, #24]
}
 8005120:	bf00      	nop
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b082      	sub	sp, #8
 8005130:	af00      	add	r7, sp, #0
 8005132:	4603      	mov	r3, r0
 8005134:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005136:	4b08      	ldr	r3, [pc, #32]	@ (8005158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005138:	695a      	ldr	r2, [r3, #20]
 800513a:	88fb      	ldrh	r3, [r7, #6]
 800513c:	4013      	ands	r3, r2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d006      	beq.n	8005150 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005142:	4a05      	ldr	r2, [pc, #20]	@ (8005158 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005144:	88fb      	ldrh	r3, [r7, #6]
 8005146:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005148:	88fb      	ldrh	r3, [r7, #6]
 800514a:	4618      	mov	r0, r3
 800514c:	f7fc fedc 	bl	8001f08 <HAL_GPIO_EXTI_Callback>
  }
}
 8005150:	bf00      	nop
 8005152:	3708      	adds	r7, #8
 8005154:	46bd      	mov	sp, r7
 8005156:	bd80      	pop	{r7, pc}
 8005158:	40010400 	.word	0x40010400

0800515c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800515c:	b480      	push	{r7}
 800515e:	b085      	sub	sp, #20
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d141      	bne.n	80051ee <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800516a:	4b4b      	ldr	r3, [pc, #300]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005176:	d131      	bne.n	80051dc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005178:	4b47      	ldr	r3, [pc, #284]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800517a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800517e:	4a46      	ldr	r2, [pc, #280]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005180:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005184:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005188:	4b43      	ldr	r3, [pc, #268]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005190:	4a41      	ldr	r2, [pc, #260]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005192:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005196:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005198:	4b40      	ldr	r3, [pc, #256]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	2232      	movs	r2, #50	@ 0x32
 800519e:	fb02 f303 	mul.w	r3, r2, r3
 80051a2:	4a3f      	ldr	r2, [pc, #252]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80051a4:	fba2 2303 	umull	r2, r3, r2, r3
 80051a8:	0c9b      	lsrs	r3, r3, #18
 80051aa:	3301      	adds	r3, #1
 80051ac:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051ae:	e002      	b.n	80051b6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	3b01      	subs	r3, #1
 80051b4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80051b6:	4b38      	ldr	r3, [pc, #224]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051b8:	695b      	ldr	r3, [r3, #20]
 80051ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051be:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051c2:	d102      	bne.n	80051ca <HAL_PWREx_ControlVoltageScaling+0x6e>
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d1f2      	bne.n	80051b0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80051ca:	4b33      	ldr	r3, [pc, #204]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051cc:	695b      	ldr	r3, [r3, #20]
 80051ce:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80051d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80051d6:	d158      	bne.n	800528a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80051d8:	2303      	movs	r3, #3
 80051da:	e057      	b.n	800528c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80051dc:	4b2e      	ldr	r3, [pc, #184]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051de:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80051e2:	4a2d      	ldr	r2, [pc, #180]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051e4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80051e8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80051ec:	e04d      	b.n	800528a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80051f4:	d141      	bne.n	800527a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80051f6:	4b28      	ldr	r3, [pc, #160]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80051fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005202:	d131      	bne.n	8005268 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005204:	4b24      	ldr	r3, [pc, #144]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005206:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800520a:	4a23      	ldr	r2, [pc, #140]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800520c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005210:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005214:	4b20      	ldr	r3, [pc, #128]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800521c:	4a1e      	ldr	r2, [pc, #120]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800521e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005222:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005224:	4b1d      	ldr	r3, [pc, #116]	@ (800529c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	2232      	movs	r2, #50	@ 0x32
 800522a:	fb02 f303 	mul.w	r3, r2, r3
 800522e:	4a1c      	ldr	r2, [pc, #112]	@ (80052a0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005230:	fba2 2303 	umull	r2, r3, r2, r3
 8005234:	0c9b      	lsrs	r3, r3, #18
 8005236:	3301      	adds	r3, #1
 8005238:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800523a:	e002      	b.n	8005242 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3b01      	subs	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005242:	4b15      	ldr	r3, [pc, #84]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800524a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800524e:	d102      	bne.n	8005256 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f2      	bne.n	800523c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005256:	4b10      	ldr	r3, [pc, #64]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800525e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005262:	d112      	bne.n	800528a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005264:	2303      	movs	r3, #3
 8005266:	e011      	b.n	800528c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005268:	4b0b      	ldr	r3, [pc, #44]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800526a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800526e:	4a0a      	ldr	r2, [pc, #40]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005270:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005274:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005278:	e007      	b.n	800528a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800527a:	4b07      	ldr	r3, [pc, #28]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005282:	4a05      	ldr	r2, [pc, #20]	@ (8005298 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005284:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005288:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800528a:	2300      	movs	r3, #0
}
 800528c:	4618      	mov	r0, r3
 800528e:	3714      	adds	r7, #20
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr
 8005298:	40007000 	.word	0x40007000
 800529c:	20000094 	.word	0x20000094
 80052a0:	431bde83 	.word	0x431bde83

080052a4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80052a4:	b480      	push	{r7}
 80052a6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80052a8:	4b05      	ldr	r3, [pc, #20]	@ (80052c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052aa:	689b      	ldr	r3, [r3, #8]
 80052ac:	4a04      	ldr	r2, [pc, #16]	@ (80052c0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80052ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80052b2:	6093      	str	r3, [r2, #8]
}
 80052b4:	bf00      	nop
 80052b6:	46bd      	mov	sp, r7
 80052b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052bc:	4770      	bx	lr
 80052be:	bf00      	nop
 80052c0:	40007000 	.word	0x40007000

080052c4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d101      	bne.n	80052d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80052d2:	2301      	movs	r3, #1
 80052d4:	e2fe      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0301 	and.w	r3, r3, #1
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d075      	beq.n	80053ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80052e2:	4b97      	ldr	r3, [pc, #604]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 80052e4:	689b      	ldr	r3, [r3, #8]
 80052e6:	f003 030c 	and.w	r3, r3, #12
 80052ea:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80052ec:	4b94      	ldr	r3, [pc, #592]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	f003 0303 	and.w	r3, r3, #3
 80052f4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80052f6:	69bb      	ldr	r3, [r7, #24]
 80052f8:	2b0c      	cmp	r3, #12
 80052fa:	d102      	bne.n	8005302 <HAL_RCC_OscConfig+0x3e>
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	2b03      	cmp	r3, #3
 8005300:	d002      	beq.n	8005308 <HAL_RCC_OscConfig+0x44>
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	2b08      	cmp	r3, #8
 8005306:	d10b      	bne.n	8005320 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005308:	4b8d      	ldr	r3, [pc, #564]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d05b      	beq.n	80053cc <HAL_RCC_OscConfig+0x108>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2b00      	cmp	r3, #0
 800531a:	d157      	bne.n	80053cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800531c:	2301      	movs	r3, #1
 800531e:	e2d9      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005328:	d106      	bne.n	8005338 <HAL_RCC_OscConfig+0x74>
 800532a:	4b85      	ldr	r3, [pc, #532]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	4a84      	ldr	r2, [pc, #528]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005330:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005334:	6013      	str	r3, [r2, #0]
 8005336:	e01d      	b.n	8005374 <HAL_RCC_OscConfig+0xb0>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005340:	d10c      	bne.n	800535c <HAL_RCC_OscConfig+0x98>
 8005342:	4b7f      	ldr	r3, [pc, #508]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a7e      	ldr	r2, [pc, #504]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005348:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800534c:	6013      	str	r3, [r2, #0]
 800534e:	4b7c      	ldr	r3, [pc, #496]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4a7b      	ldr	r2, [pc, #492]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005358:	6013      	str	r3, [r2, #0]
 800535a:	e00b      	b.n	8005374 <HAL_RCC_OscConfig+0xb0>
 800535c:	4b78      	ldr	r3, [pc, #480]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	4a77      	ldr	r2, [pc, #476]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005362:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005366:	6013      	str	r3, [r2, #0]
 8005368:	4b75      	ldr	r3, [pc, #468]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	4a74      	ldr	r2, [pc, #464]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 800536e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005372:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	685b      	ldr	r3, [r3, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d013      	beq.n	80053a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fd f9c2 	bl	8002704 <HAL_GetTick>
 8005380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005382:	e008      	b.n	8005396 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005384:	f7fd f9be 	bl	8002704 <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	693b      	ldr	r3, [r7, #16]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	2b64      	cmp	r3, #100	@ 0x64
 8005390:	d901      	bls.n	8005396 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005392:	2303      	movs	r3, #3
 8005394:	e29e      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005396:	4b6a      	ldr	r3, [pc, #424]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d0f0      	beq.n	8005384 <HAL_RCC_OscConfig+0xc0>
 80053a2:	e014      	b.n	80053ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053a4:	f7fd f9ae 	bl	8002704 <HAL_GetTick>
 80053a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053aa:	e008      	b.n	80053be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80053ac:	f7fd f9aa 	bl	8002704 <HAL_GetTick>
 80053b0:	4602      	mov	r2, r0
 80053b2:	693b      	ldr	r3, [r7, #16]
 80053b4:	1ad3      	subs	r3, r2, r3
 80053b6:	2b64      	cmp	r3, #100	@ 0x64
 80053b8:	d901      	bls.n	80053be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80053ba:	2303      	movs	r3, #3
 80053bc:	e28a      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80053be:	4b60      	ldr	r3, [pc, #384]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d1f0      	bne.n	80053ac <HAL_RCC_OscConfig+0xe8>
 80053ca:	e000      	b.n	80053ce <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f003 0302 	and.w	r3, r3, #2
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d075      	beq.n	80054c6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053da:	4b59      	ldr	r3, [pc, #356]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 030c 	and.w	r3, r3, #12
 80053e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053e4:	4b56      	ldr	r3, [pc, #344]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 80053e6:	68db      	ldr	r3, [r3, #12]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80053ee:	69bb      	ldr	r3, [r7, #24]
 80053f0:	2b0c      	cmp	r3, #12
 80053f2:	d102      	bne.n	80053fa <HAL_RCC_OscConfig+0x136>
 80053f4:	697b      	ldr	r3, [r7, #20]
 80053f6:	2b02      	cmp	r3, #2
 80053f8:	d002      	beq.n	8005400 <HAL_RCC_OscConfig+0x13c>
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d11f      	bne.n	8005440 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005400:	4b4f      	ldr	r3, [pc, #316]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005408:	2b00      	cmp	r3, #0
 800540a:	d005      	beq.n	8005418 <HAL_RCC_OscConfig+0x154>
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d101      	bne.n	8005418 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005414:	2301      	movs	r3, #1
 8005416:	e25d      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005418:	4b49      	ldr	r3, [pc, #292]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	061b      	lsls	r3, r3, #24
 8005426:	4946      	ldr	r1, [pc, #280]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005428:	4313      	orrs	r3, r2
 800542a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800542c:	4b45      	ldr	r3, [pc, #276]	@ (8005544 <HAL_RCC_OscConfig+0x280>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4618      	mov	r0, r3
 8005432:	f7fd f91b 	bl	800266c <HAL_InitTick>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d043      	beq.n	80054c4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	e249      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	68db      	ldr	r3, [r3, #12]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d023      	beq.n	8005490 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005448:	4b3d      	ldr	r3, [pc, #244]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a3c      	ldr	r2, [pc, #240]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 800544e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005452:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fd f956 	bl	8002704 <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800545c:	f7fd f952 	bl	8002704 <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e232      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800546e:	4b34      	ldr	r3, [pc, #208]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800547a:	4b31      	ldr	r3, [pc, #196]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	061b      	lsls	r3, r3, #24
 8005488:	492d      	ldr	r1, [pc, #180]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 800548a:	4313      	orrs	r3, r2
 800548c:	604b      	str	r3, [r1, #4]
 800548e:	e01a      	b.n	80054c6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005490:	4b2b      	ldr	r3, [pc, #172]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	4a2a      	ldr	r2, [pc, #168]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005496:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800549a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800549c:	f7fd f932 	bl	8002704 <HAL_GetTick>
 80054a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054a2:	e008      	b.n	80054b6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80054a4:	f7fd f92e 	bl	8002704 <HAL_GetTick>
 80054a8:	4602      	mov	r2, r0
 80054aa:	693b      	ldr	r3, [r7, #16]
 80054ac:	1ad3      	subs	r3, r2, r3
 80054ae:	2b02      	cmp	r3, #2
 80054b0:	d901      	bls.n	80054b6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80054b2:	2303      	movs	r3, #3
 80054b4:	e20e      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80054b6:	4b22      	ldr	r3, [pc, #136]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d1f0      	bne.n	80054a4 <HAL_RCC_OscConfig+0x1e0>
 80054c2:	e000      	b.n	80054c6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054c4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0308 	and.w	r3, r3, #8
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d041      	beq.n	8005556 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d01c      	beq.n	8005514 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054da:	4b19      	ldr	r3, [pc, #100]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 80054dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054e0:	4a17      	ldr	r2, [pc, #92]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054ea:	f7fd f90b 	bl	8002704 <HAL_GetTick>
 80054ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054f0:	e008      	b.n	8005504 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054f2:	f7fd f907 	bl	8002704 <HAL_GetTick>
 80054f6:	4602      	mov	r2, r0
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	1ad3      	subs	r3, r2, r3
 80054fc:	2b02      	cmp	r3, #2
 80054fe:	d901      	bls.n	8005504 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005500:	2303      	movs	r3, #3
 8005502:	e1e7      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005504:	4b0e      	ldr	r3, [pc, #56]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005506:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800550a:	f003 0302 	and.w	r3, r3, #2
 800550e:	2b00      	cmp	r3, #0
 8005510:	d0ef      	beq.n	80054f2 <HAL_RCC_OscConfig+0x22e>
 8005512:	e020      	b.n	8005556 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005514:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 8005516:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800551a:	4a09      	ldr	r2, [pc, #36]	@ (8005540 <HAL_RCC_OscConfig+0x27c>)
 800551c:	f023 0301 	bic.w	r3, r3, #1
 8005520:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005524:	f7fd f8ee 	bl	8002704 <HAL_GetTick>
 8005528:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800552a:	e00d      	b.n	8005548 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800552c:	f7fd f8ea 	bl	8002704 <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	693b      	ldr	r3, [r7, #16]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	2b02      	cmp	r3, #2
 8005538:	d906      	bls.n	8005548 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e1ca      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
 800553e:	bf00      	nop
 8005540:	40021000 	.word	0x40021000
 8005544:	20000098 	.word	0x20000098
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005548:	4b8c      	ldr	r3, [pc, #560]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 800554a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1ea      	bne.n	800552c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0304 	and.w	r3, r3, #4
 800555e:	2b00      	cmp	r3, #0
 8005560:	f000 80a6 	beq.w	80056b0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005564:	2300      	movs	r3, #0
 8005566:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005568:	4b84      	ldr	r3, [pc, #528]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 800556a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800556c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d101      	bne.n	8005578 <HAL_RCC_OscConfig+0x2b4>
 8005574:	2301      	movs	r3, #1
 8005576:	e000      	b.n	800557a <HAL_RCC_OscConfig+0x2b6>
 8005578:	2300      	movs	r3, #0
 800557a:	2b00      	cmp	r3, #0
 800557c:	d00d      	beq.n	800559a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800557e:	4b7f      	ldr	r3, [pc, #508]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 8005580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005582:	4a7e      	ldr	r2, [pc, #504]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 8005584:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005588:	6593      	str	r3, [r2, #88]	@ 0x58
 800558a:	4b7c      	ldr	r3, [pc, #496]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 800558c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800558e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005596:	2301      	movs	r3, #1
 8005598:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800559a:	4b79      	ldr	r3, [pc, #484]	@ (8005780 <HAL_RCC_OscConfig+0x4bc>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d118      	bne.n	80055d8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80055a6:	4b76      	ldr	r3, [pc, #472]	@ (8005780 <HAL_RCC_OscConfig+0x4bc>)
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	4a75      	ldr	r2, [pc, #468]	@ (8005780 <HAL_RCC_OscConfig+0x4bc>)
 80055ac:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055b2:	f7fd f8a7 	bl	8002704 <HAL_GetTick>
 80055b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055b8:	e008      	b.n	80055cc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055ba:	f7fd f8a3 	bl	8002704 <HAL_GetTick>
 80055be:	4602      	mov	r2, r0
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	1ad3      	subs	r3, r2, r3
 80055c4:	2b02      	cmp	r3, #2
 80055c6:	d901      	bls.n	80055cc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e183      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055cc:	4b6c      	ldr	r3, [pc, #432]	@ (8005780 <HAL_RCC_OscConfig+0x4bc>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d0f0      	beq.n	80055ba <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d108      	bne.n	80055f2 <HAL_RCC_OscConfig+0x32e>
 80055e0:	4b66      	ldr	r3, [pc, #408]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e6:	4a65      	ldr	r2, [pc, #404]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055f0:	e024      	b.n	800563c <HAL_RCC_OscConfig+0x378>
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b05      	cmp	r3, #5
 80055f8:	d110      	bne.n	800561c <HAL_RCC_OscConfig+0x358>
 80055fa:	4b60      	ldr	r3, [pc, #384]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 80055fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005600:	4a5e      	ldr	r2, [pc, #376]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 8005602:	f043 0304 	orr.w	r3, r3, #4
 8005606:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800560a:	4b5c      	ldr	r3, [pc, #368]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 800560c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005610:	4a5a      	ldr	r2, [pc, #360]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 8005612:	f043 0301 	orr.w	r3, r3, #1
 8005616:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800561a:	e00f      	b.n	800563c <HAL_RCC_OscConfig+0x378>
 800561c:	4b57      	ldr	r3, [pc, #348]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 800561e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005622:	4a56      	ldr	r2, [pc, #344]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 8005624:	f023 0301 	bic.w	r3, r3, #1
 8005628:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800562c:	4b53      	ldr	r3, [pc, #332]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 800562e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005632:	4a52      	ldr	r2, [pc, #328]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 8005634:	f023 0304 	bic.w	r3, r3, #4
 8005638:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d016      	beq.n	8005672 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005644:	f7fd f85e 	bl	8002704 <HAL_GetTick>
 8005648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800564a:	e00a      	b.n	8005662 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800564c:	f7fd f85a 	bl	8002704 <HAL_GetTick>
 8005650:	4602      	mov	r2, r0
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	1ad3      	subs	r3, r2, r3
 8005656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800565a:	4293      	cmp	r3, r2
 800565c:	d901      	bls.n	8005662 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800565e:	2303      	movs	r3, #3
 8005660:	e138      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005662:	4b46      	ldr	r3, [pc, #280]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 8005664:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005668:	f003 0302 	and.w	r3, r3, #2
 800566c:	2b00      	cmp	r3, #0
 800566e:	d0ed      	beq.n	800564c <HAL_RCC_OscConfig+0x388>
 8005670:	e015      	b.n	800569e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005672:	f7fd f847 	bl	8002704 <HAL_GetTick>
 8005676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005678:	e00a      	b.n	8005690 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567a:	f7fd f843 	bl	8002704 <HAL_GetTick>
 800567e:	4602      	mov	r2, r0
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005688:	4293      	cmp	r3, r2
 800568a:	d901      	bls.n	8005690 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800568c:	2303      	movs	r3, #3
 800568e:	e121      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005690:	4b3a      	ldr	r3, [pc, #232]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 8005692:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005696:	f003 0302 	and.w	r3, r3, #2
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1ed      	bne.n	800567a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800569e:	7ffb      	ldrb	r3, [r7, #31]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d105      	bne.n	80056b0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056a4:	4b35      	ldr	r3, [pc, #212]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 80056a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80056a8:	4a34      	ldr	r2, [pc, #208]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 80056aa:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056ae:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0320 	and.w	r3, r3, #32
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d03c      	beq.n	8005736 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d01c      	beq.n	80056fe <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056c4:	4b2d      	ldr	r3, [pc, #180]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 80056c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056ca:	4a2c      	ldr	r2, [pc, #176]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 80056cc:	f043 0301 	orr.w	r3, r3, #1
 80056d0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056d4:	f7fd f816 	bl	8002704 <HAL_GetTick>
 80056d8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056da:	e008      	b.n	80056ee <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056dc:	f7fd f812 	bl	8002704 <HAL_GetTick>
 80056e0:	4602      	mov	r2, r0
 80056e2:	693b      	ldr	r3, [r7, #16]
 80056e4:	1ad3      	subs	r3, r2, r3
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d901      	bls.n	80056ee <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80056ea:	2303      	movs	r3, #3
 80056ec:	e0f2      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056ee:	4b23      	ldr	r3, [pc, #140]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 80056f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056f4:	f003 0302 	and.w	r3, r3, #2
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d0ef      	beq.n	80056dc <HAL_RCC_OscConfig+0x418>
 80056fc:	e01b      	b.n	8005736 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056fe:	4b1f      	ldr	r3, [pc, #124]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 8005700:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005704:	4a1d      	ldr	r2, [pc, #116]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 8005706:	f023 0301 	bic.w	r3, r3, #1
 800570a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570e:	f7fc fff9 	bl	8002704 <HAL_GetTick>
 8005712:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005714:	e008      	b.n	8005728 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005716:	f7fc fff5 	bl	8002704 <HAL_GetTick>
 800571a:	4602      	mov	r2, r0
 800571c:	693b      	ldr	r3, [r7, #16]
 800571e:	1ad3      	subs	r3, r2, r3
 8005720:	2b02      	cmp	r3, #2
 8005722:	d901      	bls.n	8005728 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005724:	2303      	movs	r3, #3
 8005726:	e0d5      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005728:	4b14      	ldr	r3, [pc, #80]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 800572a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800572e:	f003 0302 	and.w	r3, r3, #2
 8005732:	2b00      	cmp	r3, #0
 8005734:	d1ef      	bne.n	8005716 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	69db      	ldr	r3, [r3, #28]
 800573a:	2b00      	cmp	r3, #0
 800573c:	f000 80c9 	beq.w	80058d2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005740:	4b0e      	ldr	r3, [pc, #56]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 8005742:	689b      	ldr	r3, [r3, #8]
 8005744:	f003 030c 	and.w	r3, r3, #12
 8005748:	2b0c      	cmp	r3, #12
 800574a:	f000 8083 	beq.w	8005854 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	69db      	ldr	r3, [r3, #28]
 8005752:	2b02      	cmp	r3, #2
 8005754:	d15e      	bne.n	8005814 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005756:	4b09      	ldr	r3, [pc, #36]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	4a08      	ldr	r2, [pc, #32]	@ (800577c <HAL_RCC_OscConfig+0x4b8>)
 800575c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005760:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005762:	f7fc ffcf 	bl	8002704 <HAL_GetTick>
 8005766:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005768:	e00c      	b.n	8005784 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800576a:	f7fc ffcb 	bl	8002704 <HAL_GetTick>
 800576e:	4602      	mov	r2, r0
 8005770:	693b      	ldr	r3, [r7, #16]
 8005772:	1ad3      	subs	r3, r2, r3
 8005774:	2b02      	cmp	r3, #2
 8005776:	d905      	bls.n	8005784 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005778:	2303      	movs	r3, #3
 800577a:	e0ab      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
 800577c:	40021000 	.word	0x40021000
 8005780:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005784:	4b55      	ldr	r3, [pc, #340]	@ (80058dc <HAL_RCC_OscConfig+0x618>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800578c:	2b00      	cmp	r3, #0
 800578e:	d1ec      	bne.n	800576a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005790:	4b52      	ldr	r3, [pc, #328]	@ (80058dc <HAL_RCC_OscConfig+0x618>)
 8005792:	68da      	ldr	r2, [r3, #12]
 8005794:	4b52      	ldr	r3, [pc, #328]	@ (80058e0 <HAL_RCC_OscConfig+0x61c>)
 8005796:	4013      	ands	r3, r2
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6a11      	ldr	r1, [r2, #32]
 800579c:	687a      	ldr	r2, [r7, #4]
 800579e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80057a0:	3a01      	subs	r2, #1
 80057a2:	0112      	lsls	r2, r2, #4
 80057a4:	4311      	orrs	r1, r2
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80057aa:	0212      	lsls	r2, r2, #8
 80057ac:	4311      	orrs	r1, r2
 80057ae:	687a      	ldr	r2, [r7, #4]
 80057b0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80057b2:	0852      	lsrs	r2, r2, #1
 80057b4:	3a01      	subs	r2, #1
 80057b6:	0552      	lsls	r2, r2, #21
 80057b8:	4311      	orrs	r1, r2
 80057ba:	687a      	ldr	r2, [r7, #4]
 80057bc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80057be:	0852      	lsrs	r2, r2, #1
 80057c0:	3a01      	subs	r2, #1
 80057c2:	0652      	lsls	r2, r2, #25
 80057c4:	4311      	orrs	r1, r2
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80057ca:	06d2      	lsls	r2, r2, #27
 80057cc:	430a      	orrs	r2, r1
 80057ce:	4943      	ldr	r1, [pc, #268]	@ (80058dc <HAL_RCC_OscConfig+0x618>)
 80057d0:	4313      	orrs	r3, r2
 80057d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057d4:	4b41      	ldr	r3, [pc, #260]	@ (80058dc <HAL_RCC_OscConfig+0x618>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	4a40      	ldr	r2, [pc, #256]	@ (80058dc <HAL_RCC_OscConfig+0x618>)
 80057da:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80057e0:	4b3e      	ldr	r3, [pc, #248]	@ (80058dc <HAL_RCC_OscConfig+0x618>)
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	4a3d      	ldr	r2, [pc, #244]	@ (80058dc <HAL_RCC_OscConfig+0x618>)
 80057e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80057ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057ec:	f7fc ff8a 	bl	8002704 <HAL_GetTick>
 80057f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80057f2:	e008      	b.n	8005806 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057f4:	f7fc ff86 	bl	8002704 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	693b      	ldr	r3, [r7, #16]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d901      	bls.n	8005806 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005802:	2303      	movs	r3, #3
 8005804:	e066      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005806:	4b35      	ldr	r3, [pc, #212]	@ (80058dc <HAL_RCC_OscConfig+0x618>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0f0      	beq.n	80057f4 <HAL_RCC_OscConfig+0x530>
 8005812:	e05e      	b.n	80058d2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005814:	4b31      	ldr	r3, [pc, #196]	@ (80058dc <HAL_RCC_OscConfig+0x618>)
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	4a30      	ldr	r2, [pc, #192]	@ (80058dc <HAL_RCC_OscConfig+0x618>)
 800581a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800581e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005820:	f7fc ff70 	bl	8002704 <HAL_GetTick>
 8005824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005826:	e008      	b.n	800583a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005828:	f7fc ff6c 	bl	8002704 <HAL_GetTick>
 800582c:	4602      	mov	r2, r0
 800582e:	693b      	ldr	r3, [r7, #16]
 8005830:	1ad3      	subs	r3, r2, r3
 8005832:	2b02      	cmp	r3, #2
 8005834:	d901      	bls.n	800583a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8005836:	2303      	movs	r3, #3
 8005838:	e04c      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800583a:	4b28      	ldr	r3, [pc, #160]	@ (80058dc <HAL_RCC_OscConfig+0x618>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005842:	2b00      	cmp	r3, #0
 8005844:	d1f0      	bne.n	8005828 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005846:	4b25      	ldr	r3, [pc, #148]	@ (80058dc <HAL_RCC_OscConfig+0x618>)
 8005848:	68da      	ldr	r2, [r3, #12]
 800584a:	4924      	ldr	r1, [pc, #144]	@ (80058dc <HAL_RCC_OscConfig+0x618>)
 800584c:	4b25      	ldr	r3, [pc, #148]	@ (80058e4 <HAL_RCC_OscConfig+0x620>)
 800584e:	4013      	ands	r3, r2
 8005850:	60cb      	str	r3, [r1, #12]
 8005852:	e03e      	b.n	80058d2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	2b01      	cmp	r3, #1
 800585a:	d101      	bne.n	8005860 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e039      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005860:	4b1e      	ldr	r3, [pc, #120]	@ (80058dc <HAL_RCC_OscConfig+0x618>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	f003 0203 	and.w	r2, r3, #3
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a1b      	ldr	r3, [r3, #32]
 8005870:	429a      	cmp	r2, r3
 8005872:	d12c      	bne.n	80058ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005874:	697b      	ldr	r3, [r7, #20]
 8005876:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800587e:	3b01      	subs	r3, #1
 8005880:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005882:	429a      	cmp	r2, r3
 8005884:	d123      	bne.n	80058ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005886:	697b      	ldr	r3, [r7, #20]
 8005888:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005890:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005892:	429a      	cmp	r2, r3
 8005894:	d11b      	bne.n	80058ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005896:	697b      	ldr	r3, [r7, #20]
 8005898:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80058a2:	429a      	cmp	r2, r3
 80058a4:	d113      	bne.n	80058ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80058b0:	085b      	lsrs	r3, r3, #1
 80058b2:	3b01      	subs	r3, #1
 80058b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d109      	bne.n	80058ce <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80058c4:	085b      	lsrs	r3, r3, #1
 80058c6:	3b01      	subs	r3, #1
 80058c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d001      	beq.n	80058d2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e000      	b.n	80058d4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3720      	adds	r7, #32
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}
 80058dc:	40021000 	.word	0x40021000
 80058e0:	019f800c 	.word	0x019f800c
 80058e4:	feeefffc 	.word	0xfeeefffc

080058e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	b086      	sub	sp, #24
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80058f2:	2300      	movs	r3, #0
 80058f4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d101      	bne.n	8005900 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80058fc:	2301      	movs	r3, #1
 80058fe:	e11e      	b.n	8005b3e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005900:	4b91      	ldr	r3, [pc, #580]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 030f 	and.w	r3, r3, #15
 8005908:	683a      	ldr	r2, [r7, #0]
 800590a:	429a      	cmp	r2, r3
 800590c:	d910      	bls.n	8005930 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800590e:	4b8e      	ldr	r3, [pc, #568]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f023 020f 	bic.w	r2, r3, #15
 8005916:	498c      	ldr	r1, [pc, #560]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	4313      	orrs	r3, r2
 800591c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800591e:	4b8a      	ldr	r3, [pc, #552]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 030f 	and.w	r3, r3, #15
 8005926:	683a      	ldr	r2, [r7, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d001      	beq.n	8005930 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800592c:	2301      	movs	r3, #1
 800592e:	e106      	b.n	8005b3e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f003 0301 	and.w	r3, r3, #1
 8005938:	2b00      	cmp	r3, #0
 800593a:	d073      	beq.n	8005a24 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	2b03      	cmp	r3, #3
 8005942:	d129      	bne.n	8005998 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005944:	4b81      	ldr	r3, [pc, #516]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800594c:	2b00      	cmp	r3, #0
 800594e:	d101      	bne.n	8005954 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e0f4      	b.n	8005b3e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005954:	f000 f99e 	bl	8005c94 <RCC_GetSysClockFreqFromPLLSource>
 8005958:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	4a7c      	ldr	r2, [pc, #496]	@ (8005b50 <HAL_RCC_ClockConfig+0x268>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d93f      	bls.n	80059e2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005962:	4b7a      	ldr	r3, [pc, #488]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d009      	beq.n	8005982 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005976:	2b00      	cmp	r3, #0
 8005978:	d033      	beq.n	80059e2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800597e:	2b00      	cmp	r3, #0
 8005980:	d12f      	bne.n	80059e2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005982:	4b72      	ldr	r3, [pc, #456]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005984:	689b      	ldr	r3, [r3, #8]
 8005986:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800598a:	4a70      	ldr	r2, [pc, #448]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 800598c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005990:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005992:	2380      	movs	r3, #128	@ 0x80
 8005994:	617b      	str	r3, [r7, #20]
 8005996:	e024      	b.n	80059e2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	2b02      	cmp	r3, #2
 800599e:	d107      	bne.n	80059b0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059a0:	4b6a      	ldr	r3, [pc, #424]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	d109      	bne.n	80059c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0c6      	b.n	8005b3e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80059b0:	4b66      	ldr	r3, [pc, #408]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d101      	bne.n	80059c0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e0be      	b.n	8005b3e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80059c0:	f000 f8ce 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 80059c4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80059c6:	693b      	ldr	r3, [r7, #16]
 80059c8:	4a61      	ldr	r2, [pc, #388]	@ (8005b50 <HAL_RCC_ClockConfig+0x268>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d909      	bls.n	80059e2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80059ce:	4b5f      	ldr	r3, [pc, #380]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 80059d0:	689b      	ldr	r3, [r3, #8]
 80059d2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80059d6:	4a5d      	ldr	r2, [pc, #372]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 80059d8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059dc:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80059de:	2380      	movs	r3, #128	@ 0x80
 80059e0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80059e2:	4b5a      	ldr	r3, [pc, #360]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f023 0203 	bic.w	r2, r3, #3
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	4957      	ldr	r1, [pc, #348]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 80059f0:	4313      	orrs	r3, r2
 80059f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059f4:	f7fc fe86 	bl	8002704 <HAL_GetTick>
 80059f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80059fa:	e00a      	b.n	8005a12 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80059fc:	f7fc fe82 	bl	8002704 <HAL_GetTick>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	1ad3      	subs	r3, r2, r3
 8005a06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d901      	bls.n	8005a12 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005a0e:	2303      	movs	r3, #3
 8005a10:	e095      	b.n	8005b3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a12:	4b4e      	ldr	r3, [pc, #312]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	f003 020c 	and.w	r2, r3, #12
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	009b      	lsls	r3, r3, #2
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d1eb      	bne.n	80059fc <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	f003 0302 	and.w	r3, r3, #2
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d023      	beq.n	8005a78 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 0304 	and.w	r3, r3, #4
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d005      	beq.n	8005a48 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005a3c:	4b43      	ldr	r3, [pc, #268]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	4a42      	ldr	r2, [pc, #264]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a42:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a46:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f003 0308 	and.w	r3, r3, #8
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d007      	beq.n	8005a64 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005a54:	4b3d      	ldr	r3, [pc, #244]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005a5c:	4a3b      	ldr	r2, [pc, #236]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a5e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005a62:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a64:	4b39      	ldr	r3, [pc, #228]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	689b      	ldr	r3, [r3, #8]
 8005a70:	4936      	ldr	r1, [pc, #216]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a72:	4313      	orrs	r3, r2
 8005a74:	608b      	str	r3, [r1, #8]
 8005a76:	e008      	b.n	8005a8a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005a78:	697b      	ldr	r3, [r7, #20]
 8005a7a:	2b80      	cmp	r3, #128	@ 0x80
 8005a7c:	d105      	bne.n	8005a8a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005a7e:	4b33      	ldr	r3, [pc, #204]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	4a32      	ldr	r2, [pc, #200]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005a84:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005a88:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005a8a:	4b2f      	ldr	r3, [pc, #188]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d21d      	bcs.n	8005ad4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a98:	4b2b      	ldr	r3, [pc, #172]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f023 020f 	bic.w	r2, r3, #15
 8005aa0:	4929      	ldr	r1, [pc, #164]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005aa8:	f7fc fe2c 	bl	8002704 <HAL_GetTick>
 8005aac:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005aae:	e00a      	b.n	8005ac6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ab0:	f7fc fe28 	bl	8002704 <HAL_GetTick>
 8005ab4:	4602      	mov	r2, r0
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	1ad3      	subs	r3, r2, r3
 8005aba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d901      	bls.n	8005ac6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005ac2:	2303      	movs	r3, #3
 8005ac4:	e03b      	b.n	8005b3e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ac6:	4b20      	ldr	r3, [pc, #128]	@ (8005b48 <HAL_RCC_ClockConfig+0x260>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f003 030f 	and.w	r3, r3, #15
 8005ace:	683a      	ldr	r2, [r7, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d1ed      	bne.n	8005ab0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 0304 	and.w	r3, r3, #4
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d008      	beq.n	8005af2 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005ae0:	4b1a      	ldr	r3, [pc, #104]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005ae2:	689b      	ldr	r3, [r3, #8]
 8005ae4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	4917      	ldr	r1, [pc, #92]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005aee:	4313      	orrs	r3, r2
 8005af0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0308 	and.w	r3, r3, #8
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005afe:	4b13      	ldr	r3, [pc, #76]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	691b      	ldr	r3, [r3, #16]
 8005b0a:	00db      	lsls	r3, r3, #3
 8005b0c:	490f      	ldr	r1, [pc, #60]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005b0e:	4313      	orrs	r3, r2
 8005b10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005b12:	f000 f825 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 8005b16:	4602      	mov	r2, r0
 8005b18:	4b0c      	ldr	r3, [pc, #48]	@ (8005b4c <HAL_RCC_ClockConfig+0x264>)
 8005b1a:	689b      	ldr	r3, [r3, #8]
 8005b1c:	091b      	lsrs	r3, r3, #4
 8005b1e:	f003 030f 	and.w	r3, r3, #15
 8005b22:	490c      	ldr	r1, [pc, #48]	@ (8005b54 <HAL_RCC_ClockConfig+0x26c>)
 8005b24:	5ccb      	ldrb	r3, [r1, r3]
 8005b26:	f003 031f 	and.w	r3, r3, #31
 8005b2a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8005b58 <HAL_RCC_ClockConfig+0x270>)
 8005b30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005b32:	4b0a      	ldr	r3, [pc, #40]	@ (8005b5c <HAL_RCC_ClockConfig+0x274>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4618      	mov	r0, r3
 8005b38:	f7fc fd98 	bl	800266c <HAL_InitTick>
 8005b3c:	4603      	mov	r3, r0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3718      	adds	r7, #24
 8005b42:	46bd      	mov	sp, r7
 8005b44:	bd80      	pop	{r7, pc}
 8005b46:	bf00      	nop
 8005b48:	40022000 	.word	0x40022000
 8005b4c:	40021000 	.word	0x40021000
 8005b50:	04c4b400 	.word	0x04c4b400
 8005b54:	08008bc4 	.word	0x08008bc4
 8005b58:	20000094 	.word	0x20000094
 8005b5c:	20000098 	.word	0x20000098

08005b60 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b60:	b480      	push	{r7}
 8005b62:	b087      	sub	sp, #28
 8005b64:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005b66:	4b2c      	ldr	r3, [pc, #176]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	f003 030c 	and.w	r3, r3, #12
 8005b6e:	2b04      	cmp	r3, #4
 8005b70:	d102      	bne.n	8005b78 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005b72:	4b2a      	ldr	r3, [pc, #168]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005b74:	613b      	str	r3, [r7, #16]
 8005b76:	e047      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005b78:	4b27      	ldr	r3, [pc, #156]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b7a:	689b      	ldr	r3, [r3, #8]
 8005b7c:	f003 030c 	and.w	r3, r3, #12
 8005b80:	2b08      	cmp	r3, #8
 8005b82:	d102      	bne.n	8005b8a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005b84:	4b26      	ldr	r3, [pc, #152]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005b86:	613b      	str	r3, [r7, #16]
 8005b88:	e03e      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005b8a:	4b23      	ldr	r3, [pc, #140]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b8c:	689b      	ldr	r3, [r3, #8]
 8005b8e:	f003 030c 	and.w	r3, r3, #12
 8005b92:	2b0c      	cmp	r3, #12
 8005b94:	d136      	bne.n	8005c04 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b96:	4b20      	ldr	r3, [pc, #128]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	f003 0303 	and.w	r3, r3, #3
 8005b9e:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ba0:	4b1d      	ldr	r3, [pc, #116]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	091b      	lsrs	r3, r3, #4
 8005ba6:	f003 030f 	and.w	r3, r3, #15
 8005baa:	3301      	adds	r3, #1
 8005bac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b03      	cmp	r3, #3
 8005bb2:	d10c      	bne.n	8005bce <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bb4:	4a1a      	ldr	r2, [pc, #104]	@ (8005c20 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bbc:	4a16      	ldr	r2, [pc, #88]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bbe:	68d2      	ldr	r2, [r2, #12]
 8005bc0:	0a12      	lsrs	r2, r2, #8
 8005bc2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005bc6:	fb02 f303 	mul.w	r3, r2, r3
 8005bca:	617b      	str	r3, [r7, #20]
      break;
 8005bcc:	e00c      	b.n	8005be8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005bce:	4a13      	ldr	r2, [pc, #76]	@ (8005c1c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd6:	4a10      	ldr	r2, [pc, #64]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bd8:	68d2      	ldr	r2, [r2, #12]
 8005bda:	0a12      	lsrs	r2, r2, #8
 8005bdc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005be0:	fb02 f303 	mul.w	r3, r2, r3
 8005be4:	617b      	str	r3, [r7, #20]
      break;
 8005be6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005be8:	4b0b      	ldr	r3, [pc, #44]	@ (8005c18 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005bea:	68db      	ldr	r3, [r3, #12]
 8005bec:	0e5b      	lsrs	r3, r3, #25
 8005bee:	f003 0303 	and.w	r3, r3, #3
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	005b      	lsls	r3, r3, #1
 8005bf6:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005bf8:	697a      	ldr	r2, [r7, #20]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c00:	613b      	str	r3, [r7, #16]
 8005c02:	e001      	b.n	8005c08 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005c08:	693b      	ldr	r3, [r7, #16]
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	371c      	adds	r7, #28
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	40021000 	.word	0x40021000
 8005c1c:	00f42400 	.word	0x00f42400
 8005c20:	016e3600 	.word	0x016e3600

08005c24 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c24:	b480      	push	{r7}
 8005c26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c28:	4b03      	ldr	r3, [pc, #12]	@ (8005c38 <HAL_RCC_GetHCLKFreq+0x14>)
 8005c2a:	681b      	ldr	r3, [r3, #0]
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr
 8005c36:	bf00      	nop
 8005c38:	20000094 	.word	0x20000094

08005c3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005c40:	f7ff fff0 	bl	8005c24 <HAL_RCC_GetHCLKFreq>
 8005c44:	4602      	mov	r2, r0
 8005c46:	4b06      	ldr	r3, [pc, #24]	@ (8005c60 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	0a1b      	lsrs	r3, r3, #8
 8005c4c:	f003 0307 	and.w	r3, r3, #7
 8005c50:	4904      	ldr	r1, [pc, #16]	@ (8005c64 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005c52:	5ccb      	ldrb	r3, [r1, r3]
 8005c54:	f003 031f 	and.w	r3, r3, #31
 8005c58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	bd80      	pop	{r7, pc}
 8005c60:	40021000 	.word	0x40021000
 8005c64:	08008bd4 	.word	0x08008bd4

08005c68 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005c6c:	f7ff ffda 	bl	8005c24 <HAL_RCC_GetHCLKFreq>
 8005c70:	4602      	mov	r2, r0
 8005c72:	4b06      	ldr	r3, [pc, #24]	@ (8005c8c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	0adb      	lsrs	r3, r3, #11
 8005c78:	f003 0307 	and.w	r3, r3, #7
 8005c7c:	4904      	ldr	r1, [pc, #16]	@ (8005c90 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005c7e:	5ccb      	ldrb	r3, [r1, r3]
 8005c80:	f003 031f 	and.w	r3, r3, #31
 8005c84:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	40021000 	.word	0x40021000
 8005c90:	08008bd4 	.word	0x08008bd4

08005c94 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005c94:	b480      	push	{r7}
 8005c96:	b087      	sub	sp, #28
 8005c98:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8005d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	f003 0303 	and.w	r3, r3, #3
 8005ca2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ca4:	4b1b      	ldr	r3, [pc, #108]	@ (8005d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005ca6:	68db      	ldr	r3, [r3, #12]
 8005ca8:	091b      	lsrs	r3, r3, #4
 8005caa:	f003 030f 	and.w	r3, r3, #15
 8005cae:	3301      	adds	r3, #1
 8005cb0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005cb2:	693b      	ldr	r3, [r7, #16]
 8005cb4:	2b03      	cmp	r3, #3
 8005cb6:	d10c      	bne.n	8005cd2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cb8:	4a17      	ldr	r2, [pc, #92]	@ (8005d18 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc0:	4a14      	ldr	r2, [pc, #80]	@ (8005d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cc2:	68d2      	ldr	r2, [r2, #12]
 8005cc4:	0a12      	lsrs	r2, r2, #8
 8005cc6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005cca:	fb02 f303 	mul.w	r3, r2, r3
 8005cce:	617b      	str	r3, [r7, #20]
    break;
 8005cd0:	e00c      	b.n	8005cec <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cd2:	4a12      	ldr	r2, [pc, #72]	@ (8005d1c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cda:	4a0e      	ldr	r2, [pc, #56]	@ (8005d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cdc:	68d2      	ldr	r2, [r2, #12]
 8005cde:	0a12      	lsrs	r2, r2, #8
 8005ce0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005ce4:	fb02 f303 	mul.w	r3, r2, r3
 8005ce8:	617b      	str	r3, [r7, #20]
    break;
 8005cea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cec:	4b09      	ldr	r3, [pc, #36]	@ (8005d14 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	0e5b      	lsrs	r3, r3, #25
 8005cf2:	f003 0303 	and.w	r3, r3, #3
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	005b      	lsls	r3, r3, #1
 8005cfa:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d04:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005d06:	687b      	ldr	r3, [r7, #4]
}
 8005d08:	4618      	mov	r0, r3
 8005d0a:	371c      	adds	r7, #28
 8005d0c:	46bd      	mov	sp, r7
 8005d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d12:	4770      	bx	lr
 8005d14:	40021000 	.word	0x40021000
 8005d18:	016e3600 	.word	0x016e3600
 8005d1c:	00f42400 	.word	0x00f42400

08005d20 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	b086      	sub	sp, #24
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005d28:	2300      	movs	r3, #0
 8005d2a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	f000 8098 	beq.w	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005d42:	4b43      	ldr	r3, [pc, #268]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10d      	bne.n	8005d6a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005d4e:	4b40      	ldr	r3, [pc, #256]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d52:	4a3f      	ldr	r2, [pc, #252]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005d58:	6593      	str	r3, [r2, #88]	@ 0x58
 8005d5a:	4b3d      	ldr	r3, [pc, #244]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005d5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d62:	60bb      	str	r3, [r7, #8]
 8005d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005d66:	2301      	movs	r3, #1
 8005d68:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005d6a:	4b3a      	ldr	r3, [pc, #232]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a39      	ldr	r2, [pc, #228]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005d74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005d76:	f7fc fcc5 	bl	8002704 <HAL_GetTick>
 8005d7a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d7c:	e009      	b.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d7e:	f7fc fcc1 	bl	8002704 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d902      	bls.n	8005d92 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	74fb      	strb	r3, [r7, #19]
        break;
 8005d90:	e005      	b.n	8005d9e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005d92:	4b30      	ldr	r3, [pc, #192]	@ (8005e54 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d9a:	2b00      	cmp	r3, #0
 8005d9c:	d0ef      	beq.n	8005d7e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005d9e:	7cfb      	ldrb	r3, [r7, #19]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d159      	bne.n	8005e58 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005da4:	4b2a      	ldr	r3, [pc, #168]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005da6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005daa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005dae:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005db0:	697b      	ldr	r3, [r7, #20]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d01e      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dba:	697a      	ldr	r2, [r7, #20]
 8005dbc:	429a      	cmp	r2, r3
 8005dbe:	d019      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005dc0:	4b23      	ldr	r3, [pc, #140]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dc6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005dca:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005dcc:	4b20      	ldr	r3, [pc, #128]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dd2:	4a1f      	ldr	r2, [pc, #124]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005dd8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005ddc:	4b1c      	ldr	r3, [pc, #112]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005de2:	4a1b      	ldr	r2, [pc, #108]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005de4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005de8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005dec:	4a18      	ldr	r2, [pc, #96]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dee:	697b      	ldr	r3, [r7, #20]
 8005df0:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	f003 0301 	and.w	r3, r3, #1
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d016      	beq.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005dfe:	f7fc fc81 	bl	8002704 <HAL_GetTick>
 8005e02:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e04:	e00b      	b.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e06:	f7fc fc7d 	bl	8002704 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d902      	bls.n	8005e1e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005e18:	2303      	movs	r3, #3
 8005e1a:	74fb      	strb	r3, [r7, #19]
            break;
 8005e1c:	e006      	b.n	8005e2c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e1e:	4b0c      	ldr	r3, [pc, #48]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e20:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e24:	f003 0302 	and.w	r3, r3, #2
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d0ec      	beq.n	8005e06 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005e2c:	7cfb      	ldrb	r3, [r7, #19]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d10b      	bne.n	8005e4a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005e32:	4b07      	ldr	r3, [pc, #28]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e38:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e40:	4903      	ldr	r1, [pc, #12]	@ (8005e50 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e42:	4313      	orrs	r3, r2
 8005e44:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005e48:	e008      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005e4a:	7cfb      	ldrb	r3, [r7, #19]
 8005e4c:	74bb      	strb	r3, [r7, #18]
 8005e4e:	e005      	b.n	8005e5c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005e50:	40021000 	.word	0x40021000
 8005e54:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005e58:	7cfb      	ldrb	r3, [r7, #19]
 8005e5a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005e5c:	7c7b      	ldrb	r3, [r7, #17]
 8005e5e:	2b01      	cmp	r3, #1
 8005e60:	d105      	bne.n	8005e6e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005e62:	4ba7      	ldr	r3, [pc, #668]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005e66:	4aa6      	ldr	r2, [pc, #664]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e68:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005e6c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d00a      	beq.n	8005e90 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005e7a:	4ba1      	ldr	r3, [pc, #644]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e80:	f023 0203 	bic.w	r2, r3, #3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	685b      	ldr	r3, [r3, #4]
 8005e88:	499d      	ldr	r1, [pc, #628]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	f003 0302 	and.w	r3, r3, #2
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d00a      	beq.n	8005eb2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005e9c:	4b98      	ldr	r3, [pc, #608]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ea2:	f023 020c 	bic.w	r2, r3, #12
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	689b      	ldr	r3, [r3, #8]
 8005eaa:	4995      	ldr	r1, [pc, #596]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005eac:	4313      	orrs	r3, r2
 8005eae:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	f003 0304 	and.w	r3, r3, #4
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d00a      	beq.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005ebe:	4b90      	ldr	r3, [pc, #576]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ec4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	68db      	ldr	r3, [r3, #12]
 8005ecc:	498c      	ldr	r1, [pc, #560]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f003 0308 	and.w	r3, r3, #8
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d00a      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005ee0:	4b87      	ldr	r3, [pc, #540]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ee6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	691b      	ldr	r3, [r3, #16]
 8005eee:	4984      	ldr	r1, [pc, #528]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ef0:	4313      	orrs	r3, r2
 8005ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d00a      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005f02:	4b7f      	ldr	r3, [pc, #508]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f08:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	497b      	ldr	r1, [pc, #492]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f12:	4313      	orrs	r3, r2
 8005f14:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f003 0320 	and.w	r3, r3, #32
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d00a      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f24:	4b76      	ldr	r3, [pc, #472]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f2a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	699b      	ldr	r3, [r3, #24]
 8005f32:	4973      	ldr	r1, [pc, #460]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f34:	4313      	orrs	r3, r2
 8005f36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d00a      	beq.n	8005f5c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005f46:	4b6e      	ldr	r3, [pc, #440]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f48:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f4c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	69db      	ldr	r3, [r3, #28]
 8005f54:	496a      	ldr	r1, [pc, #424]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d00a      	beq.n	8005f7e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005f68:	4b65      	ldr	r3, [pc, #404]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f6e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a1b      	ldr	r3, [r3, #32]
 8005f76:	4962      	ldr	r1, [pc, #392]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d00a      	beq.n	8005fa0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005f8a:	4b5d      	ldr	r3, [pc, #372]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f90:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f98:	4959      	ldr	r1, [pc, #356]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d00a      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005fac:	4b54      	ldr	r3, [pc, #336]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fae:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fb2:	f023 0203 	bic.w	r2, r3, #3
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005fba:	4951      	ldr	r1, [pc, #324]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d00a      	beq.n	8005fe4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005fce:	4b4c      	ldr	r3, [pc, #304]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005fd4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fdc:	4948      	ldr	r1, [pc, #288]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d015      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005ff0:	4b43      	ldr	r3, [pc, #268]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ff2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ff6:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005ffe:	4940      	ldr	r1, [pc, #256]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006000:	4313      	orrs	r3, r2
 8006002:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800600a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800600e:	d105      	bne.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006010:	4b3b      	ldr	r3, [pc, #236]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006012:	68db      	ldr	r3, [r3, #12]
 8006014:	4a3a      	ldr	r2, [pc, #232]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006016:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800601a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006024:	2b00      	cmp	r3, #0
 8006026:	d015      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006028:	4b35      	ldr	r3, [pc, #212]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800602a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800602e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006036:	4932      	ldr	r1, [pc, #200]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006042:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006046:	d105      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006048:	4b2d      	ldr	r3, [pc, #180]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	4a2c      	ldr	r2, [pc, #176]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800604e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006052:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800605c:	2b00      	cmp	r3, #0
 800605e:	d015      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006060:	4b27      	ldr	r3, [pc, #156]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006066:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800606e:	4924      	ldr	r1, [pc, #144]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006070:	4313      	orrs	r3, r2
 8006072:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800607a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800607e:	d105      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006080:	4b1f      	ldr	r3, [pc, #124]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	4a1e      	ldr	r2, [pc, #120]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8006086:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800608a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d015      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006098:	4b19      	ldr	r3, [pc, #100]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800609a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800609e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a6:	4916      	ldr	r1, [pc, #88]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060b6:	d105      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060b8:	4b11      	ldr	r3, [pc, #68]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4a10      	ldr	r2, [pc, #64]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060be:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060c2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d019      	beq.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80060d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80060d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060de:	4908      	ldr	r1, [pc, #32]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80060ee:	d109      	bne.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060f0:	4b03      	ldr	r3, [pc, #12]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4a02      	ldr	r2, [pc, #8]	@ (8006100 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80060f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80060fa:	60d3      	str	r3, [r2, #12]
 80060fc:	e002      	b.n	8006104 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 80060fe:	bf00      	nop
 8006100:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800610c:	2b00      	cmp	r3, #0
 800610e:	d015      	beq.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006110:	4b29      	ldr	r3, [pc, #164]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006112:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006116:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800611e:	4926      	ldr	r1, [pc, #152]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006120:	4313      	orrs	r3, r2
 8006122:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800612a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800612e:	d105      	bne.n	800613c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006130:	4b21      	ldr	r3, [pc, #132]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006132:	68db      	ldr	r3, [r3, #12]
 8006134:	4a20      	ldr	r2, [pc, #128]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006136:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800613a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8006144:	2b00      	cmp	r3, #0
 8006146:	d015      	beq.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8006148:	4b1b      	ldr	r3, [pc, #108]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800614a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800614e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006156:	4918      	ldr	r1, [pc, #96]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006158:	4313      	orrs	r3, r2
 800615a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006162:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006166:	d105      	bne.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006168:	4b13      	ldr	r3, [pc, #76]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	4a12      	ldr	r2, [pc, #72]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800616e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006172:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800617c:	2b00      	cmp	r3, #0
 800617e:	d015      	beq.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8006180:	4b0d      	ldr	r3, [pc, #52]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006182:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8006186:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800618e:	490a      	ldr	r1, [pc, #40]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8006190:	4313      	orrs	r3, r2
 8006192:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800619a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800619e:	d105      	bne.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061a0:	4b05      	ldr	r3, [pc, #20]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061a2:	68db      	ldr	r3, [r3, #12]
 80061a4:	4a04      	ldr	r2, [pc, #16]	@ (80061b8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80061a6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80061aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80061ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3718      	adds	r7, #24
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd80      	pop	{r7, pc}
 80061b6:	bf00      	nop
 80061b8:	40021000 	.word	0x40021000

080061bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061bc:	b580      	push	{r7, lr}
 80061be:	b082      	sub	sp, #8
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d101      	bne.n	80061ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061ca:	2301      	movs	r3, #1
 80061cc:	e049      	b.n	8006262 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d106      	bne.n	80061e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2200      	movs	r2, #0
 80061de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061e2:	6878      	ldr	r0, [r7, #4]
 80061e4:	f7fc f8b4 	bl	8002350 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2202      	movs	r2, #2
 80061ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	3304      	adds	r3, #4
 80061f8:	4619      	mov	r1, r3
 80061fa:	4610      	mov	r0, r2
 80061fc:	f000 ff68 	bl	80070d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2201      	movs	r2, #1
 800620c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	2201      	movs	r2, #1
 8006214:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	2201      	movs	r2, #1
 800621c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2201      	movs	r2, #1
 8006224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2201      	movs	r2, #1
 800622c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2201      	movs	r2, #1
 8006234:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2201      	movs	r2, #1
 800623c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	2201      	movs	r2, #1
 8006244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	2201      	movs	r2, #1
 800624c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2201      	movs	r2, #1
 8006254:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2201      	movs	r2, #1
 800625c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006260:	2300      	movs	r3, #0
}
 8006262:	4618      	mov	r0, r3
 8006264:	3708      	adds	r7, #8
 8006266:	46bd      	mov	sp, r7
 8006268:	bd80      	pop	{r7, pc}
	...

0800626c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800627a:	b2db      	uxtb	r3, r3
 800627c:	2b01      	cmp	r3, #1
 800627e:	d001      	beq.n	8006284 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8006280:	2301      	movs	r3, #1
 8006282:	e04c      	b.n	800631e <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2202      	movs	r2, #2
 8006288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a26      	ldr	r2, [pc, #152]	@ (800632c <HAL_TIM_Base_Start+0xc0>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d022      	beq.n	80062dc <HAL_TIM_Base_Start+0x70>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800629e:	d01d      	beq.n	80062dc <HAL_TIM_Base_Start+0x70>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a22      	ldr	r2, [pc, #136]	@ (8006330 <HAL_TIM_Base_Start+0xc4>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d018      	beq.n	80062dc <HAL_TIM_Base_Start+0x70>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	4a21      	ldr	r2, [pc, #132]	@ (8006334 <HAL_TIM_Base_Start+0xc8>)
 80062b0:	4293      	cmp	r3, r2
 80062b2:	d013      	beq.n	80062dc <HAL_TIM_Base_Start+0x70>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1f      	ldr	r2, [pc, #124]	@ (8006338 <HAL_TIM_Base_Start+0xcc>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d00e      	beq.n	80062dc <HAL_TIM_Base_Start+0x70>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a1e      	ldr	r2, [pc, #120]	@ (800633c <HAL_TIM_Base_Start+0xd0>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d009      	beq.n	80062dc <HAL_TIM_Base_Start+0x70>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a1c      	ldr	r2, [pc, #112]	@ (8006340 <HAL_TIM_Base_Start+0xd4>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d004      	beq.n	80062dc <HAL_TIM_Base_Start+0x70>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1b      	ldr	r2, [pc, #108]	@ (8006344 <HAL_TIM_Base_Start+0xd8>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d115      	bne.n	8006308 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	4b19      	ldr	r3, [pc, #100]	@ (8006348 <HAL_TIM_Base_Start+0xdc>)
 80062e4:	4013      	ands	r3, r2
 80062e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b06      	cmp	r3, #6
 80062ec:	d015      	beq.n	800631a <HAL_TIM_Base_Start+0xae>
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80062f4:	d011      	beq.n	800631a <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f042 0201 	orr.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006306:	e008      	b.n	800631a <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	681a      	ldr	r2, [r3, #0]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f042 0201 	orr.w	r2, r2, #1
 8006316:	601a      	str	r2, [r3, #0]
 8006318:	e000      	b.n	800631c <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800631c:	2300      	movs	r3, #0
}
 800631e:	4618      	mov	r0, r3
 8006320:	3714      	adds	r7, #20
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	40012c00 	.word	0x40012c00
 8006330:	40000400 	.word	0x40000400
 8006334:	40000800 	.word	0x40000800
 8006338:	40000c00 	.word	0x40000c00
 800633c:	40013400 	.word	0x40013400
 8006340:	40014000 	.word	0x40014000
 8006344:	40015000 	.word	0x40015000
 8006348:	00010007 	.word	0x00010007

0800634c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b085      	sub	sp, #20
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b01      	cmp	r3, #1
 800635e:	d001      	beq.n	8006364 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e054      	b.n	800640e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2202      	movs	r2, #2
 8006368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	68da      	ldr	r2, [r3, #12]
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f042 0201 	orr.w	r2, r2, #1
 800637a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	4a26      	ldr	r2, [pc, #152]	@ (800641c <HAL_TIM_Base_Start_IT+0xd0>)
 8006382:	4293      	cmp	r3, r2
 8006384:	d022      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x80>
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800638e:	d01d      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x80>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	4a22      	ldr	r2, [pc, #136]	@ (8006420 <HAL_TIM_Base_Start_IT+0xd4>)
 8006396:	4293      	cmp	r3, r2
 8006398:	d018      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x80>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a21      	ldr	r2, [pc, #132]	@ (8006424 <HAL_TIM_Base_Start_IT+0xd8>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d013      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x80>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	4a1f      	ldr	r2, [pc, #124]	@ (8006428 <HAL_TIM_Base_Start_IT+0xdc>)
 80063aa:	4293      	cmp	r3, r2
 80063ac:	d00e      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x80>
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	4a1e      	ldr	r2, [pc, #120]	@ (800642c <HAL_TIM_Base_Start_IT+0xe0>)
 80063b4:	4293      	cmp	r3, r2
 80063b6:	d009      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x80>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	4a1c      	ldr	r2, [pc, #112]	@ (8006430 <HAL_TIM_Base_Start_IT+0xe4>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d004      	beq.n	80063cc <HAL_TIM_Base_Start_IT+0x80>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4a1b      	ldr	r2, [pc, #108]	@ (8006434 <HAL_TIM_Base_Start_IT+0xe8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d115      	bne.n	80063f8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	689a      	ldr	r2, [r3, #8]
 80063d2:	4b19      	ldr	r3, [pc, #100]	@ (8006438 <HAL_TIM_Base_Start_IT+0xec>)
 80063d4:	4013      	ands	r3, r2
 80063d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2b06      	cmp	r3, #6
 80063dc:	d015      	beq.n	800640a <HAL_TIM_Base_Start_IT+0xbe>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80063e4:	d011      	beq.n	800640a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	681a      	ldr	r2, [r3, #0]
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f042 0201 	orr.w	r2, r2, #1
 80063f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80063f6:	e008      	b.n	800640a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	f042 0201 	orr.w	r2, r2, #1
 8006406:	601a      	str	r2, [r3, #0]
 8006408:	e000      	b.n	800640c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800640a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800640c:	2300      	movs	r3, #0
}
 800640e:	4618      	mov	r0, r3
 8006410:	3714      	adds	r7, #20
 8006412:	46bd      	mov	sp, r7
 8006414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006418:	4770      	bx	lr
 800641a:	bf00      	nop
 800641c:	40012c00 	.word	0x40012c00
 8006420:	40000400 	.word	0x40000400
 8006424:	40000800 	.word	0x40000800
 8006428:	40000c00 	.word	0x40000c00
 800642c:	40013400 	.word	0x40013400
 8006430:	40014000 	.word	0x40014000
 8006434:	40015000 	.word	0x40015000
 8006438:	00010007 	.word	0x00010007

0800643c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b082      	sub	sp, #8
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d101      	bne.n	800644e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800644a:	2301      	movs	r3, #1
 800644c:	e049      	b.n	80064e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006454:	b2db      	uxtb	r3, r3
 8006456:	2b00      	cmp	r3, #0
 8006458:	d106      	bne.n	8006468 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2200      	movs	r2, #0
 800645e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	f000 f841 	bl	80064ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2202      	movs	r2, #2
 800646c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3304      	adds	r3, #4
 8006478:	4619      	mov	r1, r3
 800647a:	4610      	mov	r0, r2
 800647c:	f000 fe28 	bl	80070d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	2201      	movs	r2, #1
 8006484:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	2201      	movs	r2, #1
 800648c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2201      	movs	r2, #1
 8006494:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3708      	adds	r7, #8
 80064e6:	46bd      	mov	sp, r7
 80064e8:	bd80      	pop	{r7, pc}

080064ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064ea:	b480      	push	{r7}
 80064ec:	b083      	sub	sp, #12
 80064ee:	af00      	add	r7, sp, #0
 80064f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064f2:	bf00      	nop
 80064f4:	370c      	adds	r7, #12
 80064f6:	46bd      	mov	sp, r7
 80064f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064fc:	4770      	bx	lr
	...

08006500 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b084      	sub	sp, #16
 8006504:	af00      	add	r7, sp, #0
 8006506:	6078      	str	r0, [r7, #4]
 8006508:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d109      	bne.n	8006524 <HAL_TIM_PWM_Start+0x24>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006516:	b2db      	uxtb	r3, r3
 8006518:	2b01      	cmp	r3, #1
 800651a:	bf14      	ite	ne
 800651c:	2301      	movne	r3, #1
 800651e:	2300      	moveq	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	e03c      	b.n	800659e <HAL_TIM_PWM_Start+0x9e>
 8006524:	683b      	ldr	r3, [r7, #0]
 8006526:	2b04      	cmp	r3, #4
 8006528:	d109      	bne.n	800653e <HAL_TIM_PWM_Start+0x3e>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006530:	b2db      	uxtb	r3, r3
 8006532:	2b01      	cmp	r3, #1
 8006534:	bf14      	ite	ne
 8006536:	2301      	movne	r3, #1
 8006538:	2300      	moveq	r3, #0
 800653a:	b2db      	uxtb	r3, r3
 800653c:	e02f      	b.n	800659e <HAL_TIM_PWM_Start+0x9e>
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	2b08      	cmp	r3, #8
 8006542:	d109      	bne.n	8006558 <HAL_TIM_PWM_Start+0x58>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b01      	cmp	r3, #1
 800654e:	bf14      	ite	ne
 8006550:	2301      	movne	r3, #1
 8006552:	2300      	moveq	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	e022      	b.n	800659e <HAL_TIM_PWM_Start+0x9e>
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	2b0c      	cmp	r3, #12
 800655c:	d109      	bne.n	8006572 <HAL_TIM_PWM_Start+0x72>
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006564:	b2db      	uxtb	r3, r3
 8006566:	2b01      	cmp	r3, #1
 8006568:	bf14      	ite	ne
 800656a:	2301      	movne	r3, #1
 800656c:	2300      	moveq	r3, #0
 800656e:	b2db      	uxtb	r3, r3
 8006570:	e015      	b.n	800659e <HAL_TIM_PWM_Start+0x9e>
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	2b10      	cmp	r3, #16
 8006576:	d109      	bne.n	800658c <HAL_TIM_PWM_Start+0x8c>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800657e:	b2db      	uxtb	r3, r3
 8006580:	2b01      	cmp	r3, #1
 8006582:	bf14      	ite	ne
 8006584:	2301      	movne	r3, #1
 8006586:	2300      	moveq	r3, #0
 8006588:	b2db      	uxtb	r3, r3
 800658a:	e008      	b.n	800659e <HAL_TIM_PWM_Start+0x9e>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b01      	cmp	r3, #1
 8006596:	bf14      	ite	ne
 8006598:	2301      	movne	r3, #1
 800659a:	2300      	moveq	r3, #0
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d001      	beq.n	80065a6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e0a6      	b.n	80066f4 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d104      	bne.n	80065b6 <HAL_TIM_PWM_Start+0xb6>
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2202      	movs	r2, #2
 80065b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80065b4:	e023      	b.n	80065fe <HAL_TIM_PWM_Start+0xfe>
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b04      	cmp	r3, #4
 80065ba:	d104      	bne.n	80065c6 <HAL_TIM_PWM_Start+0xc6>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2202      	movs	r2, #2
 80065c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80065c4:	e01b      	b.n	80065fe <HAL_TIM_PWM_Start+0xfe>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b08      	cmp	r3, #8
 80065ca:	d104      	bne.n	80065d6 <HAL_TIM_PWM_Start+0xd6>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2202      	movs	r2, #2
 80065d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80065d4:	e013      	b.n	80065fe <HAL_TIM_PWM_Start+0xfe>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b0c      	cmp	r3, #12
 80065da:	d104      	bne.n	80065e6 <HAL_TIM_PWM_Start+0xe6>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2202      	movs	r2, #2
 80065e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80065e4:	e00b      	b.n	80065fe <HAL_TIM_PWM_Start+0xfe>
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b10      	cmp	r3, #16
 80065ea:	d104      	bne.n	80065f6 <HAL_TIM_PWM_Start+0xf6>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80065f4:	e003      	b.n	80065fe <HAL_TIM_PWM_Start+0xfe>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2202      	movs	r2, #2
 80065fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2201      	movs	r2, #1
 8006604:	6839      	ldr	r1, [r7, #0]
 8006606:	4618      	mov	r0, r3
 8006608:	f001 f9dc 	bl	80079c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4a3a      	ldr	r2, [pc, #232]	@ (80066fc <HAL_TIM_PWM_Start+0x1fc>)
 8006612:	4293      	cmp	r3, r2
 8006614:	d018      	beq.n	8006648 <HAL_TIM_PWM_Start+0x148>
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	4a39      	ldr	r2, [pc, #228]	@ (8006700 <HAL_TIM_PWM_Start+0x200>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d013      	beq.n	8006648 <HAL_TIM_PWM_Start+0x148>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	4a37      	ldr	r2, [pc, #220]	@ (8006704 <HAL_TIM_PWM_Start+0x204>)
 8006626:	4293      	cmp	r3, r2
 8006628:	d00e      	beq.n	8006648 <HAL_TIM_PWM_Start+0x148>
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	4a36      	ldr	r2, [pc, #216]	@ (8006708 <HAL_TIM_PWM_Start+0x208>)
 8006630:	4293      	cmp	r3, r2
 8006632:	d009      	beq.n	8006648 <HAL_TIM_PWM_Start+0x148>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	4a34      	ldr	r2, [pc, #208]	@ (800670c <HAL_TIM_PWM_Start+0x20c>)
 800663a:	4293      	cmp	r3, r2
 800663c:	d004      	beq.n	8006648 <HAL_TIM_PWM_Start+0x148>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	4a33      	ldr	r2, [pc, #204]	@ (8006710 <HAL_TIM_PWM_Start+0x210>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d101      	bne.n	800664c <HAL_TIM_PWM_Start+0x14c>
 8006648:	2301      	movs	r3, #1
 800664a:	e000      	b.n	800664e <HAL_TIM_PWM_Start+0x14e>
 800664c:	2300      	movs	r3, #0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d007      	beq.n	8006662 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8006660:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	4a25      	ldr	r2, [pc, #148]	@ (80066fc <HAL_TIM_PWM_Start+0x1fc>)
 8006668:	4293      	cmp	r3, r2
 800666a:	d022      	beq.n	80066b2 <HAL_TIM_PWM_Start+0x1b2>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006674:	d01d      	beq.n	80066b2 <HAL_TIM_PWM_Start+0x1b2>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a26      	ldr	r2, [pc, #152]	@ (8006714 <HAL_TIM_PWM_Start+0x214>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d018      	beq.n	80066b2 <HAL_TIM_PWM_Start+0x1b2>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a24      	ldr	r2, [pc, #144]	@ (8006718 <HAL_TIM_PWM_Start+0x218>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d013      	beq.n	80066b2 <HAL_TIM_PWM_Start+0x1b2>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a23      	ldr	r2, [pc, #140]	@ (800671c <HAL_TIM_PWM_Start+0x21c>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d00e      	beq.n	80066b2 <HAL_TIM_PWM_Start+0x1b2>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	4a19      	ldr	r2, [pc, #100]	@ (8006700 <HAL_TIM_PWM_Start+0x200>)
 800669a:	4293      	cmp	r3, r2
 800669c:	d009      	beq.n	80066b2 <HAL_TIM_PWM_Start+0x1b2>
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	4a18      	ldr	r2, [pc, #96]	@ (8006704 <HAL_TIM_PWM_Start+0x204>)
 80066a4:	4293      	cmp	r3, r2
 80066a6:	d004      	beq.n	80066b2 <HAL_TIM_PWM_Start+0x1b2>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	4a18      	ldr	r2, [pc, #96]	@ (8006710 <HAL_TIM_PWM_Start+0x210>)
 80066ae:	4293      	cmp	r3, r2
 80066b0:	d115      	bne.n	80066de <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	689a      	ldr	r2, [r3, #8]
 80066b8:	4b19      	ldr	r3, [pc, #100]	@ (8006720 <HAL_TIM_PWM_Start+0x220>)
 80066ba:	4013      	ands	r3, r2
 80066bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	2b06      	cmp	r3, #6
 80066c2:	d015      	beq.n	80066f0 <HAL_TIM_PWM_Start+0x1f0>
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80066ca:	d011      	beq.n	80066f0 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	681a      	ldr	r2, [r3, #0]
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f042 0201 	orr.w	r2, r2, #1
 80066da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066dc:	e008      	b.n	80066f0 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	681a      	ldr	r2, [r3, #0]
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	f042 0201 	orr.w	r2, r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
 80066ee:	e000      	b.n	80066f2 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80066f2:	2300      	movs	r3, #0
}
 80066f4:	4618      	mov	r0, r3
 80066f6:	3710      	adds	r7, #16
 80066f8:	46bd      	mov	sp, r7
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	40012c00 	.word	0x40012c00
 8006700:	40013400 	.word	0x40013400
 8006704:	40014000 	.word	0x40014000
 8006708:	40014400 	.word	0x40014400
 800670c:	40014800 	.word	0x40014800
 8006710:	40015000 	.word	0x40015000
 8006714:	40000400 	.word	0x40000400
 8006718:	40000800 	.word	0x40000800
 800671c:	40000c00 	.word	0x40000c00
 8006720:	00010007 	.word	0x00010007

08006724 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b086      	sub	sp, #24
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d101      	bne.n	8006738 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006734:	2301      	movs	r3, #1
 8006736:	e097      	b.n	8006868 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800673e:	b2db      	uxtb	r3, r3
 8006740:	2b00      	cmp	r3, #0
 8006742:	d106      	bne.n	8006752 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2200      	movs	r2, #0
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800674c:	6878      	ldr	r0, [r7, #4]
 800674e:	f7fb fe4b 	bl	80023e8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2202      	movs	r2, #2
 8006756:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	689b      	ldr	r3, [r3, #8]
 8006760:	687a      	ldr	r2, [r7, #4]
 8006762:	6812      	ldr	r2, [r2, #0]
 8006764:	f423 33a0 	bic.w	r3, r3, #81920	@ 0x14000
 8006768:	f023 0307 	bic.w	r3, r3, #7
 800676c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	3304      	adds	r3, #4
 8006776:	4619      	mov	r1, r3
 8006778:	4610      	mov	r0, r2
 800677a:	f000 fca9 	bl	80070d0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	699b      	ldr	r3, [r3, #24]
 800678c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	6a1b      	ldr	r3, [r3, #32]
 8006794:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	697a      	ldr	r2, [r7, #20]
 800679c:	4313      	orrs	r3, r2
 800679e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80067a6:	f023 0303 	bic.w	r3, r3, #3
 80067aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	689a      	ldr	r2, [r3, #8]
 80067b0:	683b      	ldr	r3, [r7, #0]
 80067b2:	699b      	ldr	r3, [r3, #24]
 80067b4:	021b      	lsls	r3, r3, #8
 80067b6:	4313      	orrs	r3, r2
 80067b8:	693a      	ldr	r2, [r7, #16]
 80067ba:	4313      	orrs	r3, r2
 80067bc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80067be:	693b      	ldr	r3, [r7, #16]
 80067c0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80067c4:	f023 030c 	bic.w	r3, r3, #12
 80067c8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80067d0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80067d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68da      	ldr	r2, [r3, #12]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	69db      	ldr	r3, [r3, #28]
 80067de:	021b      	lsls	r3, r3, #8
 80067e0:	4313      	orrs	r3, r2
 80067e2:	693a      	ldr	r2, [r7, #16]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	691b      	ldr	r3, [r3, #16]
 80067ec:	011a      	lsls	r2, r3, #4
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	6a1b      	ldr	r3, [r3, #32]
 80067f2:	031b      	lsls	r3, r3, #12
 80067f4:	4313      	orrs	r3, r2
 80067f6:	693a      	ldr	r2, [r7, #16]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8006802:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800680a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	685a      	ldr	r2, [r3, #4]
 8006810:	683b      	ldr	r3, [r7, #0]
 8006812:	695b      	ldr	r3, [r3, #20]
 8006814:	011b      	lsls	r3, r3, #4
 8006816:	4313      	orrs	r3, r2
 8006818:	68fa      	ldr	r2, [r7, #12]
 800681a:	4313      	orrs	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	697a      	ldr	r2, [r7, #20]
 8006824:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	693a      	ldr	r2, [r7, #16]
 800682c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	2201      	movs	r2, #1
 8006842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	2201      	movs	r2, #1
 800684a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	2201      	movs	r2, #1
 8006852:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2201      	movs	r2, #1
 800685a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006866:	2300      	movs	r3, #0
}
 8006868:	4618      	mov	r0, r3
 800686a:	3718      	adds	r7, #24
 800686c:	46bd      	mov	sp, r7
 800686e:	bd80      	pop	{r7, pc}

08006870 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
 8006878:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006880:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8006888:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006890:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006898:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	2b00      	cmp	r3, #0
 800689e:	d110      	bne.n	80068c2 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068a0:	7bfb      	ldrb	r3, [r7, #15]
 80068a2:	2b01      	cmp	r3, #1
 80068a4:	d102      	bne.n	80068ac <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80068a6:	7b7b      	ldrb	r3, [r7, #13]
 80068a8:	2b01      	cmp	r3, #1
 80068aa:	d001      	beq.n	80068b0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 80068ac:	2301      	movs	r3, #1
 80068ae:	e069      	b.n	8006984 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2202      	movs	r2, #2
 80068b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	2202      	movs	r2, #2
 80068bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80068c0:	e031      	b.n	8006926 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	2b04      	cmp	r3, #4
 80068c6:	d110      	bne.n	80068ea <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068c8:	7bbb      	ldrb	r3, [r7, #14]
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d102      	bne.n	80068d4 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068ce:	7b3b      	ldrb	r3, [r7, #12]
 80068d0:	2b01      	cmp	r3, #1
 80068d2:	d001      	beq.n	80068d8 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	e055      	b.n	8006984 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2202      	movs	r2, #2
 80068dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	2202      	movs	r2, #2
 80068e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80068e8:	e01d      	b.n	8006926 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068ea:	7bfb      	ldrb	r3, [r7, #15]
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d108      	bne.n	8006902 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80068f0:	7bbb      	ldrb	r3, [r7, #14]
 80068f2:	2b01      	cmp	r3, #1
 80068f4:	d105      	bne.n	8006902 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80068f6:	7b7b      	ldrb	r3, [r7, #13]
 80068f8:	2b01      	cmp	r3, #1
 80068fa:	d102      	bne.n	8006902 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80068fc:	7b3b      	ldrb	r3, [r7, #12]
 80068fe:	2b01      	cmp	r3, #1
 8006900:	d001      	beq.n	8006906 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e03e      	b.n	8006984 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2202      	movs	r2, #2
 800690a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	2202      	movs	r2, #2
 8006912:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	2202      	movs	r2, #2
 800691a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	2202      	movs	r2, #2
 8006922:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d003      	beq.n	8006934 <HAL_TIM_Encoder_Start+0xc4>
 800692c:	683b      	ldr	r3, [r7, #0]
 800692e:	2b04      	cmp	r3, #4
 8006930:	d008      	beq.n	8006944 <HAL_TIM_Encoder_Start+0xd4>
 8006932:	e00f      	b.n	8006954 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	2201      	movs	r2, #1
 800693a:	2100      	movs	r1, #0
 800693c:	4618      	mov	r0, r3
 800693e:	f001 f841 	bl	80079c4 <TIM_CCxChannelCmd>
      break;
 8006942:	e016      	b.n	8006972 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2201      	movs	r2, #1
 800694a:	2104      	movs	r1, #4
 800694c:	4618      	mov	r0, r3
 800694e:	f001 f839 	bl	80079c4 <TIM_CCxChannelCmd>
      break;
 8006952:	e00e      	b.n	8006972 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2201      	movs	r2, #1
 800695a:	2100      	movs	r1, #0
 800695c:	4618      	mov	r0, r3
 800695e:	f001 f831 	bl	80079c4 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	2201      	movs	r2, #1
 8006968:	2104      	movs	r1, #4
 800696a:	4618      	mov	r0, r3
 800696c:	f001 f82a 	bl	80079c4 <TIM_CCxChannelCmd>
      break;
 8006970:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	f042 0201 	orr.w	r2, r2, #1
 8006980:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3710      	adds	r7, #16
 8006988:	46bd      	mov	sp, r7
 800698a:	bd80      	pop	{r7, pc}

0800698c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	68db      	ldr	r3, [r3, #12]
 800699a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80069a4:	68bb      	ldr	r3, [r7, #8]
 80069a6:	f003 0302 	and.w	r3, r3, #2
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d020      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	f003 0302 	and.w	r3, r3, #2
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d01b      	beq.n	80069f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f06f 0202 	mvn.w	r2, #2
 80069c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2201      	movs	r2, #1
 80069c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	f003 0303 	and.w	r3, r3, #3
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d003      	beq.n	80069de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fb5c 	bl	8007094 <HAL_TIM_IC_CaptureCallback>
 80069dc:	e005      	b.n	80069ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	f000 fb4e 	bl	8007080 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80069e4:	6878      	ldr	r0, [r7, #4]
 80069e6:	f000 fb5f 	bl	80070a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	2200      	movs	r2, #0
 80069ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	f003 0304 	and.w	r3, r3, #4
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d020      	beq.n	8006a3c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f003 0304 	and.w	r3, r3, #4
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d01b      	beq.n	8006a3c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f06f 0204 	mvn.w	r2, #4
 8006a0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2202      	movs	r2, #2
 8006a12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	699b      	ldr	r3, [r3, #24]
 8006a1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d003      	beq.n	8006a2a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f000 fb36 	bl	8007094 <HAL_TIM_IC_CaptureCallback>
 8006a28:	e005      	b.n	8006a36 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a2a:	6878      	ldr	r0, [r7, #4]
 8006a2c:	f000 fb28 	bl	8007080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f000 fb39 	bl	80070a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	2200      	movs	r2, #0
 8006a3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006a3c:	68bb      	ldr	r3, [r7, #8]
 8006a3e:	f003 0308 	and.w	r3, r3, #8
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d020      	beq.n	8006a88 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	f003 0308 	and.w	r3, r3, #8
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d01b      	beq.n	8006a88 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f06f 0208 	mvn.w	r2, #8
 8006a58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2204      	movs	r2, #4
 8006a5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	69db      	ldr	r3, [r3, #28]
 8006a66:	f003 0303 	and.w	r3, r3, #3
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d003      	beq.n	8006a76 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f000 fb10 	bl	8007094 <HAL_TIM_IC_CaptureCallback>
 8006a74:	e005      	b.n	8006a82 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a76:	6878      	ldr	r0, [r7, #4]
 8006a78:	f000 fb02 	bl	8007080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fb13 	bl	80070a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f003 0310 	and.w	r3, r3, #16
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d020      	beq.n	8006ad4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	f003 0310 	and.w	r3, r3, #16
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01b      	beq.n	8006ad4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	f06f 0210 	mvn.w	r2, #16
 8006aa4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	2208      	movs	r2, #8
 8006aaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	69db      	ldr	r3, [r3, #28]
 8006ab2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 faea 	bl	8007094 <HAL_TIM_IC_CaptureCallback>
 8006ac0:	e005      	b.n	8006ace <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f000 fadc 	bl	8007080 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 faed 	bl	80070a8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006ad4:	68bb      	ldr	r3, [r7, #8]
 8006ad6:	f003 0301 	and.w	r3, r3, #1
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00c      	beq.n	8006af8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f003 0301 	and.w	r3, r3, #1
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d007      	beq.n	8006af8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f06f 0201 	mvn.w	r2, #1
 8006af0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006af2:	6878      	ldr	r0, [r7, #4]
 8006af4:	f7fa fea8 	bl	8001848 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d104      	bne.n	8006b0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8006b02:	68bb      	ldr	r3, [r7, #8]
 8006b04:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00c      	beq.n	8006b26 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b0c:	68fb      	ldr	r3, [r7, #12]
 8006b0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b12:	2b00      	cmp	r3, #0
 8006b14:	d007      	beq.n	8006b26 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8006b1e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f001 f8a9 	bl	8007c78 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006b26:	68bb      	ldr	r3, [r7, #8]
 8006b28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d00c      	beq.n	8006b4a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8006b42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006b44:	6878      	ldr	r0, [r7, #4]
 8006b46:	f001 f8a1 	bl	8007c8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006b4a:	68bb      	ldr	r3, [r7, #8]
 8006b4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d00c      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d007      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006b66:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006b68:	6878      	ldr	r0, [r7, #4]
 8006b6a:	f000 faa7 	bl	80070bc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	f003 0320 	and.w	r3, r3, #32
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d00c      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	f003 0320 	and.w	r3, r3, #32
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d007      	beq.n	8006b92 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	f06f 0220 	mvn.w	r2, #32
 8006b8a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f001 f869 	bl	8007c64 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d00c      	beq.n	8006bb6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d007      	beq.n	8006bb6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8006bae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006bb0:	6878      	ldr	r0, [r7, #4]
 8006bb2:	f001 f875 	bl	8007ca0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8006bb6:	68bb      	ldr	r3, [r7, #8]
 8006bb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d00c      	beq.n	8006bda <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d007      	beq.n	8006bda <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8006bd2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f001 f86d 	bl	8007cb4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d00c      	beq.n	8006bfe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d007      	beq.n	8006bfe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8006bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 f865 	bl	8007cc8 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8006bfe:	68bb      	ldr	r3, [r7, #8]
 8006c00:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d00c      	beq.n	8006c22 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d007      	beq.n	8006c22 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8006c1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f001 f85d 	bl	8007cdc <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c22:	bf00      	nop
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
	...

08006c2c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	60f8      	str	r0, [r7, #12]
 8006c34:	60b9      	str	r1, [r7, #8]
 8006c36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c38:	2300      	movs	r3, #0
 8006c3a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006c42:	2b01      	cmp	r3, #1
 8006c44:	d101      	bne.n	8006c4a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006c46:	2302      	movs	r3, #2
 8006c48:	e0ff      	b.n	8006e4a <HAL_TIM_PWM_ConfigChannel+0x21e>
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2b14      	cmp	r3, #20
 8006c56:	f200 80f0 	bhi.w	8006e3a <HAL_TIM_PWM_ConfigChannel+0x20e>
 8006c5a:	a201      	add	r2, pc, #4	@ (adr r2, 8006c60 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006c5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c60:	08006cb5 	.word	0x08006cb5
 8006c64:	08006e3b 	.word	0x08006e3b
 8006c68:	08006e3b 	.word	0x08006e3b
 8006c6c:	08006e3b 	.word	0x08006e3b
 8006c70:	08006cf5 	.word	0x08006cf5
 8006c74:	08006e3b 	.word	0x08006e3b
 8006c78:	08006e3b 	.word	0x08006e3b
 8006c7c:	08006e3b 	.word	0x08006e3b
 8006c80:	08006d37 	.word	0x08006d37
 8006c84:	08006e3b 	.word	0x08006e3b
 8006c88:	08006e3b 	.word	0x08006e3b
 8006c8c:	08006e3b 	.word	0x08006e3b
 8006c90:	08006d77 	.word	0x08006d77
 8006c94:	08006e3b 	.word	0x08006e3b
 8006c98:	08006e3b 	.word	0x08006e3b
 8006c9c:	08006e3b 	.word	0x08006e3b
 8006ca0:	08006db9 	.word	0x08006db9
 8006ca4:	08006e3b 	.word	0x08006e3b
 8006ca8:	08006e3b 	.word	0x08006e3b
 8006cac:	08006e3b 	.word	0x08006e3b
 8006cb0:	08006df9 	.word	0x08006df9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68b9      	ldr	r1, [r7, #8]
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f000 fabc 	bl	8007238 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	699a      	ldr	r2, [r3, #24]
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f042 0208 	orr.w	r2, r2, #8
 8006cce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	699a      	ldr	r2, [r3, #24]
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f022 0204 	bic.w	r2, r2, #4
 8006cde:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	6999      	ldr	r1, [r3, #24]
 8006ce6:	68bb      	ldr	r3, [r7, #8]
 8006ce8:	691a      	ldr	r2, [r3, #16]
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	619a      	str	r2, [r3, #24]
      break;
 8006cf2:	e0a5      	b.n	8006e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68b9      	ldr	r1, [r7, #8]
 8006cfa:	4618      	mov	r0, r3
 8006cfc:	f000 fb36 	bl	800736c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	699a      	ldr	r2, [r3, #24]
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6999      	ldr	r1, [r3, #24]
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	021a      	lsls	r2, r3, #8
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	430a      	orrs	r2, r1
 8006d32:	619a      	str	r2, [r3, #24]
      break;
 8006d34:	e084      	b.n	8006e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	68b9      	ldr	r1, [r7, #8]
 8006d3c:	4618      	mov	r0, r3
 8006d3e:	f000 fba9 	bl	8007494 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	69da      	ldr	r2, [r3, #28]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f042 0208 	orr.w	r2, r2, #8
 8006d50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	69da      	ldr	r2, [r3, #28]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f022 0204 	bic.w	r2, r2, #4
 8006d60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	69d9      	ldr	r1, [r3, #28]
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	691a      	ldr	r2, [r3, #16]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	430a      	orrs	r2, r1
 8006d72:	61da      	str	r2, [r3, #28]
      break;
 8006d74:	e064      	b.n	8006e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	68b9      	ldr	r1, [r7, #8]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f000 fc1b 	bl	80075b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	69da      	ldr	r2, [r3, #28]
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006d90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	69da      	ldr	r2, [r3, #28]
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006da0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	69d9      	ldr	r1, [r3, #28]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	691b      	ldr	r3, [r3, #16]
 8006dac:	021a      	lsls	r2, r3, #8
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	61da      	str	r2, [r3, #28]
      break;
 8006db6:	e043      	b.n	8006e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68b9      	ldr	r1, [r7, #8]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fc8e 	bl	80076e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0208 	orr.w	r2, r2, #8
 8006dd2:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0204 	bic.w	r2, r2, #4
 8006de2:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	691a      	ldr	r2, [r3, #16]
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	430a      	orrs	r2, r1
 8006df4:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006df6:	e023      	b.n	8006e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	68b9      	ldr	r1, [r7, #8]
 8006dfe:	4618      	mov	r0, r3
 8006e00:	f000 fcd8 	bl	80077b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006e12:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e22:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	691b      	ldr	r3, [r3, #16]
 8006e2e:	021a      	lsls	r2, r3, #8
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	430a      	orrs	r2, r1
 8006e36:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8006e38:	e002      	b.n	8006e40 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	75fb      	strb	r3, [r7, #23]
      break;
 8006e3e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8006e48:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3718      	adds	r7, #24
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
 8006e52:	bf00      	nop

08006e54 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e54:	b580      	push	{r7, lr}
 8006e56:	b084      	sub	sp, #16
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	6078      	str	r0, [r7, #4]
 8006e5c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006e68:	2b01      	cmp	r3, #1
 8006e6a:	d101      	bne.n	8006e70 <HAL_TIM_ConfigClockSource+0x1c>
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	e0f6      	b.n	800705e <HAL_TIM_ConfigClockSource+0x20a>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2201      	movs	r2, #1
 8006e74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2202      	movs	r2, #2
 8006e7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e88:	68bb      	ldr	r3, [r7, #8]
 8006e8a:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 8006e8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8006e92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8006e9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	68ba      	ldr	r2, [r7, #8]
 8006ea2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006ea4:	683b      	ldr	r3, [r7, #0]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a6f      	ldr	r2, [pc, #444]	@ (8007068 <HAL_TIM_ConfigClockSource+0x214>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	f000 80c1 	beq.w	8007032 <HAL_TIM_ConfigClockSource+0x1de>
 8006eb0:	4a6d      	ldr	r2, [pc, #436]	@ (8007068 <HAL_TIM_ConfigClockSource+0x214>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	f200 80c6 	bhi.w	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006eb8:	4a6c      	ldr	r2, [pc, #432]	@ (800706c <HAL_TIM_ConfigClockSource+0x218>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	f000 80b9 	beq.w	8007032 <HAL_TIM_ConfigClockSource+0x1de>
 8006ec0:	4a6a      	ldr	r2, [pc, #424]	@ (800706c <HAL_TIM_ConfigClockSource+0x218>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	f200 80be 	bhi.w	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ec8:	4a69      	ldr	r2, [pc, #420]	@ (8007070 <HAL_TIM_ConfigClockSource+0x21c>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	f000 80b1 	beq.w	8007032 <HAL_TIM_ConfigClockSource+0x1de>
 8006ed0:	4a67      	ldr	r2, [pc, #412]	@ (8007070 <HAL_TIM_ConfigClockSource+0x21c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	f200 80b6 	bhi.w	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ed8:	4a66      	ldr	r2, [pc, #408]	@ (8007074 <HAL_TIM_ConfigClockSource+0x220>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	f000 80a9 	beq.w	8007032 <HAL_TIM_ConfigClockSource+0x1de>
 8006ee0:	4a64      	ldr	r2, [pc, #400]	@ (8007074 <HAL_TIM_ConfigClockSource+0x220>)
 8006ee2:	4293      	cmp	r3, r2
 8006ee4:	f200 80ae 	bhi.w	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ee8:	4a63      	ldr	r2, [pc, #396]	@ (8007078 <HAL_TIM_ConfigClockSource+0x224>)
 8006eea:	4293      	cmp	r3, r2
 8006eec:	f000 80a1 	beq.w	8007032 <HAL_TIM_ConfigClockSource+0x1de>
 8006ef0:	4a61      	ldr	r2, [pc, #388]	@ (8007078 <HAL_TIM_ConfigClockSource+0x224>)
 8006ef2:	4293      	cmp	r3, r2
 8006ef4:	f200 80a6 	bhi.w	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006ef8:	4a60      	ldr	r2, [pc, #384]	@ (800707c <HAL_TIM_ConfigClockSource+0x228>)
 8006efa:	4293      	cmp	r3, r2
 8006efc:	f000 8099 	beq.w	8007032 <HAL_TIM_ConfigClockSource+0x1de>
 8006f00:	4a5e      	ldr	r2, [pc, #376]	@ (800707c <HAL_TIM_ConfigClockSource+0x228>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	f200 809e 	bhi.w	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f08:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f0c:	f000 8091 	beq.w	8007032 <HAL_TIM_ConfigClockSource+0x1de>
 8006f10:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 8006f14:	f200 8096 	bhi.w	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f1c:	f000 8089 	beq.w	8007032 <HAL_TIM_ConfigClockSource+0x1de>
 8006f20:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006f24:	f200 808e 	bhi.w	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f28:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f2c:	d03e      	beq.n	8006fac <HAL_TIM_ConfigClockSource+0x158>
 8006f2e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006f32:	f200 8087 	bhi.w	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f36:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f3a:	f000 8086 	beq.w	800704a <HAL_TIM_ConfigClockSource+0x1f6>
 8006f3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006f42:	d87f      	bhi.n	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f44:	2b70      	cmp	r3, #112	@ 0x70
 8006f46:	d01a      	beq.n	8006f7e <HAL_TIM_ConfigClockSource+0x12a>
 8006f48:	2b70      	cmp	r3, #112	@ 0x70
 8006f4a:	d87b      	bhi.n	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f4c:	2b60      	cmp	r3, #96	@ 0x60
 8006f4e:	d050      	beq.n	8006ff2 <HAL_TIM_ConfigClockSource+0x19e>
 8006f50:	2b60      	cmp	r3, #96	@ 0x60
 8006f52:	d877      	bhi.n	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f54:	2b50      	cmp	r3, #80	@ 0x50
 8006f56:	d03c      	beq.n	8006fd2 <HAL_TIM_ConfigClockSource+0x17e>
 8006f58:	2b50      	cmp	r3, #80	@ 0x50
 8006f5a:	d873      	bhi.n	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f5c:	2b40      	cmp	r3, #64	@ 0x40
 8006f5e:	d058      	beq.n	8007012 <HAL_TIM_ConfigClockSource+0x1be>
 8006f60:	2b40      	cmp	r3, #64	@ 0x40
 8006f62:	d86f      	bhi.n	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f64:	2b30      	cmp	r3, #48	@ 0x30
 8006f66:	d064      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x1de>
 8006f68:	2b30      	cmp	r3, #48	@ 0x30
 8006f6a:	d86b      	bhi.n	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f6c:	2b20      	cmp	r3, #32
 8006f6e:	d060      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x1de>
 8006f70:	2b20      	cmp	r3, #32
 8006f72:	d867      	bhi.n	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d05c      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x1de>
 8006f78:	2b10      	cmp	r3, #16
 8006f7a:	d05a      	beq.n	8007032 <HAL_TIM_ConfigClockSource+0x1de>
 8006f7c:	e062      	b.n	8007044 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006f8e:	f000 fcf9 	bl	8007984 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f9a:	68bb      	ldr	r3, [r7, #8]
 8006f9c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006fa0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	609a      	str	r2, [r3, #8]
      break;
 8006faa:	e04f      	b.n	800704c <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006fb4:	683b      	ldr	r3, [r7, #0]
 8006fb6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006fb8:	683b      	ldr	r3, [r7, #0]
 8006fba:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006fbc:	f000 fce2 	bl	8007984 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689a      	ldr	r2, [r3, #8]
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006fce:	609a      	str	r2, [r3, #8]
      break;
 8006fd0:	e03c      	b.n	800704c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006fde:	461a      	mov	r2, r3
 8006fe0:	f000 fc54 	bl	800788c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2150      	movs	r1, #80	@ 0x50
 8006fea:	4618      	mov	r0, r3
 8006fec:	f000 fcad 	bl	800794a <TIM_ITRx_SetConfig>
      break;
 8006ff0:	e02c      	b.n	800704c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8006ffa:	683b      	ldr	r3, [r7, #0]
 8006ffc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ffe:	461a      	mov	r2, r3
 8007000:	f000 fc73 	bl	80078ea <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	2160      	movs	r1, #96	@ 0x60
 800700a:	4618      	mov	r0, r3
 800700c:	f000 fc9d 	bl	800794a <TIM_ITRx_SetConfig>
      break;
 8007010:	e01c      	b.n	800704c <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800701a:	683b      	ldr	r3, [r7, #0]
 800701c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800701e:	461a      	mov	r2, r3
 8007020:	f000 fc34 	bl	800788c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	2140      	movs	r1, #64	@ 0x40
 800702a:	4618      	mov	r0, r3
 800702c:	f000 fc8d 	bl	800794a <TIM_ITRx_SetConfig>
      break;
 8007030:	e00c      	b.n	800704c <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	683b      	ldr	r3, [r7, #0]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4619      	mov	r1, r3
 800703c:	4610      	mov	r0, r2
 800703e:	f000 fc84 	bl	800794a <TIM_ITRx_SetConfig>
      break;
 8007042:	e003      	b.n	800704c <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8007044:	2301      	movs	r3, #1
 8007046:	73fb      	strb	r3, [r7, #15]
      break;
 8007048:	e000      	b.n	800704c <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 800704a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2201      	movs	r2, #1
 8007050:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2200      	movs	r2, #0
 8007058:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800705c:	7bfb      	ldrb	r3, [r7, #15]
}
 800705e:	4618      	mov	r0, r3
 8007060:	3710      	adds	r7, #16
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	00100070 	.word	0x00100070
 800706c:	00100060 	.word	0x00100060
 8007070:	00100050 	.word	0x00100050
 8007074:	00100040 	.word	0x00100040
 8007078:	00100030 	.word	0x00100030
 800707c:	00100020 	.word	0x00100020

08007080 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
 8007086:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007088:	bf00      	nop
 800708a:	370c      	adds	r7, #12
 800708c:	46bd      	mov	sp, r7
 800708e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007092:	4770      	bx	lr

08007094 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80070d0:	b480      	push	{r7}
 80070d2:	b085      	sub	sp, #20
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
 80070d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a4c      	ldr	r2, [pc, #304]	@ (8007214 <TIM_Base_SetConfig+0x144>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d017      	beq.n	8007118 <TIM_Base_SetConfig+0x48>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070ee:	d013      	beq.n	8007118 <TIM_Base_SetConfig+0x48>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a49      	ldr	r2, [pc, #292]	@ (8007218 <TIM_Base_SetConfig+0x148>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d00f      	beq.n	8007118 <TIM_Base_SetConfig+0x48>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a48      	ldr	r2, [pc, #288]	@ (800721c <TIM_Base_SetConfig+0x14c>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d00b      	beq.n	8007118 <TIM_Base_SetConfig+0x48>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a47      	ldr	r2, [pc, #284]	@ (8007220 <TIM_Base_SetConfig+0x150>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d007      	beq.n	8007118 <TIM_Base_SetConfig+0x48>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4a46      	ldr	r2, [pc, #280]	@ (8007224 <TIM_Base_SetConfig+0x154>)
 800710c:	4293      	cmp	r3, r2
 800710e:	d003      	beq.n	8007118 <TIM_Base_SetConfig+0x48>
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4a45      	ldr	r2, [pc, #276]	@ (8007228 <TIM_Base_SetConfig+0x158>)
 8007114:	4293      	cmp	r3, r2
 8007116:	d108      	bne.n	800712a <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800711e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	685b      	ldr	r3, [r3, #4]
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	4313      	orrs	r3, r2
 8007128:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a39      	ldr	r2, [pc, #228]	@ (8007214 <TIM_Base_SetConfig+0x144>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d023      	beq.n	800717a <TIM_Base_SetConfig+0xaa>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007138:	d01f      	beq.n	800717a <TIM_Base_SetConfig+0xaa>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a36      	ldr	r2, [pc, #216]	@ (8007218 <TIM_Base_SetConfig+0x148>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d01b      	beq.n	800717a <TIM_Base_SetConfig+0xaa>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a35      	ldr	r2, [pc, #212]	@ (800721c <TIM_Base_SetConfig+0x14c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d017      	beq.n	800717a <TIM_Base_SetConfig+0xaa>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a34      	ldr	r2, [pc, #208]	@ (8007220 <TIM_Base_SetConfig+0x150>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d013      	beq.n	800717a <TIM_Base_SetConfig+0xaa>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a33      	ldr	r2, [pc, #204]	@ (8007224 <TIM_Base_SetConfig+0x154>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d00f      	beq.n	800717a <TIM_Base_SetConfig+0xaa>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a33      	ldr	r2, [pc, #204]	@ (800722c <TIM_Base_SetConfig+0x15c>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d00b      	beq.n	800717a <TIM_Base_SetConfig+0xaa>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a32      	ldr	r2, [pc, #200]	@ (8007230 <TIM_Base_SetConfig+0x160>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d007      	beq.n	800717a <TIM_Base_SetConfig+0xaa>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a31      	ldr	r2, [pc, #196]	@ (8007234 <TIM_Base_SetConfig+0x164>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d003      	beq.n	800717a <TIM_Base_SetConfig+0xaa>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a2c      	ldr	r2, [pc, #176]	@ (8007228 <TIM_Base_SetConfig+0x158>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d108      	bne.n	800718c <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007180:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	68db      	ldr	r3, [r3, #12]
 8007186:	68fa      	ldr	r2, [r7, #12]
 8007188:	4313      	orrs	r3, r2
 800718a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8007192:	683b      	ldr	r3, [r7, #0]
 8007194:	695b      	ldr	r3, [r3, #20]
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	68fa      	ldr	r2, [r7, #12]
 800719e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	689a      	ldr	r2, [r3, #8]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a18      	ldr	r2, [pc, #96]	@ (8007214 <TIM_Base_SetConfig+0x144>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d013      	beq.n	80071e0 <TIM_Base_SetConfig+0x110>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a1a      	ldr	r2, [pc, #104]	@ (8007224 <TIM_Base_SetConfig+0x154>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d00f      	beq.n	80071e0 <TIM_Base_SetConfig+0x110>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a1a      	ldr	r2, [pc, #104]	@ (800722c <TIM_Base_SetConfig+0x15c>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d00b      	beq.n	80071e0 <TIM_Base_SetConfig+0x110>
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	4a19      	ldr	r2, [pc, #100]	@ (8007230 <TIM_Base_SetConfig+0x160>)
 80071cc:	4293      	cmp	r3, r2
 80071ce:	d007      	beq.n	80071e0 <TIM_Base_SetConfig+0x110>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	4a18      	ldr	r2, [pc, #96]	@ (8007234 <TIM_Base_SetConfig+0x164>)
 80071d4:	4293      	cmp	r3, r2
 80071d6:	d003      	beq.n	80071e0 <TIM_Base_SetConfig+0x110>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	4a13      	ldr	r2, [pc, #76]	@ (8007228 <TIM_Base_SetConfig+0x158>)
 80071dc:	4293      	cmp	r3, r2
 80071de:	d103      	bne.n	80071e8 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071e0:	683b      	ldr	r3, [r7, #0]
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	691b      	ldr	r3, [r3, #16]
 80071f2:	f003 0301 	and.w	r3, r3, #1
 80071f6:	2b01      	cmp	r3, #1
 80071f8:	d105      	bne.n	8007206 <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	f023 0201 	bic.w	r2, r3, #1
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	611a      	str	r2, [r3, #16]
  }
}
 8007206:	bf00      	nop
 8007208:	3714      	adds	r7, #20
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr
 8007212:	bf00      	nop
 8007214:	40012c00 	.word	0x40012c00
 8007218:	40000400 	.word	0x40000400
 800721c:	40000800 	.word	0x40000800
 8007220:	40000c00 	.word	0x40000c00
 8007224:	40013400 	.word	0x40013400
 8007228:	40015000 	.word	0x40015000
 800722c:	40014000 	.word	0x40014000
 8007230:	40014400 	.word	0x40014400
 8007234:	40014800 	.word	0x40014800

08007238 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6a1b      	ldr	r3, [r3, #32]
 8007246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	6a1b      	ldr	r3, [r3, #32]
 800724c:	f023 0201 	bic.w	r2, r3, #1
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	685b      	ldr	r3, [r3, #4]
 8007258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	699b      	ldr	r3, [r3, #24]
 800725e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800726a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	f023 0303 	bic.w	r3, r3, #3
 8007272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	68fa      	ldr	r2, [r7, #12]
 800727a:	4313      	orrs	r3, r2
 800727c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	f023 0302 	bic.w	r3, r3, #2
 8007284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	689b      	ldr	r3, [r3, #8]
 800728a:	697a      	ldr	r2, [r7, #20]
 800728c:	4313      	orrs	r3, r2
 800728e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	4a30      	ldr	r2, [pc, #192]	@ (8007354 <TIM_OC1_SetConfig+0x11c>)
 8007294:	4293      	cmp	r3, r2
 8007296:	d013      	beq.n	80072c0 <TIM_OC1_SetConfig+0x88>
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	4a2f      	ldr	r2, [pc, #188]	@ (8007358 <TIM_OC1_SetConfig+0x120>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d00f      	beq.n	80072c0 <TIM_OC1_SetConfig+0x88>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	4a2e      	ldr	r2, [pc, #184]	@ (800735c <TIM_OC1_SetConfig+0x124>)
 80072a4:	4293      	cmp	r3, r2
 80072a6:	d00b      	beq.n	80072c0 <TIM_OC1_SetConfig+0x88>
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	4a2d      	ldr	r2, [pc, #180]	@ (8007360 <TIM_OC1_SetConfig+0x128>)
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d007      	beq.n	80072c0 <TIM_OC1_SetConfig+0x88>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	4a2c      	ldr	r2, [pc, #176]	@ (8007364 <TIM_OC1_SetConfig+0x12c>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d003      	beq.n	80072c0 <TIM_OC1_SetConfig+0x88>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	4a2b      	ldr	r2, [pc, #172]	@ (8007368 <TIM_OC1_SetConfig+0x130>)
 80072bc:	4293      	cmp	r3, r2
 80072be:	d10c      	bne.n	80072da <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072c0:	697b      	ldr	r3, [r7, #20]
 80072c2:	f023 0308 	bic.w	r3, r3, #8
 80072c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	68db      	ldr	r3, [r3, #12]
 80072cc:	697a      	ldr	r2, [r7, #20]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f023 0304 	bic.w	r3, r3, #4
 80072d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	4a1d      	ldr	r2, [pc, #116]	@ (8007354 <TIM_OC1_SetConfig+0x11c>)
 80072de:	4293      	cmp	r3, r2
 80072e0:	d013      	beq.n	800730a <TIM_OC1_SetConfig+0xd2>
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	4a1c      	ldr	r2, [pc, #112]	@ (8007358 <TIM_OC1_SetConfig+0x120>)
 80072e6:	4293      	cmp	r3, r2
 80072e8:	d00f      	beq.n	800730a <TIM_OC1_SetConfig+0xd2>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	4a1b      	ldr	r2, [pc, #108]	@ (800735c <TIM_OC1_SetConfig+0x124>)
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d00b      	beq.n	800730a <TIM_OC1_SetConfig+0xd2>
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	4a1a      	ldr	r2, [pc, #104]	@ (8007360 <TIM_OC1_SetConfig+0x128>)
 80072f6:	4293      	cmp	r3, r2
 80072f8:	d007      	beq.n	800730a <TIM_OC1_SetConfig+0xd2>
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	4a19      	ldr	r2, [pc, #100]	@ (8007364 <TIM_OC1_SetConfig+0x12c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d003      	beq.n	800730a <TIM_OC1_SetConfig+0xd2>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	4a18      	ldr	r2, [pc, #96]	@ (8007368 <TIM_OC1_SetConfig+0x130>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d111      	bne.n	800732e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800730a:	693b      	ldr	r3, [r7, #16]
 800730c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007310:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007312:	693b      	ldr	r3, [r7, #16]
 8007314:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007318:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800731a:	683b      	ldr	r3, [r7, #0]
 800731c:	695b      	ldr	r3, [r3, #20]
 800731e:	693a      	ldr	r2, [r7, #16]
 8007320:	4313      	orrs	r3, r2
 8007322:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	699b      	ldr	r3, [r3, #24]
 8007328:	693a      	ldr	r2, [r7, #16]
 800732a:	4313      	orrs	r3, r2
 800732c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	693a      	ldr	r2, [r7, #16]
 8007332:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	68fa      	ldr	r2, [r7, #12]
 8007338:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800733a:	683b      	ldr	r3, [r7, #0]
 800733c:	685a      	ldr	r2, [r3, #4]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	697a      	ldr	r2, [r7, #20]
 8007346:	621a      	str	r2, [r3, #32]
}
 8007348:	bf00      	nop
 800734a:	371c      	adds	r7, #28
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr
 8007354:	40012c00 	.word	0x40012c00
 8007358:	40013400 	.word	0x40013400
 800735c:	40014000 	.word	0x40014000
 8007360:	40014400 	.word	0x40014400
 8007364:	40014800 	.word	0x40014800
 8007368:	40015000 	.word	0x40015000

0800736c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800736c:	b480      	push	{r7}
 800736e:	b087      	sub	sp, #28
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
 8007374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a1b      	ldr	r3, [r3, #32]
 800737a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6a1b      	ldr	r3, [r3, #32]
 8007380:	f023 0210 	bic.w	r2, r3, #16
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	685b      	ldr	r3, [r3, #4]
 800738c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	699b      	ldr	r3, [r3, #24]
 8007392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800739a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800739e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80073a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	021b      	lsls	r3, r3, #8
 80073ae:	68fa      	ldr	r2, [r7, #12]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	f023 0320 	bic.w	r3, r3, #32
 80073ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073bc:	683b      	ldr	r3, [r7, #0]
 80073be:	689b      	ldr	r3, [r3, #8]
 80073c0:	011b      	lsls	r3, r3, #4
 80073c2:	697a      	ldr	r2, [r7, #20]
 80073c4:	4313      	orrs	r3, r2
 80073c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	4a2c      	ldr	r2, [pc, #176]	@ (800747c <TIM_OC2_SetConfig+0x110>)
 80073cc:	4293      	cmp	r3, r2
 80073ce:	d007      	beq.n	80073e0 <TIM_OC2_SetConfig+0x74>
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	4a2b      	ldr	r2, [pc, #172]	@ (8007480 <TIM_OC2_SetConfig+0x114>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d003      	beq.n	80073e0 <TIM_OC2_SetConfig+0x74>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a2a      	ldr	r2, [pc, #168]	@ (8007484 <TIM_OC2_SetConfig+0x118>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d10d      	bne.n	80073fc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073e8:	683b      	ldr	r3, [r7, #0]
 80073ea:	68db      	ldr	r3, [r3, #12]
 80073ec:	011b      	lsls	r3, r3, #4
 80073ee:	697a      	ldr	r2, [r7, #20]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80073fa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	4a1f      	ldr	r2, [pc, #124]	@ (800747c <TIM_OC2_SetConfig+0x110>)
 8007400:	4293      	cmp	r3, r2
 8007402:	d013      	beq.n	800742c <TIM_OC2_SetConfig+0xc0>
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	4a1e      	ldr	r2, [pc, #120]	@ (8007480 <TIM_OC2_SetConfig+0x114>)
 8007408:	4293      	cmp	r3, r2
 800740a:	d00f      	beq.n	800742c <TIM_OC2_SetConfig+0xc0>
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	4a1e      	ldr	r2, [pc, #120]	@ (8007488 <TIM_OC2_SetConfig+0x11c>)
 8007410:	4293      	cmp	r3, r2
 8007412:	d00b      	beq.n	800742c <TIM_OC2_SetConfig+0xc0>
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	4a1d      	ldr	r2, [pc, #116]	@ (800748c <TIM_OC2_SetConfig+0x120>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d007      	beq.n	800742c <TIM_OC2_SetConfig+0xc0>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4a1c      	ldr	r2, [pc, #112]	@ (8007490 <TIM_OC2_SetConfig+0x124>)
 8007420:	4293      	cmp	r3, r2
 8007422:	d003      	beq.n	800742c <TIM_OC2_SetConfig+0xc0>
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	4a17      	ldr	r2, [pc, #92]	@ (8007484 <TIM_OC2_SetConfig+0x118>)
 8007428:	4293      	cmp	r3, r2
 800742a:	d113      	bne.n	8007454 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800742c:	693b      	ldr	r3, [r7, #16]
 800742e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007432:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007434:	693b      	ldr	r3, [r7, #16]
 8007436:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800743a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	695b      	ldr	r3, [r3, #20]
 8007440:	009b      	lsls	r3, r3, #2
 8007442:	693a      	ldr	r2, [r7, #16]
 8007444:	4313      	orrs	r3, r2
 8007446:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	699b      	ldr	r3, [r3, #24]
 800744c:	009b      	lsls	r3, r3, #2
 800744e:	693a      	ldr	r2, [r7, #16]
 8007450:	4313      	orrs	r3, r2
 8007452:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	693a      	ldr	r2, [r7, #16]
 8007458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	68fa      	ldr	r2, [r7, #12]
 800745e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007460:	683b      	ldr	r3, [r7, #0]
 8007462:	685a      	ldr	r2, [r3, #4]
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	697a      	ldr	r2, [r7, #20]
 800746c:	621a      	str	r2, [r3, #32]
}
 800746e:	bf00      	nop
 8007470:	371c      	adds	r7, #28
 8007472:	46bd      	mov	sp, r7
 8007474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007478:	4770      	bx	lr
 800747a:	bf00      	nop
 800747c:	40012c00 	.word	0x40012c00
 8007480:	40013400 	.word	0x40013400
 8007484:	40015000 	.word	0x40015000
 8007488:	40014000 	.word	0x40014000
 800748c:	40014400 	.word	0x40014400
 8007490:	40014800 	.word	0x40014800

08007494 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8007494:	b480      	push	{r7}
 8007496:	b087      	sub	sp, #28
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
 800749c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	6a1b      	ldr	r3, [r3, #32]
 80074a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6a1b      	ldr	r3, [r3, #32]
 80074a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	685b      	ldr	r3, [r3, #4]
 80074b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	69db      	ldr	r3, [r3, #28]
 80074ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80074c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80074c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	f023 0303 	bic.w	r3, r3, #3
 80074ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	68fa      	ldr	r2, [r7, #12]
 80074d6:	4313      	orrs	r3, r2
 80074d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80074e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80074e2:	683b      	ldr	r3, [r7, #0]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	021b      	lsls	r3, r3, #8
 80074e8:	697a      	ldr	r2, [r7, #20]
 80074ea:	4313      	orrs	r3, r2
 80074ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a2b      	ldr	r2, [pc, #172]	@ (80075a0 <TIM_OC3_SetConfig+0x10c>)
 80074f2:	4293      	cmp	r3, r2
 80074f4:	d007      	beq.n	8007506 <TIM_OC3_SetConfig+0x72>
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	4a2a      	ldr	r2, [pc, #168]	@ (80075a4 <TIM_OC3_SetConfig+0x110>)
 80074fa:	4293      	cmp	r3, r2
 80074fc:	d003      	beq.n	8007506 <TIM_OC3_SetConfig+0x72>
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	4a29      	ldr	r2, [pc, #164]	@ (80075a8 <TIM_OC3_SetConfig+0x114>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d10d      	bne.n	8007522 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007506:	697b      	ldr	r3, [r7, #20]
 8007508:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800750c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	68db      	ldr	r3, [r3, #12]
 8007512:	021b      	lsls	r3, r3, #8
 8007514:	697a      	ldr	r2, [r7, #20]
 8007516:	4313      	orrs	r3, r2
 8007518:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800751a:	697b      	ldr	r3, [r7, #20]
 800751c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007520:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	4a1e      	ldr	r2, [pc, #120]	@ (80075a0 <TIM_OC3_SetConfig+0x10c>)
 8007526:	4293      	cmp	r3, r2
 8007528:	d013      	beq.n	8007552 <TIM_OC3_SetConfig+0xbe>
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	4a1d      	ldr	r2, [pc, #116]	@ (80075a4 <TIM_OC3_SetConfig+0x110>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d00f      	beq.n	8007552 <TIM_OC3_SetConfig+0xbe>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4a1d      	ldr	r2, [pc, #116]	@ (80075ac <TIM_OC3_SetConfig+0x118>)
 8007536:	4293      	cmp	r3, r2
 8007538:	d00b      	beq.n	8007552 <TIM_OC3_SetConfig+0xbe>
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	4a1c      	ldr	r2, [pc, #112]	@ (80075b0 <TIM_OC3_SetConfig+0x11c>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d007      	beq.n	8007552 <TIM_OC3_SetConfig+0xbe>
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	4a1b      	ldr	r2, [pc, #108]	@ (80075b4 <TIM_OC3_SetConfig+0x120>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d003      	beq.n	8007552 <TIM_OC3_SetConfig+0xbe>
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	4a16      	ldr	r2, [pc, #88]	@ (80075a8 <TIM_OC3_SetConfig+0x114>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d113      	bne.n	800757a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007558:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800755a:	693b      	ldr	r3, [r7, #16]
 800755c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007560:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007562:	683b      	ldr	r3, [r7, #0]
 8007564:	695b      	ldr	r3, [r3, #20]
 8007566:	011b      	lsls	r3, r3, #4
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	4313      	orrs	r3, r2
 800756c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	699b      	ldr	r3, [r3, #24]
 8007572:	011b      	lsls	r3, r3, #4
 8007574:	693a      	ldr	r2, [r7, #16]
 8007576:	4313      	orrs	r3, r2
 8007578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	693a      	ldr	r2, [r7, #16]
 800757e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	68fa      	ldr	r2, [r7, #12]
 8007584:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	685a      	ldr	r2, [r3, #4]
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	697a      	ldr	r2, [r7, #20]
 8007592:	621a      	str	r2, [r3, #32]
}
 8007594:	bf00      	nop
 8007596:	371c      	adds	r7, #28
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr
 80075a0:	40012c00 	.word	0x40012c00
 80075a4:	40013400 	.word	0x40013400
 80075a8:	40015000 	.word	0x40015000
 80075ac:	40014000 	.word	0x40014000
 80075b0:	40014400 	.word	0x40014400
 80075b4:	40014800 	.word	0x40014800

080075b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80075b8:	b480      	push	{r7}
 80075ba:	b087      	sub	sp, #28
 80075bc:	af00      	add	r7, sp, #0
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6a1b      	ldr	r3, [r3, #32]
 80075cc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	69db      	ldr	r3, [r3, #28]
 80075de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80075e6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80075ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80075f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	021b      	lsls	r3, r3, #8
 80075fa:	68fa      	ldr	r2, [r7, #12]
 80075fc:	4313      	orrs	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007600:	697b      	ldr	r3, [r7, #20]
 8007602:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8007606:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007608:	683b      	ldr	r3, [r7, #0]
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	031b      	lsls	r3, r3, #12
 800760e:	697a      	ldr	r2, [r7, #20]
 8007610:	4313      	orrs	r3, r2
 8007612:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	4a2c      	ldr	r2, [pc, #176]	@ (80076c8 <TIM_OC4_SetConfig+0x110>)
 8007618:	4293      	cmp	r3, r2
 800761a:	d007      	beq.n	800762c <TIM_OC4_SetConfig+0x74>
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	4a2b      	ldr	r2, [pc, #172]	@ (80076cc <TIM_OC4_SetConfig+0x114>)
 8007620:	4293      	cmp	r3, r2
 8007622:	d003      	beq.n	800762c <TIM_OC4_SetConfig+0x74>
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	4a2a      	ldr	r2, [pc, #168]	@ (80076d0 <TIM_OC4_SetConfig+0x118>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d10d      	bne.n	8007648 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	031b      	lsls	r3, r3, #12
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	4313      	orrs	r3, r2
 800763e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8007640:	697b      	ldr	r3, [r7, #20]
 8007642:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8007646:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	4a1f      	ldr	r2, [pc, #124]	@ (80076c8 <TIM_OC4_SetConfig+0x110>)
 800764c:	4293      	cmp	r3, r2
 800764e:	d013      	beq.n	8007678 <TIM_OC4_SetConfig+0xc0>
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	4a1e      	ldr	r2, [pc, #120]	@ (80076cc <TIM_OC4_SetConfig+0x114>)
 8007654:	4293      	cmp	r3, r2
 8007656:	d00f      	beq.n	8007678 <TIM_OC4_SetConfig+0xc0>
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	4a1e      	ldr	r2, [pc, #120]	@ (80076d4 <TIM_OC4_SetConfig+0x11c>)
 800765c:	4293      	cmp	r3, r2
 800765e:	d00b      	beq.n	8007678 <TIM_OC4_SetConfig+0xc0>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	4a1d      	ldr	r2, [pc, #116]	@ (80076d8 <TIM_OC4_SetConfig+0x120>)
 8007664:	4293      	cmp	r3, r2
 8007666:	d007      	beq.n	8007678 <TIM_OC4_SetConfig+0xc0>
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	4a1c      	ldr	r2, [pc, #112]	@ (80076dc <TIM_OC4_SetConfig+0x124>)
 800766c:	4293      	cmp	r3, r2
 800766e:	d003      	beq.n	8007678 <TIM_OC4_SetConfig+0xc0>
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4a17      	ldr	r2, [pc, #92]	@ (80076d0 <TIM_OC4_SetConfig+0x118>)
 8007674:	4293      	cmp	r3, r2
 8007676:	d113      	bne.n	80076a0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007678:	693b      	ldr	r3, [r7, #16]
 800767a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800767e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8007680:	693b      	ldr	r3, [r7, #16]
 8007682:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007686:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	695b      	ldr	r3, [r3, #20]
 800768c:	019b      	lsls	r3, r3, #6
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007694:	683b      	ldr	r3, [r7, #0]
 8007696:	699b      	ldr	r3, [r3, #24]
 8007698:	019b      	lsls	r3, r3, #6
 800769a:	693a      	ldr	r2, [r7, #16]
 800769c:	4313      	orrs	r3, r2
 800769e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	693a      	ldr	r2, [r7, #16]
 80076a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68fa      	ldr	r2, [r7, #12]
 80076aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	685a      	ldr	r2, [r3, #4]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	697a      	ldr	r2, [r7, #20]
 80076b8:	621a      	str	r2, [r3, #32]
}
 80076ba:	bf00      	nop
 80076bc:	371c      	adds	r7, #28
 80076be:	46bd      	mov	sp, r7
 80076c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c4:	4770      	bx	lr
 80076c6:	bf00      	nop
 80076c8:	40012c00 	.word	0x40012c00
 80076cc:	40013400 	.word	0x40013400
 80076d0:	40015000 	.word	0x40015000
 80076d4:	40014000 	.word	0x40014000
 80076d8:	40014400 	.word	0x40014400
 80076dc:	40014800 	.word	0x40014800

080076e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b087      	sub	sp, #28
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	6a1b      	ldr	r3, [r3, #32]
 80076f4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	685b      	ldr	r3, [r3, #4]
 8007700:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007706:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800770e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007712:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007714:	683b      	ldr	r3, [r7, #0]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	68fa      	ldr	r2, [r7, #12]
 800771a:	4313      	orrs	r3, r2
 800771c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800771e:	693b      	ldr	r3, [r7, #16]
 8007720:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8007724:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007726:	683b      	ldr	r3, [r7, #0]
 8007728:	689b      	ldr	r3, [r3, #8]
 800772a:	041b      	lsls	r3, r3, #16
 800772c:	693a      	ldr	r2, [r7, #16]
 800772e:	4313      	orrs	r3, r2
 8007730:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	4a19      	ldr	r2, [pc, #100]	@ (800779c <TIM_OC5_SetConfig+0xbc>)
 8007736:	4293      	cmp	r3, r2
 8007738:	d013      	beq.n	8007762 <TIM_OC5_SetConfig+0x82>
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	4a18      	ldr	r2, [pc, #96]	@ (80077a0 <TIM_OC5_SetConfig+0xc0>)
 800773e:	4293      	cmp	r3, r2
 8007740:	d00f      	beq.n	8007762 <TIM_OC5_SetConfig+0x82>
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	4a17      	ldr	r2, [pc, #92]	@ (80077a4 <TIM_OC5_SetConfig+0xc4>)
 8007746:	4293      	cmp	r3, r2
 8007748:	d00b      	beq.n	8007762 <TIM_OC5_SetConfig+0x82>
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	4a16      	ldr	r2, [pc, #88]	@ (80077a8 <TIM_OC5_SetConfig+0xc8>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d007      	beq.n	8007762 <TIM_OC5_SetConfig+0x82>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	4a15      	ldr	r2, [pc, #84]	@ (80077ac <TIM_OC5_SetConfig+0xcc>)
 8007756:	4293      	cmp	r3, r2
 8007758:	d003      	beq.n	8007762 <TIM_OC5_SetConfig+0x82>
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	4a14      	ldr	r2, [pc, #80]	@ (80077b0 <TIM_OC5_SetConfig+0xd0>)
 800775e:	4293      	cmp	r3, r2
 8007760:	d109      	bne.n	8007776 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8007762:	697b      	ldr	r3, [r7, #20]
 8007764:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007768:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800776a:	683b      	ldr	r3, [r7, #0]
 800776c:	695b      	ldr	r3, [r3, #20]
 800776e:	021b      	lsls	r3, r3, #8
 8007770:	697a      	ldr	r2, [r7, #20]
 8007772:	4313      	orrs	r3, r2
 8007774:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	697a      	ldr	r2, [r7, #20]
 800777a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	68fa      	ldr	r2, [r7, #12]
 8007780:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	685a      	ldr	r2, [r3, #4]
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	693a      	ldr	r2, [r7, #16]
 800778e:	621a      	str	r2, [r3, #32]
}
 8007790:	bf00      	nop
 8007792:	371c      	adds	r7, #28
 8007794:	46bd      	mov	sp, r7
 8007796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800779a:	4770      	bx	lr
 800779c:	40012c00 	.word	0x40012c00
 80077a0:	40013400 	.word	0x40013400
 80077a4:	40014000 	.word	0x40014000
 80077a8:	40014400 	.word	0x40014400
 80077ac:	40014800 	.word	0x40014800
 80077b0:	40015000 	.word	0x40015000

080077b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b087      	sub	sp, #28
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	6a1b      	ldr	r3, [r3, #32]
 80077c2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	6a1b      	ldr	r3, [r3, #32]
 80077c8:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	685b      	ldr	r3, [r3, #4]
 80077d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80077da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80077e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80077e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	021b      	lsls	r3, r3, #8
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	4313      	orrs	r3, r2
 80077f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80077f4:	693b      	ldr	r3, [r7, #16]
 80077f6:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80077fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	689b      	ldr	r3, [r3, #8]
 8007800:	051b      	lsls	r3, r3, #20
 8007802:	693a      	ldr	r2, [r7, #16]
 8007804:	4313      	orrs	r3, r2
 8007806:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	4a1a      	ldr	r2, [pc, #104]	@ (8007874 <TIM_OC6_SetConfig+0xc0>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d013      	beq.n	8007838 <TIM_OC6_SetConfig+0x84>
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a19      	ldr	r2, [pc, #100]	@ (8007878 <TIM_OC6_SetConfig+0xc4>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d00f      	beq.n	8007838 <TIM_OC6_SetConfig+0x84>
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	4a18      	ldr	r2, [pc, #96]	@ (800787c <TIM_OC6_SetConfig+0xc8>)
 800781c:	4293      	cmp	r3, r2
 800781e:	d00b      	beq.n	8007838 <TIM_OC6_SetConfig+0x84>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	4a17      	ldr	r2, [pc, #92]	@ (8007880 <TIM_OC6_SetConfig+0xcc>)
 8007824:	4293      	cmp	r3, r2
 8007826:	d007      	beq.n	8007838 <TIM_OC6_SetConfig+0x84>
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	4a16      	ldr	r2, [pc, #88]	@ (8007884 <TIM_OC6_SetConfig+0xd0>)
 800782c:	4293      	cmp	r3, r2
 800782e:	d003      	beq.n	8007838 <TIM_OC6_SetConfig+0x84>
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	4a15      	ldr	r2, [pc, #84]	@ (8007888 <TIM_OC6_SetConfig+0xd4>)
 8007834:	4293      	cmp	r3, r2
 8007836:	d109      	bne.n	800784c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007838:	697b      	ldr	r3, [r7, #20]
 800783a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800783e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	029b      	lsls	r3, r3, #10
 8007846:	697a      	ldr	r2, [r7, #20]
 8007848:	4313      	orrs	r3, r2
 800784a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	697a      	ldr	r2, [r7, #20]
 8007850:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	68fa      	ldr	r2, [r7, #12]
 8007856:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007858:	683b      	ldr	r3, [r7, #0]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	693a      	ldr	r2, [r7, #16]
 8007864:	621a      	str	r2, [r3, #32]
}
 8007866:	bf00      	nop
 8007868:	371c      	adds	r7, #28
 800786a:	46bd      	mov	sp, r7
 800786c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007870:	4770      	bx	lr
 8007872:	bf00      	nop
 8007874:	40012c00 	.word	0x40012c00
 8007878:	40013400 	.word	0x40013400
 800787c:	40014000 	.word	0x40014000
 8007880:	40014400 	.word	0x40014400
 8007884:	40014800 	.word	0x40014800
 8007888:	40015000 	.word	0x40015000

0800788c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	6a1b      	ldr	r3, [r3, #32]
 800789c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	6a1b      	ldr	r3, [r3, #32]
 80078a2:	f023 0201 	bic.w	r2, r3, #1
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	699b      	ldr	r3, [r3, #24]
 80078ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80078b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	011b      	lsls	r3, r3, #4
 80078bc:	693a      	ldr	r2, [r7, #16]
 80078be:	4313      	orrs	r3, r2
 80078c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	f023 030a 	bic.w	r3, r3, #10
 80078c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80078ca:	697a      	ldr	r2, [r7, #20]
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	4313      	orrs	r3, r2
 80078d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	693a      	ldr	r2, [r7, #16]
 80078d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	697a      	ldr	r2, [r7, #20]
 80078dc:	621a      	str	r2, [r3, #32]
}
 80078de:	bf00      	nop
 80078e0:	371c      	adds	r7, #28
 80078e2:	46bd      	mov	sp, r7
 80078e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e8:	4770      	bx	lr

080078ea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80078ea:	b480      	push	{r7}
 80078ec:	b087      	sub	sp, #28
 80078ee:	af00      	add	r7, sp, #0
 80078f0:	60f8      	str	r0, [r7, #12]
 80078f2:	60b9      	str	r1, [r7, #8]
 80078f4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	6a1b      	ldr	r3, [r3, #32]
 80078fa:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	6a1b      	ldr	r3, [r3, #32]
 8007900:	f023 0210 	bic.w	r2, r3, #16
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	699b      	ldr	r3, [r3, #24]
 800790c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8007914:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	031b      	lsls	r3, r3, #12
 800791a:	693a      	ldr	r2, [r7, #16]
 800791c:	4313      	orrs	r3, r2
 800791e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007920:	697b      	ldr	r3, [r7, #20]
 8007922:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8007926:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	011b      	lsls	r3, r3, #4
 800792c:	697a      	ldr	r2, [r7, #20]
 800792e:	4313      	orrs	r3, r2
 8007930:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	693a      	ldr	r2, [r7, #16]
 8007936:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	697a      	ldr	r2, [r7, #20]
 800793c:	621a      	str	r2, [r3, #32]
}
 800793e:	bf00      	nop
 8007940:	371c      	adds	r7, #28
 8007942:	46bd      	mov	sp, r7
 8007944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007948:	4770      	bx	lr

0800794a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800794a:	b480      	push	{r7}
 800794c:	b085      	sub	sp, #20
 800794e:	af00      	add	r7, sp, #0
 8007950:	6078      	str	r0, [r7, #4]
 8007952:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8007960:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007964:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007966:	683a      	ldr	r2, [r7, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	4313      	orrs	r3, r2
 800796c:	f043 0307 	orr.w	r3, r3, #7
 8007970:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	68fa      	ldr	r2, [r7, #12]
 8007976:	609a      	str	r2, [r3, #8]
}
 8007978:	bf00      	nop
 800797a:	3714      	adds	r7, #20
 800797c:	46bd      	mov	sp, r7
 800797e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007982:	4770      	bx	lr

08007984 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007984:	b480      	push	{r7}
 8007986:	b087      	sub	sp, #28
 8007988:	af00      	add	r7, sp, #0
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	607a      	str	r2, [r7, #4]
 8007990:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	689b      	ldr	r3, [r3, #8]
 8007996:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007998:	697b      	ldr	r3, [r7, #20]
 800799a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800799e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	021a      	lsls	r2, r3, #8
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	431a      	orrs	r2, r3
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	4313      	orrs	r3, r2
 80079ac:	697a      	ldr	r2, [r7, #20]
 80079ae:	4313      	orrs	r3, r2
 80079b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	697a      	ldr	r2, [r7, #20]
 80079b6:	609a      	str	r2, [r3, #8]
}
 80079b8:	bf00      	nop
 80079ba:	371c      	adds	r7, #28
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b087      	sub	sp, #28
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	60f8      	str	r0, [r7, #12]
 80079cc:	60b9      	str	r1, [r7, #8]
 80079ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80079d0:	68bb      	ldr	r3, [r7, #8]
 80079d2:	f003 031f 	and.w	r3, r3, #31
 80079d6:	2201      	movs	r2, #1
 80079d8:	fa02 f303 	lsl.w	r3, r2, r3
 80079dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	6a1a      	ldr	r2, [r3, #32]
 80079e2:	697b      	ldr	r3, [r7, #20]
 80079e4:	43db      	mvns	r3, r3
 80079e6:	401a      	ands	r2, r3
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	6a1a      	ldr	r2, [r3, #32]
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	f003 031f 	and.w	r3, r3, #31
 80079f6:	6879      	ldr	r1, [r7, #4]
 80079f8:	fa01 f303 	lsl.w	r3, r1, r3
 80079fc:	431a      	orrs	r2, r3
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	621a      	str	r2, [r3, #32]
}
 8007a02:	bf00      	nop
 8007a04:	371c      	adds	r7, #28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
	...

08007a10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b085      	sub	sp, #20
 8007a14:	af00      	add	r7, sp, #0
 8007a16:	6078      	str	r0, [r7, #4]
 8007a18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d101      	bne.n	8007a28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007a24:	2302      	movs	r3, #2
 8007a26:	e074      	b.n	8007b12 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	2201      	movs	r2, #1
 8007a2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	2202      	movs	r2, #2
 8007a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	685b      	ldr	r3, [r3, #4]
 8007a3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a34      	ldr	r2, [pc, #208]	@ (8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a4e:	4293      	cmp	r3, r2
 8007a50:	d009      	beq.n	8007a66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	681b      	ldr	r3, [r3, #0]
 8007a56:	4a33      	ldr	r2, [pc, #204]	@ (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007a58:	4293      	cmp	r3, r2
 8007a5a:	d004      	beq.n	8007a66 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	4a31      	ldr	r2, [pc, #196]	@ (8007b28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007a62:	4293      	cmp	r3, r2
 8007a64:	d108      	bne.n	8007a78 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8007a6c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685b      	ldr	r3, [r3, #4]
 8007a72:	68fa      	ldr	r2, [r7, #12]
 8007a74:	4313      	orrs	r3, r2
 8007a76:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8007a7e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a82:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007a84:	683b      	ldr	r3, [r7, #0]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68fa      	ldr	r2, [r7, #12]
 8007a8a:	4313      	orrs	r3, r2
 8007a8c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	68fa      	ldr	r2, [r7, #12]
 8007a94:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a21      	ldr	r2, [pc, #132]	@ (8007b20 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d022      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007aa8:	d01d      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a1f      	ldr	r2, [pc, #124]	@ (8007b2c <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d018      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	4a1d      	ldr	r2, [pc, #116]	@ (8007b30 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007aba:	4293      	cmp	r3, r2
 8007abc:	d013      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a1c      	ldr	r2, [pc, #112]	@ (8007b34 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007ac4:	4293      	cmp	r3, r2
 8007ac6:	d00e      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	4a15      	ldr	r2, [pc, #84]	@ (8007b24 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007ace:	4293      	cmp	r3, r2
 8007ad0:	d009      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	4a18      	ldr	r2, [pc, #96]	@ (8007b38 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	d004      	beq.n	8007ae6 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a11      	ldr	r2, [pc, #68]	@ (8007b28 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8007ae2:	4293      	cmp	r3, r2
 8007ae4:	d10c      	bne.n	8007b00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007aec:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	689b      	ldr	r3, [r3, #8]
 8007af2:	68ba      	ldr	r2, [r7, #8]
 8007af4:	4313      	orrs	r3, r2
 8007af6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68ba      	ldr	r2, [r7, #8]
 8007afe:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	2201      	movs	r2, #1
 8007b04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2200      	movs	r2, #0
 8007b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	40012c00 	.word	0x40012c00
 8007b24:	40013400 	.word	0x40013400
 8007b28:	40015000 	.word	0x40015000
 8007b2c:	40000400 	.word	0x40000400
 8007b30:	40000800 	.word	0x40000800
 8007b34:	40000c00 	.word	0x40000c00
 8007b38:	40014000 	.word	0x40014000

08007b3c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	6078      	str	r0, [r7, #4]
 8007b44:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007b46:	2300      	movs	r3, #0
 8007b48:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007b50:	2b01      	cmp	r3, #1
 8007b52:	d101      	bne.n	8007b58 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007b54:	2302      	movs	r3, #2
 8007b56:	e078      	b.n	8007c4a <HAL_TIMEx_ConfigBreakDeadTime+0x10e>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2201      	movs	r2, #1
 8007b5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8007b66:	683b      	ldr	r3, [r7, #0]
 8007b68:	68db      	ldr	r3, [r3, #12]
 8007b6a:	4313      	orrs	r3, r2
 8007b6c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007b74:	683b      	ldr	r3, [r7, #0]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	4313      	orrs	r3, r2
 8007b7a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	4313      	orrs	r3, r2
 8007b88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4313      	orrs	r3, r2
 8007b96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8007b9e:	683b      	ldr	r3, [r7, #0]
 8007ba0:	691b      	ldr	r3, [r3, #16]
 8007ba2:	4313      	orrs	r3, r2
 8007ba4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8007bac:	683b      	ldr	r3, [r7, #0]
 8007bae:	695b      	ldr	r3, [r3, #20]
 8007bb0:	4313      	orrs	r3, r2
 8007bb2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8007bba:	683b      	ldr	r3, [r7, #0]
 8007bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 8007bc8:	683b      	ldr	r3, [r7, #0]
 8007bca:	699b      	ldr	r3, [r3, #24]
 8007bcc:	041b      	lsls	r3, r3, #16
 8007bce:	4313      	orrs	r3, r2
 8007bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	69db      	ldr	r3, [r3, #28]
 8007bdc:	4313      	orrs	r3, r2
 8007bde:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	4a1c      	ldr	r2, [pc, #112]	@ (8007c58 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8007be6:	4293      	cmp	r3, r2
 8007be8:	d009      	beq.n	8007bfe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	4a1b      	ldr	r2, [pc, #108]	@ (8007c5c <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8007bf0:	4293      	cmp	r3, r2
 8007bf2:	d004      	beq.n	8007bfe <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	4a19      	ldr	r2, [pc, #100]	@ (8007c60 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d11c      	bne.n	8007c38 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 8007c04:	683b      	ldr	r3, [r7, #0]
 8007c06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c08:	051b      	lsls	r3, r3, #20
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8007c14:	683b      	ldr	r3, [r7, #0]
 8007c16:	6a1b      	ldr	r3, [r3, #32]
 8007c18:	4313      	orrs	r3, r2
 8007c1a:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007c1c:	68fb      	ldr	r3, [r7, #12]
 8007c1e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007c26:	4313      	orrs	r3, r2
 8007c28:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8007c30:	683b      	ldr	r3, [r7, #0]
 8007c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	68fa      	ldr	r2, [r7, #12]
 8007c3e:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8007c48:	2300      	movs	r3, #0
}
 8007c4a:	4618      	mov	r0, r3
 8007c4c:	3714      	adds	r7, #20
 8007c4e:	46bd      	mov	sp, r7
 8007c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c54:	4770      	bx	lr
 8007c56:	bf00      	nop
 8007c58:	40012c00 	.word	0x40012c00
 8007c5c:	40013400 	.word	0x40013400
 8007c60:	40015000 	.word	0x40015000

08007c64 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007c64:	b480      	push	{r7}
 8007c66:	b083      	sub	sp, #12
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007c6c:	bf00      	nop
 8007c6e:	370c      	adds	r7, #12
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007c80:	bf00      	nop
 8007c82:	370c      	adds	r7, #12
 8007c84:	46bd      	mov	sp, r7
 8007c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c8a:	4770      	bx	lr

08007c8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007c8c:	b480      	push	{r7}
 8007c8e:	b083      	sub	sp, #12
 8007c90:	af00      	add	r7, sp, #0
 8007c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007c94:	bf00      	nop
 8007c96:	370c      	adds	r7, #12
 8007c98:	46bd      	mov	sp, r7
 8007c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9e:	4770      	bx	lr

08007ca0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007ca0:	b480      	push	{r7}
 8007ca2:	b083      	sub	sp, #12
 8007ca4:	af00      	add	r7, sp, #0
 8007ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007ca8:	bf00      	nop
 8007caa:	370c      	adds	r7, #12
 8007cac:	46bd      	mov	sp, r7
 8007cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb2:	4770      	bx	lr

08007cb4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007cb4:	b480      	push	{r7}
 8007cb6:	b083      	sub	sp, #12
 8007cb8:	af00      	add	r7, sp, #0
 8007cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007cbc:	bf00      	nop
 8007cbe:	370c      	adds	r7, #12
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc6:	4770      	bx	lr

08007cc8 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007cc8:	b480      	push	{r7}
 8007cca:	b083      	sub	sp, #12
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007cd0:	bf00      	nop
 8007cd2:	370c      	adds	r7, #12
 8007cd4:	46bd      	mov	sp, r7
 8007cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cda:	4770      	bx	lr

08007cdc <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007cdc:	b480      	push	{r7}
 8007cde:	b083      	sub	sp, #12
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007ce4:	bf00      	nop
 8007ce6:	370c      	adds	r7, #12
 8007ce8:	46bd      	mov	sp, r7
 8007cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cee:	4770      	bx	lr

08007cf0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cf0:	b580      	push	{r7, lr}
 8007cf2:	b082      	sub	sp, #8
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d101      	bne.n	8007d02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cfe:	2301      	movs	r3, #1
 8007d00:	e042      	b.n	8007d88 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d106      	bne.n	8007d1a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2200      	movs	r2, #0
 8007d10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007d14:	6878      	ldr	r0, [r7, #4]
 8007d16:	f7fa fac3 	bl	80022a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2224      	movs	r2, #36	@ 0x24
 8007d1e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f022 0201 	bic.w	r2, r2, #1
 8007d30:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d002      	beq.n	8007d40 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fbb2 	bl	80084a4 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007d40:	6878      	ldr	r0, [r7, #4]
 8007d42:	f000 f8b3 	bl	8007eac <UART_SetConfig>
 8007d46:	4603      	mov	r3, r0
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d101      	bne.n	8007d50 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e01b      	b.n	8007d88 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	685a      	ldr	r2, [r3, #4]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007d5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007d6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	681a      	ldr	r2, [r3, #0]
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	f042 0201 	orr.w	r2, r2, #1
 8007d7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d80:	6878      	ldr	r0, [r7, #4]
 8007d82:	f000 fc31 	bl	80085e8 <UART_CheckIdleState>
 8007d86:	4603      	mov	r3, r0
}
 8007d88:	4618      	mov	r0, r3
 8007d8a:	3708      	adds	r7, #8
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	bd80      	pop	{r7, pc}

08007d90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b08a      	sub	sp, #40	@ 0x28
 8007d94:	af02      	add	r7, sp, #8
 8007d96:	60f8      	str	r0, [r7, #12]
 8007d98:	60b9      	str	r1, [r7, #8]
 8007d9a:	603b      	str	r3, [r7, #0]
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007da6:	2b20      	cmp	r3, #32
 8007da8:	d17b      	bne.n	8007ea2 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d002      	beq.n	8007db6 <HAL_UART_Transmit+0x26>
 8007db0:	88fb      	ldrh	r3, [r7, #6]
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d101      	bne.n	8007dba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8007db6:	2301      	movs	r3, #1
 8007db8:	e074      	b.n	8007ea4 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2200      	movs	r2, #0
 8007dbe:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	2221      	movs	r2, #33	@ 0x21
 8007dc6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007dca:	f7fa fc9b 	bl	8002704 <HAL_GetTick>
 8007dce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007dd0:	68fb      	ldr	r3, [r7, #12]
 8007dd2:	88fa      	ldrh	r2, [r7, #6]
 8007dd4:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	88fa      	ldrh	r2, [r7, #6]
 8007ddc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007de8:	d108      	bne.n	8007dfc <HAL_UART_Transmit+0x6c>
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	691b      	ldr	r3, [r3, #16]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d104      	bne.n	8007dfc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007df2:	2300      	movs	r3, #0
 8007df4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007df6:	68bb      	ldr	r3, [r7, #8]
 8007df8:	61bb      	str	r3, [r7, #24]
 8007dfa:	e003      	b.n	8007e04 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007e00:	2300      	movs	r3, #0
 8007e02:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007e04:	e030      	b.n	8007e68 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007e06:	683b      	ldr	r3, [r7, #0]
 8007e08:	9300      	str	r3, [sp, #0]
 8007e0a:	697b      	ldr	r3, [r7, #20]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2180      	movs	r1, #128	@ 0x80
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f000 fc93 	bl	800873c <UART_WaitOnFlagUntilTimeout>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d005      	beq.n	8007e28 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	2220      	movs	r2, #32
 8007e20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e03d      	b.n	8007ea4 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d10b      	bne.n	8007e46 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007e2e:	69bb      	ldr	r3, [r7, #24]
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	461a      	mov	r2, r3
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007e3c:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007e3e:	69bb      	ldr	r3, [r7, #24]
 8007e40:	3302      	adds	r3, #2
 8007e42:	61bb      	str	r3, [r7, #24]
 8007e44:	e007      	b.n	8007e56 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e46:	69fb      	ldr	r3, [r7, #28]
 8007e48:	781a      	ldrb	r2, [r3, #0]
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007e50:	69fb      	ldr	r3, [r7, #28]
 8007e52:	3301      	adds	r3, #1
 8007e54:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e5c:	b29b      	uxth	r3, r3
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1c8      	bne.n	8007e06 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	9300      	str	r3, [sp, #0]
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	2140      	movs	r1, #64	@ 0x40
 8007e7e:	68f8      	ldr	r0, [r7, #12]
 8007e80:	f000 fc5c 	bl	800873c <UART_WaitOnFlagUntilTimeout>
 8007e84:	4603      	mov	r3, r0
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d005      	beq.n	8007e96 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2220      	movs	r2, #32
 8007e8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e006      	b.n	8007ea4 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2220      	movs	r2, #32
 8007e9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007e9e:	2300      	movs	r3, #0
 8007ea0:	e000      	b.n	8007ea4 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8007ea2:	2302      	movs	r3, #2
  }
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3720      	adds	r7, #32
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007eac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007eb0:	b08c      	sub	sp, #48	@ 0x30
 8007eb2:	af00      	add	r7, sp, #0
 8007eb4:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007ebc:	697b      	ldr	r3, [r7, #20]
 8007ebe:	689a      	ldr	r2, [r3, #8]
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	697b      	ldr	r3, [r7, #20]
 8007ec8:	695b      	ldr	r3, [r3, #20]
 8007eca:	431a      	orrs	r2, r3
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	681a      	ldr	r2, [r3, #0]
 8007eda:	4baa      	ldr	r3, [pc, #680]	@ (8008184 <UART_SetConfig+0x2d8>)
 8007edc:	4013      	ands	r3, r2
 8007ede:	697a      	ldr	r2, [r7, #20]
 8007ee0:	6812      	ldr	r2, [r2, #0]
 8007ee2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007ee4:	430b      	orrs	r3, r1
 8007ee6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007ee8:	697b      	ldr	r3, [r7, #20]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	685b      	ldr	r3, [r3, #4]
 8007eee:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ef2:	697b      	ldr	r3, [r7, #20]
 8007ef4:	68da      	ldr	r2, [r3, #12]
 8007ef6:	697b      	ldr	r3, [r7, #20]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	430a      	orrs	r2, r1
 8007efc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	699b      	ldr	r3, [r3, #24]
 8007f02:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007f04:	697b      	ldr	r3, [r7, #20]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	4a9f      	ldr	r2, [pc, #636]	@ (8008188 <UART_SetConfig+0x2dc>)
 8007f0a:	4293      	cmp	r3, r2
 8007f0c:	d004      	beq.n	8007f18 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	6a1b      	ldr	r3, [r3, #32]
 8007f12:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f14:	4313      	orrs	r3, r2
 8007f16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007f22:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007f26:	697a      	ldr	r2, [r7, #20]
 8007f28:	6812      	ldr	r2, [r2, #0]
 8007f2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f2c:	430b      	orrs	r3, r1
 8007f2e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007f30:	697b      	ldr	r3, [r7, #20]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f36:	f023 010f 	bic.w	r1, r3, #15
 8007f3a:	697b      	ldr	r3, [r7, #20]
 8007f3c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f3e:	697b      	ldr	r3, [r7, #20]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	430a      	orrs	r2, r1
 8007f44:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	4a90      	ldr	r2, [pc, #576]	@ (800818c <UART_SetConfig+0x2e0>)
 8007f4c:	4293      	cmp	r3, r2
 8007f4e:	d125      	bne.n	8007f9c <UART_SetConfig+0xf0>
 8007f50:	4b8f      	ldr	r3, [pc, #572]	@ (8008190 <UART_SetConfig+0x2e4>)
 8007f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f56:	f003 0303 	and.w	r3, r3, #3
 8007f5a:	2b03      	cmp	r3, #3
 8007f5c:	d81a      	bhi.n	8007f94 <UART_SetConfig+0xe8>
 8007f5e:	a201      	add	r2, pc, #4	@ (adr r2, 8007f64 <UART_SetConfig+0xb8>)
 8007f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f64:	08007f75 	.word	0x08007f75
 8007f68:	08007f85 	.word	0x08007f85
 8007f6c:	08007f7d 	.word	0x08007f7d
 8007f70:	08007f8d 	.word	0x08007f8d
 8007f74:	2301      	movs	r3, #1
 8007f76:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f7a:	e116      	b.n	80081aa <UART_SetConfig+0x2fe>
 8007f7c:	2302      	movs	r3, #2
 8007f7e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f82:	e112      	b.n	80081aa <UART_SetConfig+0x2fe>
 8007f84:	2304      	movs	r3, #4
 8007f86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f8a:	e10e      	b.n	80081aa <UART_SetConfig+0x2fe>
 8007f8c:	2308      	movs	r3, #8
 8007f8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f92:	e10a      	b.n	80081aa <UART_SetConfig+0x2fe>
 8007f94:	2310      	movs	r3, #16
 8007f96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f9a:	e106      	b.n	80081aa <UART_SetConfig+0x2fe>
 8007f9c:	697b      	ldr	r3, [r7, #20]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4a7c      	ldr	r2, [pc, #496]	@ (8008194 <UART_SetConfig+0x2e8>)
 8007fa2:	4293      	cmp	r3, r2
 8007fa4:	d138      	bne.n	8008018 <UART_SetConfig+0x16c>
 8007fa6:	4b7a      	ldr	r3, [pc, #488]	@ (8008190 <UART_SetConfig+0x2e4>)
 8007fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007fac:	f003 030c 	and.w	r3, r3, #12
 8007fb0:	2b0c      	cmp	r3, #12
 8007fb2:	d82d      	bhi.n	8008010 <UART_SetConfig+0x164>
 8007fb4:	a201      	add	r2, pc, #4	@ (adr r2, 8007fbc <UART_SetConfig+0x110>)
 8007fb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fba:	bf00      	nop
 8007fbc:	08007ff1 	.word	0x08007ff1
 8007fc0:	08008011 	.word	0x08008011
 8007fc4:	08008011 	.word	0x08008011
 8007fc8:	08008011 	.word	0x08008011
 8007fcc:	08008001 	.word	0x08008001
 8007fd0:	08008011 	.word	0x08008011
 8007fd4:	08008011 	.word	0x08008011
 8007fd8:	08008011 	.word	0x08008011
 8007fdc:	08007ff9 	.word	0x08007ff9
 8007fe0:	08008011 	.word	0x08008011
 8007fe4:	08008011 	.word	0x08008011
 8007fe8:	08008011 	.word	0x08008011
 8007fec:	08008009 	.word	0x08008009
 8007ff0:	2300      	movs	r3, #0
 8007ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ff6:	e0d8      	b.n	80081aa <UART_SetConfig+0x2fe>
 8007ff8:	2302      	movs	r3, #2
 8007ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007ffe:	e0d4      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008000:	2304      	movs	r3, #4
 8008002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008006:	e0d0      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008008:	2308      	movs	r3, #8
 800800a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800800e:	e0cc      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008010:	2310      	movs	r3, #16
 8008012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008016:	e0c8      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008018:	697b      	ldr	r3, [r7, #20]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	4a5e      	ldr	r2, [pc, #376]	@ (8008198 <UART_SetConfig+0x2ec>)
 800801e:	4293      	cmp	r3, r2
 8008020:	d125      	bne.n	800806e <UART_SetConfig+0x1c2>
 8008022:	4b5b      	ldr	r3, [pc, #364]	@ (8008190 <UART_SetConfig+0x2e4>)
 8008024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008028:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 800802c:	2b30      	cmp	r3, #48	@ 0x30
 800802e:	d016      	beq.n	800805e <UART_SetConfig+0x1b2>
 8008030:	2b30      	cmp	r3, #48	@ 0x30
 8008032:	d818      	bhi.n	8008066 <UART_SetConfig+0x1ba>
 8008034:	2b20      	cmp	r3, #32
 8008036:	d00a      	beq.n	800804e <UART_SetConfig+0x1a2>
 8008038:	2b20      	cmp	r3, #32
 800803a:	d814      	bhi.n	8008066 <UART_SetConfig+0x1ba>
 800803c:	2b00      	cmp	r3, #0
 800803e:	d002      	beq.n	8008046 <UART_SetConfig+0x19a>
 8008040:	2b10      	cmp	r3, #16
 8008042:	d008      	beq.n	8008056 <UART_SetConfig+0x1aa>
 8008044:	e00f      	b.n	8008066 <UART_SetConfig+0x1ba>
 8008046:	2300      	movs	r3, #0
 8008048:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800804c:	e0ad      	b.n	80081aa <UART_SetConfig+0x2fe>
 800804e:	2302      	movs	r3, #2
 8008050:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008054:	e0a9      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008056:	2304      	movs	r3, #4
 8008058:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800805c:	e0a5      	b.n	80081aa <UART_SetConfig+0x2fe>
 800805e:	2308      	movs	r3, #8
 8008060:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008064:	e0a1      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008066:	2310      	movs	r3, #16
 8008068:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800806c:	e09d      	b.n	80081aa <UART_SetConfig+0x2fe>
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a4a      	ldr	r2, [pc, #296]	@ (800819c <UART_SetConfig+0x2f0>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d125      	bne.n	80080c4 <UART_SetConfig+0x218>
 8008078:	4b45      	ldr	r3, [pc, #276]	@ (8008190 <UART_SetConfig+0x2e4>)
 800807a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800807e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8008082:	2bc0      	cmp	r3, #192	@ 0xc0
 8008084:	d016      	beq.n	80080b4 <UART_SetConfig+0x208>
 8008086:	2bc0      	cmp	r3, #192	@ 0xc0
 8008088:	d818      	bhi.n	80080bc <UART_SetConfig+0x210>
 800808a:	2b80      	cmp	r3, #128	@ 0x80
 800808c:	d00a      	beq.n	80080a4 <UART_SetConfig+0x1f8>
 800808e:	2b80      	cmp	r3, #128	@ 0x80
 8008090:	d814      	bhi.n	80080bc <UART_SetConfig+0x210>
 8008092:	2b00      	cmp	r3, #0
 8008094:	d002      	beq.n	800809c <UART_SetConfig+0x1f0>
 8008096:	2b40      	cmp	r3, #64	@ 0x40
 8008098:	d008      	beq.n	80080ac <UART_SetConfig+0x200>
 800809a:	e00f      	b.n	80080bc <UART_SetConfig+0x210>
 800809c:	2300      	movs	r3, #0
 800809e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080a2:	e082      	b.n	80081aa <UART_SetConfig+0x2fe>
 80080a4:	2302      	movs	r3, #2
 80080a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080aa:	e07e      	b.n	80081aa <UART_SetConfig+0x2fe>
 80080ac:	2304      	movs	r3, #4
 80080ae:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080b2:	e07a      	b.n	80081aa <UART_SetConfig+0x2fe>
 80080b4:	2308      	movs	r3, #8
 80080b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ba:	e076      	b.n	80081aa <UART_SetConfig+0x2fe>
 80080bc:	2310      	movs	r3, #16
 80080be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080c2:	e072      	b.n	80081aa <UART_SetConfig+0x2fe>
 80080c4:	697b      	ldr	r3, [r7, #20]
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	4a35      	ldr	r2, [pc, #212]	@ (80081a0 <UART_SetConfig+0x2f4>)
 80080ca:	4293      	cmp	r3, r2
 80080cc:	d12a      	bne.n	8008124 <UART_SetConfig+0x278>
 80080ce:	4b30      	ldr	r3, [pc, #192]	@ (8008190 <UART_SetConfig+0x2e4>)
 80080d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80080d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080dc:	d01a      	beq.n	8008114 <UART_SetConfig+0x268>
 80080de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80080e2:	d81b      	bhi.n	800811c <UART_SetConfig+0x270>
 80080e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080e8:	d00c      	beq.n	8008104 <UART_SetConfig+0x258>
 80080ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080ee:	d815      	bhi.n	800811c <UART_SetConfig+0x270>
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d003      	beq.n	80080fc <UART_SetConfig+0x250>
 80080f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80080f8:	d008      	beq.n	800810c <UART_SetConfig+0x260>
 80080fa:	e00f      	b.n	800811c <UART_SetConfig+0x270>
 80080fc:	2300      	movs	r3, #0
 80080fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008102:	e052      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008104:	2302      	movs	r3, #2
 8008106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800810a:	e04e      	b.n	80081aa <UART_SetConfig+0x2fe>
 800810c:	2304      	movs	r3, #4
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008112:	e04a      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008114:	2308      	movs	r3, #8
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800811a:	e046      	b.n	80081aa <UART_SetConfig+0x2fe>
 800811c:	2310      	movs	r3, #16
 800811e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008122:	e042      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008124:	697b      	ldr	r3, [r7, #20]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	4a17      	ldr	r2, [pc, #92]	@ (8008188 <UART_SetConfig+0x2dc>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d13a      	bne.n	80081a4 <UART_SetConfig+0x2f8>
 800812e:	4b18      	ldr	r3, [pc, #96]	@ (8008190 <UART_SetConfig+0x2e4>)
 8008130:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008134:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8008138:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800813c:	d01a      	beq.n	8008174 <UART_SetConfig+0x2c8>
 800813e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8008142:	d81b      	bhi.n	800817c <UART_SetConfig+0x2d0>
 8008144:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8008148:	d00c      	beq.n	8008164 <UART_SetConfig+0x2b8>
 800814a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800814e:	d815      	bhi.n	800817c <UART_SetConfig+0x2d0>
 8008150:	2b00      	cmp	r3, #0
 8008152:	d003      	beq.n	800815c <UART_SetConfig+0x2b0>
 8008154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008158:	d008      	beq.n	800816c <UART_SetConfig+0x2c0>
 800815a:	e00f      	b.n	800817c <UART_SetConfig+0x2d0>
 800815c:	2300      	movs	r3, #0
 800815e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008162:	e022      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008164:	2302      	movs	r3, #2
 8008166:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800816a:	e01e      	b.n	80081aa <UART_SetConfig+0x2fe>
 800816c:	2304      	movs	r3, #4
 800816e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008172:	e01a      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008174:	2308      	movs	r3, #8
 8008176:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800817a:	e016      	b.n	80081aa <UART_SetConfig+0x2fe>
 800817c:	2310      	movs	r3, #16
 800817e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008182:	e012      	b.n	80081aa <UART_SetConfig+0x2fe>
 8008184:	cfff69f3 	.word	0xcfff69f3
 8008188:	40008000 	.word	0x40008000
 800818c:	40013800 	.word	0x40013800
 8008190:	40021000 	.word	0x40021000
 8008194:	40004400 	.word	0x40004400
 8008198:	40004800 	.word	0x40004800
 800819c:	40004c00 	.word	0x40004c00
 80081a0:	40005000 	.word	0x40005000
 80081a4:	2310      	movs	r3, #16
 80081a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80081aa:	697b      	ldr	r3, [r7, #20]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	4aae      	ldr	r2, [pc, #696]	@ (8008468 <UART_SetConfig+0x5bc>)
 80081b0:	4293      	cmp	r3, r2
 80081b2:	f040 8097 	bne.w	80082e4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80081b6:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80081ba:	2b08      	cmp	r3, #8
 80081bc:	d823      	bhi.n	8008206 <UART_SetConfig+0x35a>
 80081be:	a201      	add	r2, pc, #4	@ (adr r2, 80081c4 <UART_SetConfig+0x318>)
 80081c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081c4:	080081e9 	.word	0x080081e9
 80081c8:	08008207 	.word	0x08008207
 80081cc:	080081f1 	.word	0x080081f1
 80081d0:	08008207 	.word	0x08008207
 80081d4:	080081f7 	.word	0x080081f7
 80081d8:	08008207 	.word	0x08008207
 80081dc:	08008207 	.word	0x08008207
 80081e0:	08008207 	.word	0x08008207
 80081e4:	080081ff 	.word	0x080081ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80081e8:	f7fd fd28 	bl	8005c3c <HAL_RCC_GetPCLK1Freq>
 80081ec:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081ee:	e010      	b.n	8008212 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80081f0:	4b9e      	ldr	r3, [pc, #632]	@ (800846c <UART_SetConfig+0x5c0>)
 80081f2:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80081f4:	e00d      	b.n	8008212 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80081f6:	f7fd fcb3 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 80081fa:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80081fc:	e009      	b.n	8008212 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80081fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008202:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008204:	e005      	b.n	8008212 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008206:	2300      	movs	r3, #0
 8008208:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800820a:	2301      	movs	r3, #1
 800820c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008210:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008214:	2b00      	cmp	r3, #0
 8008216:	f000 8130 	beq.w	800847a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800821e:	4a94      	ldr	r2, [pc, #592]	@ (8008470 <UART_SetConfig+0x5c4>)
 8008220:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008224:	461a      	mov	r2, r3
 8008226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008228:	fbb3 f3f2 	udiv	r3, r3, r2
 800822c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	685a      	ldr	r2, [r3, #4]
 8008232:	4613      	mov	r3, r2
 8008234:	005b      	lsls	r3, r3, #1
 8008236:	4413      	add	r3, r2
 8008238:	69ba      	ldr	r2, [r7, #24]
 800823a:	429a      	cmp	r2, r3
 800823c:	d305      	bcc.n	800824a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	685b      	ldr	r3, [r3, #4]
 8008242:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008244:	69ba      	ldr	r2, [r7, #24]
 8008246:	429a      	cmp	r2, r3
 8008248:	d903      	bls.n	8008252 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800824a:	2301      	movs	r3, #1
 800824c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8008250:	e113      	b.n	800847a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008254:	2200      	movs	r2, #0
 8008256:	60bb      	str	r3, [r7, #8]
 8008258:	60fa      	str	r2, [r7, #12]
 800825a:	697b      	ldr	r3, [r7, #20]
 800825c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800825e:	4a84      	ldr	r2, [pc, #528]	@ (8008470 <UART_SetConfig+0x5c4>)
 8008260:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008264:	b29b      	uxth	r3, r3
 8008266:	2200      	movs	r2, #0
 8008268:	603b      	str	r3, [r7, #0]
 800826a:	607a      	str	r2, [r7, #4]
 800826c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008270:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008274:	f7f8 fc16 	bl	8000aa4 <__aeabi_uldivmod>
 8008278:	4602      	mov	r2, r0
 800827a:	460b      	mov	r3, r1
 800827c:	4610      	mov	r0, r2
 800827e:	4619      	mov	r1, r3
 8008280:	f04f 0200 	mov.w	r2, #0
 8008284:	f04f 0300 	mov.w	r3, #0
 8008288:	020b      	lsls	r3, r1, #8
 800828a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800828e:	0202      	lsls	r2, r0, #8
 8008290:	6979      	ldr	r1, [r7, #20]
 8008292:	6849      	ldr	r1, [r1, #4]
 8008294:	0849      	lsrs	r1, r1, #1
 8008296:	2000      	movs	r0, #0
 8008298:	460c      	mov	r4, r1
 800829a:	4605      	mov	r5, r0
 800829c:	eb12 0804 	adds.w	r8, r2, r4
 80082a0:	eb43 0905 	adc.w	r9, r3, r5
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	2200      	movs	r2, #0
 80082aa:	469a      	mov	sl, r3
 80082ac:	4693      	mov	fp, r2
 80082ae:	4652      	mov	r2, sl
 80082b0:	465b      	mov	r3, fp
 80082b2:	4640      	mov	r0, r8
 80082b4:	4649      	mov	r1, r9
 80082b6:	f7f8 fbf5 	bl	8000aa4 <__aeabi_uldivmod>
 80082ba:	4602      	mov	r2, r0
 80082bc:	460b      	mov	r3, r1
 80082be:	4613      	mov	r3, r2
 80082c0:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80082c2:	6a3b      	ldr	r3, [r7, #32]
 80082c4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80082c8:	d308      	bcc.n	80082dc <UART_SetConfig+0x430>
 80082ca:	6a3b      	ldr	r3, [r7, #32]
 80082cc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80082d0:	d204      	bcs.n	80082dc <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6a3a      	ldr	r2, [r7, #32]
 80082d8:	60da      	str	r2, [r3, #12]
 80082da:	e0ce      	b.n	800847a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80082dc:	2301      	movs	r3, #1
 80082de:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80082e2:	e0ca      	b.n	800847a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80082e4:	697b      	ldr	r3, [r7, #20]
 80082e6:	69db      	ldr	r3, [r3, #28]
 80082e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80082ec:	d166      	bne.n	80083bc <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80082ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80082f2:	2b08      	cmp	r3, #8
 80082f4:	d827      	bhi.n	8008346 <UART_SetConfig+0x49a>
 80082f6:	a201      	add	r2, pc, #4	@ (adr r2, 80082fc <UART_SetConfig+0x450>)
 80082f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082fc:	08008321 	.word	0x08008321
 8008300:	08008329 	.word	0x08008329
 8008304:	08008331 	.word	0x08008331
 8008308:	08008347 	.word	0x08008347
 800830c:	08008337 	.word	0x08008337
 8008310:	08008347 	.word	0x08008347
 8008314:	08008347 	.word	0x08008347
 8008318:	08008347 	.word	0x08008347
 800831c:	0800833f 	.word	0x0800833f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008320:	f7fd fc8c 	bl	8005c3c <HAL_RCC_GetPCLK1Freq>
 8008324:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008326:	e014      	b.n	8008352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008328:	f7fd fc9e 	bl	8005c68 <HAL_RCC_GetPCLK2Freq>
 800832c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800832e:	e010      	b.n	8008352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008330:	4b4e      	ldr	r3, [pc, #312]	@ (800846c <UART_SetConfig+0x5c0>)
 8008332:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008334:	e00d      	b.n	8008352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008336:	f7fd fc13 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 800833a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800833c:	e009      	b.n	8008352 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800833e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008342:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008344:	e005      	b.n	8008352 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008346:	2300      	movs	r3, #0
 8008348:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800834a:	2301      	movs	r3, #1
 800834c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008350:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008354:	2b00      	cmp	r3, #0
 8008356:	f000 8090 	beq.w	800847a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800835a:	697b      	ldr	r3, [r7, #20]
 800835c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800835e:	4a44      	ldr	r2, [pc, #272]	@ (8008470 <UART_SetConfig+0x5c4>)
 8008360:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008364:	461a      	mov	r2, r3
 8008366:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008368:	fbb3 f3f2 	udiv	r3, r3, r2
 800836c:	005a      	lsls	r2, r3, #1
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	085b      	lsrs	r3, r3, #1
 8008374:	441a      	add	r2, r3
 8008376:	697b      	ldr	r3, [r7, #20]
 8008378:	685b      	ldr	r3, [r3, #4]
 800837a:	fbb2 f3f3 	udiv	r3, r2, r3
 800837e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008380:	6a3b      	ldr	r3, [r7, #32]
 8008382:	2b0f      	cmp	r3, #15
 8008384:	d916      	bls.n	80083b4 <UART_SetConfig+0x508>
 8008386:	6a3b      	ldr	r3, [r7, #32]
 8008388:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800838c:	d212      	bcs.n	80083b4 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	b29b      	uxth	r3, r3
 8008392:	f023 030f 	bic.w	r3, r3, #15
 8008396:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008398:	6a3b      	ldr	r3, [r7, #32]
 800839a:	085b      	lsrs	r3, r3, #1
 800839c:	b29b      	uxth	r3, r3
 800839e:	f003 0307 	and.w	r3, r3, #7
 80083a2:	b29a      	uxth	r2, r3
 80083a4:	8bfb      	ldrh	r3, [r7, #30]
 80083a6:	4313      	orrs	r3, r2
 80083a8:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80083aa:	697b      	ldr	r3, [r7, #20]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	8bfa      	ldrh	r2, [r7, #30]
 80083b0:	60da      	str	r2, [r3, #12]
 80083b2:	e062      	b.n	800847a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80083b4:	2301      	movs	r3, #1
 80083b6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80083ba:	e05e      	b.n	800847a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80083bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80083c0:	2b08      	cmp	r3, #8
 80083c2:	d828      	bhi.n	8008416 <UART_SetConfig+0x56a>
 80083c4:	a201      	add	r2, pc, #4	@ (adr r2, 80083cc <UART_SetConfig+0x520>)
 80083c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083ca:	bf00      	nop
 80083cc:	080083f1 	.word	0x080083f1
 80083d0:	080083f9 	.word	0x080083f9
 80083d4:	08008401 	.word	0x08008401
 80083d8:	08008417 	.word	0x08008417
 80083dc:	08008407 	.word	0x08008407
 80083e0:	08008417 	.word	0x08008417
 80083e4:	08008417 	.word	0x08008417
 80083e8:	08008417 	.word	0x08008417
 80083ec:	0800840f 	.word	0x0800840f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80083f0:	f7fd fc24 	bl	8005c3c <HAL_RCC_GetPCLK1Freq>
 80083f4:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083f6:	e014      	b.n	8008422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80083f8:	f7fd fc36 	bl	8005c68 <HAL_RCC_GetPCLK2Freq>
 80083fc:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80083fe:	e010      	b.n	8008422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008400:	4b1a      	ldr	r3, [pc, #104]	@ (800846c <UART_SetConfig+0x5c0>)
 8008402:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008404:	e00d      	b.n	8008422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008406:	f7fd fbab 	bl	8005b60 <HAL_RCC_GetSysClockFreq>
 800840a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800840c:	e009      	b.n	8008422 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800840e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008412:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008414:	e005      	b.n	8008422 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008416:	2300      	movs	r3, #0
 8008418:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800841a:	2301      	movs	r3, #1
 800841c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008420:	bf00      	nop
    }

    if (pclk != 0U)
 8008422:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008424:	2b00      	cmp	r3, #0
 8008426:	d028      	beq.n	800847a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008428:	697b      	ldr	r3, [r7, #20]
 800842a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800842c:	4a10      	ldr	r2, [pc, #64]	@ (8008470 <UART_SetConfig+0x5c4>)
 800842e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008432:	461a      	mov	r2, r3
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	fbb3 f2f2 	udiv	r2, r3, r2
 800843a:	697b      	ldr	r3, [r7, #20]
 800843c:	685b      	ldr	r3, [r3, #4]
 800843e:	085b      	lsrs	r3, r3, #1
 8008440:	441a      	add	r2, r3
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	685b      	ldr	r3, [r3, #4]
 8008446:	fbb2 f3f3 	udiv	r3, r2, r3
 800844a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	2b0f      	cmp	r3, #15
 8008450:	d910      	bls.n	8008474 <UART_SetConfig+0x5c8>
 8008452:	6a3b      	ldr	r3, [r7, #32]
 8008454:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008458:	d20c      	bcs.n	8008474 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800845a:	6a3b      	ldr	r3, [r7, #32]
 800845c:	b29a      	uxth	r2, r3
 800845e:	697b      	ldr	r3, [r7, #20]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	60da      	str	r2, [r3, #12]
 8008464:	e009      	b.n	800847a <UART_SetConfig+0x5ce>
 8008466:	bf00      	nop
 8008468:	40008000 	.word	0x40008000
 800846c:	00f42400 	.word	0x00f42400
 8008470:	08008bdc 	.word	0x08008bdc
      }
      else
      {
        ret = HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	2201      	movs	r2, #1
 800847e:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8008482:	697b      	ldr	r3, [r7, #20]
 8008484:	2201      	movs	r2, #1
 8008486:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800848a:	697b      	ldr	r3, [r7, #20]
 800848c:	2200      	movs	r2, #0
 800848e:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	2200      	movs	r2, #0
 8008494:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008496:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800849a:	4618      	mov	r0, r3
 800849c:	3730      	adds	r7, #48	@ 0x30
 800849e:	46bd      	mov	sp, r7
 80084a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080084a4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084b0:	f003 0308 	and.w	r3, r3, #8
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d00a      	beq.n	80084ce <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	430a      	orrs	r2, r1
 80084cc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d2:	f003 0301 	and.w	r3, r3, #1
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d00a      	beq.n	80084f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	430a      	orrs	r2, r1
 80084ee:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f4:	f003 0302 	and.w	r3, r3, #2
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d00a      	beq.n	8008512 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	685b      	ldr	r3, [r3, #4]
 8008502:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	430a      	orrs	r2, r1
 8008510:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008516:	f003 0304 	and.w	r3, r3, #4
 800851a:	2b00      	cmp	r3, #0
 800851c:	d00a      	beq.n	8008534 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	685b      	ldr	r3, [r3, #4]
 8008524:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	430a      	orrs	r2, r1
 8008532:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008538:	f003 0310 	and.w	r3, r3, #16
 800853c:	2b00      	cmp	r3, #0
 800853e:	d00a      	beq.n	8008556 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	430a      	orrs	r2, r1
 8008554:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800855a:	f003 0320 	and.w	r3, r3, #32
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00a      	beq.n	8008578 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	689b      	ldr	r3, [r3, #8]
 8008568:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008580:	2b00      	cmp	r3, #0
 8008582:	d01a      	beq.n	80085ba <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	430a      	orrs	r2, r1
 8008598:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800859e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085a2:	d10a      	bne.n	80085ba <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	430a      	orrs	r2, r1
 80085b8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085be:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d00a      	beq.n	80085dc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	430a      	orrs	r2, r1
 80085da:	605a      	str	r2, [r3, #4]
  }
}
 80085dc:	bf00      	nop
 80085de:	370c      	adds	r7, #12
 80085e0:	46bd      	mov	sp, r7
 80085e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e6:	4770      	bx	lr

080085e8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b098      	sub	sp, #96	@ 0x60
 80085ec:	af02      	add	r7, sp, #8
 80085ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80085f8:	f7fa f884 	bl	8002704 <HAL_GetTick>
 80085fc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f003 0308 	and.w	r3, r3, #8
 8008608:	2b08      	cmp	r3, #8
 800860a:	d12f      	bne.n	800866c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800860c:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008610:	9300      	str	r3, [sp, #0]
 8008612:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008614:	2200      	movs	r2, #0
 8008616:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800861a:	6878      	ldr	r0, [r7, #4]
 800861c:	f000 f88e 	bl	800873c <UART_WaitOnFlagUntilTimeout>
 8008620:	4603      	mov	r3, r0
 8008622:	2b00      	cmp	r3, #0
 8008624:	d022      	beq.n	800866c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800862e:	e853 3f00 	ldrex	r3, [r3]
 8008632:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008636:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800863a:	653b      	str	r3, [r7, #80]	@ 0x50
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	461a      	mov	r2, r3
 8008642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008644:	647b      	str	r3, [r7, #68]	@ 0x44
 8008646:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008648:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800864a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800864c:	e841 2300 	strex	r3, r2, [r1]
 8008650:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008654:	2b00      	cmp	r3, #0
 8008656:	d1e6      	bne.n	8008626 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	2220      	movs	r2, #32
 800865c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	2200      	movs	r2, #0
 8008664:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008668:	2303      	movs	r3, #3
 800866a:	e063      	b.n	8008734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0304 	and.w	r3, r3, #4
 8008676:	2b04      	cmp	r3, #4
 8008678:	d149      	bne.n	800870e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800867a:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800867e:	9300      	str	r3, [sp, #0]
 8008680:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008682:	2200      	movs	r2, #0
 8008684:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008688:	6878      	ldr	r0, [r7, #4]
 800868a:	f000 f857 	bl	800873c <UART_WaitOnFlagUntilTimeout>
 800868e:	4603      	mov	r3, r0
 8008690:	2b00      	cmp	r3, #0
 8008692:	d03c      	beq.n	800870e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800869a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869c:	e853 3f00 	ldrex	r3, [r3]
 80086a0:	623b      	str	r3, [r7, #32]
   return(result);
 80086a2:	6a3b      	ldr	r3, [r7, #32]
 80086a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80086a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	461a      	mov	r2, r3
 80086b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80086b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80086b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80086b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086ba:	e841 2300 	strex	r3, r2, [r1]
 80086be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80086c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d1e6      	bne.n	8008694 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3308      	adds	r3, #8
 80086cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ce:	693b      	ldr	r3, [r7, #16]
 80086d0:	e853 3f00 	ldrex	r3, [r3]
 80086d4:	60fb      	str	r3, [r7, #12]
   return(result);
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	f023 0301 	bic.w	r3, r3, #1
 80086dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	3308      	adds	r3, #8
 80086e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80086e6:	61fa      	str	r2, [r7, #28]
 80086e8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ea:	69b9      	ldr	r1, [r7, #24]
 80086ec:	69fa      	ldr	r2, [r7, #28]
 80086ee:	e841 2300 	strex	r3, r2, [r1]
 80086f2:	617b      	str	r3, [r7, #20]
   return(result);
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d1e5      	bne.n	80086c6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	2220      	movs	r2, #32
 80086fe:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2200      	movs	r2, #0
 8008706:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800870a:	2303      	movs	r3, #3
 800870c:	e012      	b.n	8008734 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	2220      	movs	r2, #32
 8008712:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2220      	movs	r2, #32
 800871a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	2200      	movs	r2, #0
 8008722:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2200      	movs	r2, #0
 8008728:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	2200      	movs	r2, #0
 800872e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008732:	2300      	movs	r3, #0
}
 8008734:	4618      	mov	r0, r3
 8008736:	3758      	adds	r7, #88	@ 0x58
 8008738:	46bd      	mov	sp, r7
 800873a:	bd80      	pop	{r7, pc}

0800873c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800873c:	b580      	push	{r7, lr}
 800873e:	b084      	sub	sp, #16
 8008740:	af00      	add	r7, sp, #0
 8008742:	60f8      	str	r0, [r7, #12]
 8008744:	60b9      	str	r1, [r7, #8]
 8008746:	603b      	str	r3, [r7, #0]
 8008748:	4613      	mov	r3, r2
 800874a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800874c:	e04f      	b.n	80087ee <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800874e:	69bb      	ldr	r3, [r7, #24]
 8008750:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008754:	d04b      	beq.n	80087ee <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008756:	f7f9 ffd5 	bl	8002704 <HAL_GetTick>
 800875a:	4602      	mov	r2, r0
 800875c:	683b      	ldr	r3, [r7, #0]
 800875e:	1ad3      	subs	r3, r2, r3
 8008760:	69ba      	ldr	r2, [r7, #24]
 8008762:	429a      	cmp	r2, r3
 8008764:	d302      	bcc.n	800876c <UART_WaitOnFlagUntilTimeout+0x30>
 8008766:	69bb      	ldr	r3, [r7, #24]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d101      	bne.n	8008770 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e04e      	b.n	800880e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	f003 0304 	and.w	r3, r3, #4
 800877a:	2b00      	cmp	r3, #0
 800877c:	d037      	beq.n	80087ee <UART_WaitOnFlagUntilTimeout+0xb2>
 800877e:	68bb      	ldr	r3, [r7, #8]
 8008780:	2b80      	cmp	r3, #128	@ 0x80
 8008782:	d034      	beq.n	80087ee <UART_WaitOnFlagUntilTimeout+0xb2>
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	2b40      	cmp	r3, #64	@ 0x40
 8008788:	d031      	beq.n	80087ee <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800878a:	68fb      	ldr	r3, [r7, #12]
 800878c:	681b      	ldr	r3, [r3, #0]
 800878e:	69db      	ldr	r3, [r3, #28]
 8008790:	f003 0308 	and.w	r3, r3, #8
 8008794:	2b08      	cmp	r3, #8
 8008796:	d110      	bne.n	80087ba <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	2208      	movs	r2, #8
 800879e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087a0:	68f8      	ldr	r0, [r7, #12]
 80087a2:	f000 f838 	bl	8008816 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2208      	movs	r2, #8
 80087aa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	2200      	movs	r2, #0
 80087b2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80087b6:	2301      	movs	r3, #1
 80087b8:	e029      	b.n	800880e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	69db      	ldr	r3, [r3, #28]
 80087c0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80087c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80087c8:	d111      	bne.n	80087ee <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80087d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80087d4:	68f8      	ldr	r0, [r7, #12]
 80087d6:	f000 f81e 	bl	8008816 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80087da:	68fb      	ldr	r3, [r7, #12]
 80087dc:	2220      	movs	r2, #32
 80087de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80087e2:	68fb      	ldr	r3, [r7, #12]
 80087e4:	2200      	movs	r2, #0
 80087e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80087ea:	2303      	movs	r3, #3
 80087ec:	e00f      	b.n	800880e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	69da      	ldr	r2, [r3, #28]
 80087f4:	68bb      	ldr	r3, [r7, #8]
 80087f6:	4013      	ands	r3, r2
 80087f8:	68ba      	ldr	r2, [r7, #8]
 80087fa:	429a      	cmp	r2, r3
 80087fc:	bf0c      	ite	eq
 80087fe:	2301      	moveq	r3, #1
 8008800:	2300      	movne	r3, #0
 8008802:	b2db      	uxtb	r3, r3
 8008804:	461a      	mov	r2, r3
 8008806:	79fb      	ldrb	r3, [r7, #7]
 8008808:	429a      	cmp	r2, r3
 800880a:	d0a0      	beq.n	800874e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800880c:	2300      	movs	r3, #0
}
 800880e:	4618      	mov	r0, r3
 8008810:	3710      	adds	r7, #16
 8008812:	46bd      	mov	sp, r7
 8008814:	bd80      	pop	{r7, pc}

08008816 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008816:	b480      	push	{r7}
 8008818:	b095      	sub	sp, #84	@ 0x54
 800881a:	af00      	add	r7, sp, #0
 800881c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008824:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008826:	e853 3f00 	ldrex	r3, [r3]
 800882a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800882c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800882e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008832:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	461a      	mov	r2, r3
 800883a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800883c:	643b      	str	r3, [r7, #64]	@ 0x40
 800883e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008840:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008842:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008844:	e841 2300 	strex	r3, r2, [r1]
 8008848:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800884a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800884c:	2b00      	cmp	r3, #0
 800884e:	d1e6      	bne.n	800881e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3308      	adds	r3, #8
 8008856:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008858:	6a3b      	ldr	r3, [r7, #32]
 800885a:	e853 3f00 	ldrex	r3, [r3]
 800885e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008860:	69fb      	ldr	r3, [r7, #28]
 8008862:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008866:	f023 0301 	bic.w	r3, r3, #1
 800886a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	3308      	adds	r3, #8
 8008872:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008874:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008876:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008878:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800887a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800887c:	e841 2300 	strex	r3, r2, [r1]
 8008880:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008884:	2b00      	cmp	r3, #0
 8008886:	d1e3      	bne.n	8008850 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800888c:	2b01      	cmp	r3, #1
 800888e:	d118      	bne.n	80088c2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	e853 3f00 	ldrex	r3, [r3]
 800889c:	60bb      	str	r3, [r7, #8]
   return(result);
 800889e:	68bb      	ldr	r3, [r7, #8]
 80088a0:	f023 0310 	bic.w	r3, r3, #16
 80088a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	461a      	mov	r2, r3
 80088ac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80088ae:	61bb      	str	r3, [r7, #24]
 80088b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088b2:	6979      	ldr	r1, [r7, #20]
 80088b4:	69ba      	ldr	r2, [r7, #24]
 80088b6:	e841 2300 	strex	r3, r2, [r1]
 80088ba:	613b      	str	r3, [r7, #16]
   return(result);
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1e6      	bne.n	8008890 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	2200      	movs	r2, #0
 80088d4:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80088d6:	bf00      	nop
 80088d8:	3754      	adds	r7, #84	@ 0x54
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr

080088e2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80088e2:	b480      	push	{r7}
 80088e4:	b085      	sub	sp, #20
 80088e6:	af00      	add	r7, sp, #0
 80088e8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80088f0:	2b01      	cmp	r3, #1
 80088f2:	d101      	bne.n	80088f8 <HAL_UARTEx_DisableFifoMode+0x16>
 80088f4:	2302      	movs	r3, #2
 80088f6:	e027      	b.n	8008948 <HAL_UARTEx_DisableFifoMode+0x66>
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2201      	movs	r2, #1
 80088fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	2224      	movs	r2, #36	@ 0x24
 8008904:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	681b      	ldr	r3, [r3, #0]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	681a      	ldr	r2, [r3, #0]
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	f022 0201 	bic.w	r2, r2, #1
 800891e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008926:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2200      	movs	r2, #0
 800892c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	68fa      	ldr	r2, [r7, #12]
 8008934:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2220      	movs	r2, #32
 800893a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	2200      	movs	r2, #0
 8008942:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008946:	2300      	movs	r3, #0
}
 8008948:	4618      	mov	r0, r3
 800894a:	3714      	adds	r7, #20
 800894c:	46bd      	mov	sp, r7
 800894e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008952:	4770      	bx	lr

08008954 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8008954:	b580      	push	{r7, lr}
 8008956:	b084      	sub	sp, #16
 8008958:	af00      	add	r7, sp, #0
 800895a:	6078      	str	r0, [r7, #4]
 800895c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800895e:	687b      	ldr	r3, [r7, #4]
 8008960:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8008964:	2b01      	cmp	r3, #1
 8008966:	d101      	bne.n	800896c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008968:	2302      	movs	r3, #2
 800896a:	e02d      	b.n	80089c8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2201      	movs	r2, #1
 8008970:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	2224      	movs	r2, #36	@ 0x24
 8008978:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	681a      	ldr	r2, [r3, #0]
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	f022 0201 	bic.w	r2, r2, #1
 8008992:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	683a      	ldr	r2, [r7, #0]
 80089a4:	430a      	orrs	r2, r1
 80089a6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089a8:	6878      	ldr	r0, [r7, #4]
 80089aa:	f000 f84f 	bl	8008a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	68fa      	ldr	r2, [r7, #12]
 80089b4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2220      	movs	r2, #32
 80089ba:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	2200      	movs	r2, #0
 80089c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3710      	adds	r7, #16
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
 80089d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80089e0:	2b01      	cmp	r3, #1
 80089e2:	d101      	bne.n	80089e8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089e4:	2302      	movs	r3, #2
 80089e6:	e02d      	b.n	8008a44 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2224      	movs	r2, #36	@ 0x24
 80089f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	681a      	ldr	r2, [r3, #0]
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f022 0201 	bic.w	r2, r2, #1
 8008a0e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	689b      	ldr	r3, [r3, #8]
 8008a16:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	683a      	ldr	r2, [r7, #0]
 8008a20:	430a      	orrs	r2, r1
 8008a22:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008a24:	6878      	ldr	r0, [r7, #4]
 8008a26:	f000 f811 	bl	8008a4c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	68fa      	ldr	r2, [r7, #12]
 8008a30:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2220      	movs	r2, #32
 8008a36:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3710      	adds	r7, #16
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}

08008a4c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008a4c:	b480      	push	{r7}
 8008a4e:	b085      	sub	sp, #20
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d108      	bne.n	8008a6e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	2201      	movs	r2, #1
 8008a60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	2201      	movs	r2, #1
 8008a68:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008a6c:	e031      	b.n	8008ad2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008a6e:	2308      	movs	r3, #8
 8008a70:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008a72:	2308      	movs	r3, #8
 8008a74:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	689b      	ldr	r3, [r3, #8]
 8008a7c:	0e5b      	lsrs	r3, r3, #25
 8008a7e:	b2db      	uxtb	r3, r3
 8008a80:	f003 0307 	and.w	r3, r3, #7
 8008a84:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	0f5b      	lsrs	r3, r3, #29
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	f003 0307 	and.w	r3, r3, #7
 8008a94:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008a96:	7bbb      	ldrb	r3, [r7, #14]
 8008a98:	7b3a      	ldrb	r2, [r7, #12]
 8008a9a:	4911      	ldr	r1, [pc, #68]	@ (8008ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8008a9c:	5c8a      	ldrb	r2, [r1, r2]
 8008a9e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008aa2:	7b3a      	ldrb	r2, [r7, #12]
 8008aa4:	490f      	ldr	r1, [pc, #60]	@ (8008ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8008aa6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008aa8:	fb93 f3f2 	sdiv	r3, r3, r2
 8008aac:	b29a      	uxth	r2, r3
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ab4:	7bfb      	ldrb	r3, [r7, #15]
 8008ab6:	7b7a      	ldrb	r2, [r7, #13]
 8008ab8:	4909      	ldr	r1, [pc, #36]	@ (8008ae0 <UARTEx_SetNbDataToProcess+0x94>)
 8008aba:	5c8a      	ldrb	r2, [r1, r2]
 8008abc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008ac0:	7b7a      	ldrb	r2, [r7, #13]
 8008ac2:	4908      	ldr	r1, [pc, #32]	@ (8008ae4 <UARTEx_SetNbDataToProcess+0x98>)
 8008ac4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008ac6:	fb93 f3f2 	sdiv	r3, r3, r2
 8008aca:	b29a      	uxth	r2, r3
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008ad2:	bf00      	nop
 8008ad4:	3714      	adds	r7, #20
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008adc:	4770      	bx	lr
 8008ade:	bf00      	nop
 8008ae0:	08008bf4 	.word	0x08008bf4
 8008ae4:	08008bfc 	.word	0x08008bfc

08008ae8 <arm_pid_init_f32>:
 */

void arm_pid_init_f32(
  arm_pid_instance_f32 * S,
  int32_t resetStateFlag)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b082      	sub	sp, #8
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
 8008af0:	6039      	str	r1, [r7, #0]
  /* Derived coefficient A0 */
  S->A0 = S->Kp + S->Ki + S->Kd;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	ed93 7a06 	vldr	s14, [r3, #24]
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	edd3 7a07 	vldr	s15, [r3, #28]
 8008afe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	edd3 7a08 	vldr	s15, [r3, #32]
 8008b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	edc3 7a00 	vstr	s15, [r3]

  /* Derived coefficient A1 */
  S->A1 = (-S->Kp) - ((float32_t) 2.0f * S->Kd);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	edd3 7a06 	vldr	s15, [r3, #24]
 8008b18:	eeb1 7a67 	vneg.f32	s14, s15
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	edd3 7a08 	vldr	s15, [r3, #32]
 8008b22:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8008b26:	ee77 7a67 	vsub.f32	s15, s14, s15
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	edc3 7a01 	vstr	s15, [r3, #4]

  /* Derived coefficient A2 */
  S->A2 = S->Kd;
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6a1a      	ldr	r2, [r3, #32]
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	609a      	str	r2, [r3, #8]

  /* Check whether state needs reset or not */
  if (resetStateFlag)
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	2b00      	cmp	r3, #0
 8008b3c:	d006      	beq.n	8008b4c <arm_pid_init_f32+0x64>
  {
    /* Reset state to zero, The size will be always 3 samples */
    memset(S->state, 0, 3U * sizeof(float32_t));
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	330c      	adds	r3, #12
 8008b42:	220c      	movs	r2, #12
 8008b44:	2100      	movs	r1, #0
 8008b46:	4618      	mov	r0, r3
 8008b48:	f000 f804 	bl	8008b54 <memset>
  }

}
 8008b4c:	bf00      	nop
 8008b4e:	3708      	adds	r7, #8
 8008b50:	46bd      	mov	sp, r7
 8008b52:	bd80      	pop	{r7, pc}

08008b54 <memset>:
 8008b54:	4402      	add	r2, r0
 8008b56:	4603      	mov	r3, r0
 8008b58:	4293      	cmp	r3, r2
 8008b5a:	d100      	bne.n	8008b5e <memset+0xa>
 8008b5c:	4770      	bx	lr
 8008b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b62:	e7f9      	b.n	8008b58 <memset+0x4>

08008b64 <__libc_init_array>:
 8008b64:	b570      	push	{r4, r5, r6, lr}
 8008b66:	4d0d      	ldr	r5, [pc, #52]	@ (8008b9c <__libc_init_array+0x38>)
 8008b68:	4c0d      	ldr	r4, [pc, #52]	@ (8008ba0 <__libc_init_array+0x3c>)
 8008b6a:	1b64      	subs	r4, r4, r5
 8008b6c:	10a4      	asrs	r4, r4, #2
 8008b6e:	2600      	movs	r6, #0
 8008b70:	42a6      	cmp	r6, r4
 8008b72:	d109      	bne.n	8008b88 <__libc_init_array+0x24>
 8008b74:	4d0b      	ldr	r5, [pc, #44]	@ (8008ba4 <__libc_init_array+0x40>)
 8008b76:	4c0c      	ldr	r4, [pc, #48]	@ (8008ba8 <__libc_init_array+0x44>)
 8008b78:	f000 f818 	bl	8008bac <_init>
 8008b7c:	1b64      	subs	r4, r4, r5
 8008b7e:	10a4      	asrs	r4, r4, #2
 8008b80:	2600      	movs	r6, #0
 8008b82:	42a6      	cmp	r6, r4
 8008b84:	d105      	bne.n	8008b92 <__libc_init_array+0x2e>
 8008b86:	bd70      	pop	{r4, r5, r6, pc}
 8008b88:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b8c:	4798      	blx	r3
 8008b8e:	3601      	adds	r6, #1
 8008b90:	e7ee      	b.n	8008b70 <__libc_init_array+0xc>
 8008b92:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b96:	4798      	blx	r3
 8008b98:	3601      	adds	r6, #1
 8008b9a:	e7f2      	b.n	8008b82 <__libc_init_array+0x1e>
 8008b9c:	08008c0c 	.word	0x08008c0c
 8008ba0:	08008c0c 	.word	0x08008c0c
 8008ba4:	08008c0c 	.word	0x08008c0c
 8008ba8:	08008c10 	.word	0x08008c10

08008bac <_init>:
 8008bac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bae:	bf00      	nop
 8008bb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bb2:	bc08      	pop	{r3}
 8008bb4:	469e      	mov	lr, r3
 8008bb6:	4770      	bx	lr

08008bb8 <_fini>:
 8008bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bba:	bf00      	nop
 8008bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008bbe:	bc08      	pop	{r3}
 8008bc0:	469e      	mov	lr, r3
 8008bc2:	4770      	bx	lr
